
MOTOR_FINAL_wrking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008500  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  080086a0  080086a0  000096a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ae0  08008ae0  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008ae0  08008ae0  00009ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ae8  08008ae8  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ae8  08008ae8  00009ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008aec  08008aec  00009aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008af0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  200001d8  08008cc8  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08008cc8  0000a4a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac7a  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7d  00000000  00000000  00014e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00016b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091a  00000000  00000000  000176d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178c0  00000000  00000000  00017ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d35c  00000000  00000000  0002f8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009338a  00000000  00000000  0003cc0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cff98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004668  00000000  00000000  000cffdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d4644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008688 	.word	0x08008688

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008688 	.word	0x08008688

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <microDelay>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Microsecond delay function
void microDelay(uint16_t delay)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <microDelay+0x30>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 8001006:	bf00      	nop
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <microDelay+0x30>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	429a      	cmp	r2, r3
 8001012:	d3f9      	bcc.n	8001008 <microDelay+0x14>
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	2000027c 	.word	0x2000027c

08001028 <stop_motor>:

// Stop all motors
void stop_motor(uint8_t motor_num)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	switch(motor_num)
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	3b01      	subs	r3, #1
 8001036:	2b03      	cmp	r3, #3
 8001038:	d825      	bhi.n	8001086 <stop_motor+0x5e>
 800103a:	a201      	add	r2, pc, #4	@ (adr r2, 8001040 <stop_motor+0x18>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	08001051 	.word	0x08001051
 8001044:	0800105f 	.word	0x0800105f
 8001048:	0800106b 	.word	0x0800106b
 800104c:	08001079 	.word	0x08001079
	{
	  case 1:
       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // Motor 1
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001056:	480e      	ldr	r0, [pc, #56]	@ (8001090 <stop_motor+0x68>)
 8001058:	f001 fc7e 	bl	8002958 <HAL_GPIO_WritePin>
       break;
 800105c:	e013      	b.n	8001086 <stop_motor+0x5e>
	  case 2:
       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET); // Motor 2
 800105e:	2200      	movs	r2, #0
 8001060:	2140      	movs	r1, #64	@ 0x40
 8001062:	480b      	ldr	r0, [pc, #44]	@ (8001090 <stop_motor+0x68>)
 8001064:	f001 fc78 	bl	8002958 <HAL_GPIO_WritePin>
       break;
 8001068:	e00d      	b.n	8001086 <stop_motor+0x5e>
	  case 3:
       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // Motor 3
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001070:	4808      	ldr	r0, [pc, #32]	@ (8001094 <stop_motor+0x6c>)
 8001072:	f001 fc71 	bl	8002958 <HAL_GPIO_WritePin>
       break;
 8001076:	e006      	b.n	8001086 <stop_motor+0x5e>
	  case 4:
	   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // Motor 3
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107e:	4804      	ldr	r0, [pc, #16]	@ (8001090 <stop_motor+0x68>)
 8001080:	f001 fc6a 	bl	8002958 <HAL_GPIO_WritePin>
	   break;
 8001084:	bf00      	nop
   }
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40020800 	.word	0x40020800
 8001094:	40020400 	.word	0x40020400

08001098 <calculateSteps>:
// Function to calculate steps for a given length in mm
int calculateSteps(float diameter, int stepsPerRevolution, float lengthToMove)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a03 	vstr	s0, [r7, #12]
 80010a2:	60b8      	str	r0, [r7, #8]
 80010a4:	edc7 0a01 	vstr	s1, [r7, #4]

    float circumference = M_PI * diameter;  // Calculate the circumference of the wheel
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f7ff fa55 	bl	8000558 <__aeabi_f2d>
 80010ae:	a318      	add	r3, pc, #96	@ (adr r3, 8001110 <calculateSteps+0x78>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff faa8 	bl	8000608 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fd9a 	bl	8000bf8 <__aeabi_d2f>
 80010c4:	4603      	mov	r3, r0
 80010c6:	617b      	str	r3, [r7, #20]
    int steps = (int)round((stepsPerRevolution * lengthToMove) / circumference); // Calculate steps required for the desired length
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010da:	edd7 7a05 	vldr	s15, [r7, #20]
 80010de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010e2:	ee16 0a90 	vmov	r0, s13
 80010e6:	f7ff fa37 	bl	8000558 <__aeabi_f2d>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	ec43 2b10 	vmov	d0, r2, r3
 80010f2:	f007 fa83 	bl	80085fc <round>
 80010f6:	ec53 2b10 	vmov	r2, r3, d0
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fd33 	bl	8000b68 <__aeabi_d2iz>
 8001102:	4603      	mov	r3, r0
 8001104:	613b      	str	r3, [r7, #16]
    return steps;
 8001106:	693b      	ldr	r3, [r7, #16]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	54442d18 	.word	0x54442d18
 8001114:	400921fb 	.word	0x400921fb

08001118 <HomeMotor>:
void HomeMotor(uint8_t motor_num)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  // Rotate motor until Z pulse is detected (handled in interrupt)
  switch(motor_num)
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	3b01      	subs	r3, #1
 8001126:	2b03      	cmp	r3, #3
 8001128:	f200 809c 	bhi.w	8001264 <HomeMotor+0x14c>
 800112c:	a201      	add	r2, pc, #4	@ (adr r2, 8001134 <HomeMotor+0x1c>)
 800112e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001132:	bf00      	nop
 8001134:	08001145 	.word	0x08001145
 8001138:	0800118d 	.word	0x0800118d
 800113c:	080011cf 	.word	0x080011cf
 8001140:	08001217 	.word	0x08001217
  {
    case 1:
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);  // Set direction.
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800114a:	4848      	ldr	r0, [pc, #288]	@ (800126c <HomeMotor+0x154>)
 800114c:	f001 fc04 	bl	8002958 <HAL_GPIO_WritePin>
      microDelay(500);
 8001150:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001154:	f7ff ff4e 	bl	8000ff4 <microDelay>
      while(!homing_done_m1)
 8001158:	e013      	b.n	8001182 <HomeMotor+0x6a>
      {
    	  	  	  	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001160:	4842      	ldr	r0, [pc, #264]	@ (800126c <HomeMotor+0x154>)
 8001162:	f001 fbf9 	bl	8002958 <HAL_GPIO_WritePin>
    					  microDelay(500);
 8001166:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800116a:	f7ff ff43 	bl	8000ff4 <microDelay>
    					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001174:	483d      	ldr	r0, [pc, #244]	@ (800126c <HomeMotor+0x154>)
 8001176:	f001 fbef 	bl	8002958 <HAL_GPIO_WritePin>
    					  microDelay(500);
 800117a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800117e:	f7ff ff39 	bl	8000ff4 <microDelay>
      while(!homing_done_m1)
 8001182:	4b3b      	ldr	r3, [pc, #236]	@ (8001270 <HomeMotor+0x158>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0e7      	beq.n	800115a <HomeMotor+0x42>

      }
      break;
 800118a:	e06b      	b.n	8001264 <HomeMotor+0x14c>

    case 2:
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2180      	movs	r1, #128	@ 0x80
 8001190:	4836      	ldr	r0, [pc, #216]	@ (800126c <HomeMotor+0x154>)
 8001192:	f001 fbe1 	bl	8002958 <HAL_GPIO_WritePin>
      microDelay(500);
 8001196:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800119a:	f7ff ff2b 	bl	8000ff4 <microDelay>
      while(!homing_done_m2)
 800119e:	e011      	b.n	80011c4 <HomeMotor+0xac>
      {
    	   	   	   	   	   	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2140      	movs	r1, #64	@ 0x40
 80011a4:	4831      	ldr	r0, [pc, #196]	@ (800126c <HomeMotor+0x154>)
 80011a6:	f001 fbd7 	bl	8002958 <HAL_GPIO_WritePin>
    		        		microDelay(500);
 80011aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011ae:	f7ff ff21 	bl	8000ff4 <microDelay>
    		        	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2140      	movs	r1, #64	@ 0x40
 80011b6:	482d      	ldr	r0, [pc, #180]	@ (800126c <HomeMotor+0x154>)
 80011b8:	f001 fbce 	bl	8002958 <HAL_GPIO_WritePin>
    		        		microDelay(500);
 80011bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011c0:	f7ff ff18 	bl	8000ff4 <microDelay>
      while(!homing_done_m2)
 80011c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <HomeMotor+0x15c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0e9      	beq.n	80011a0 <HomeMotor+0x88>
      }
      break;
 80011cc:	e04a      	b.n	8001264 <HomeMotor+0x14c>

    case 3:
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011d4:	4828      	ldr	r0, [pc, #160]	@ (8001278 <HomeMotor+0x160>)
 80011d6:	f001 fbbf 	bl	8002958 <HAL_GPIO_WritePin>
      microDelay(500);
 80011da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011de:	f7ff ff09 	bl	8000ff4 <microDelay>
      while(!homing_done_m3)
 80011e2:	e013      	b.n	800120c <HomeMotor+0xf4>
      {
    	  	  	  	  	  	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ea:	4823      	ldr	r0, [pc, #140]	@ (8001278 <HomeMotor+0x160>)
 80011ec:	f001 fbb4 	bl	8002958 <HAL_GPIO_WritePin>
    	  	   	             microDelay(500);
 80011f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011f4:	f7ff fefe 	bl	8000ff4 <microDelay>
    	  	   	             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011fe:	481e      	ldr	r0, [pc, #120]	@ (8001278 <HomeMotor+0x160>)
 8001200:	f001 fbaa 	bl	8002958 <HAL_GPIO_WritePin>
    	  	   	             microDelay(500);
 8001204:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001208:	f7ff fef4 	bl	8000ff4 <microDelay>
      while(!homing_done_m3)
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HomeMotor+0x164>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0e7      	beq.n	80011e4 <HomeMotor+0xcc>
      }
      break;
 8001214:	e026      	b.n	8001264 <HomeMotor+0x14c>

    case 4:
    	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800121c:	4813      	ldr	r0, [pc, #76]	@ (800126c <HomeMotor+0x154>)
 800121e:	f001 fb9b 	bl	8002958 <HAL_GPIO_WritePin>
    	microDelay(500);
 8001222:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001226:	f7ff fee5 	bl	8000ff4 <microDelay>
    	      while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_SET)
 800122a:	e013      	b.n	8001254 <HomeMotor+0x13c>
    	      {
    	    	  	  	  	  	  	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001232:	480e      	ldr	r0, [pc, #56]	@ (800126c <HomeMotor+0x154>)
 8001234:	f001 fb90 	bl	8002958 <HAL_GPIO_WritePin>
    	    	  	   	             microDelay(500);
 8001238:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800123c:	f7ff feda 	bl	8000ff4 <microDelay>
    	    	  	   	             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001246:	4809      	ldr	r0, [pc, #36]	@ (800126c <HomeMotor+0x154>)
 8001248:	f001 fb86 	bl	8002958 <HAL_GPIO_WritePin>
    	    	  	   	             microDelay(500);
 800124c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001250:	f7ff fed0 	bl	8000ff4 <microDelay>
    	      while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == GPIO_PIN_SET)
 8001254:	2108      	movs	r1, #8
 8001256:	4805      	ldr	r0, [pc, #20]	@ (800126c <HomeMotor+0x154>)
 8001258:	f001 fb66 	bl	8002928 <HAL_GPIO_ReadPin>
 800125c:	4603      	mov	r3, r0
 800125e:	2b01      	cmp	r3, #1
 8001260:	d0e4      	beq.n	800122c <HomeMotor+0x114>
    	      }
      break;
 8001262:	bf00      	nop

  }
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40020800 	.word	0x40020800
 8001270:	20000210 	.word	0x20000210
 8001274:	20000211 	.word	0x20000211
 8001278:	40020400 	.word	0x40020400
 800127c:	20000212 	.word	0x20000212

08001280 <MoveMotor>:
void MoveMotor(uint8_t motor_num, float degrees)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	ed87 0a00 	vstr	s0, [r7]
 800128c:	71fb      	strb	r3, [r7, #7]

	GPIO_PinState dir_pin_state;


	switch(motor_num)
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b03      	cmp	r3, #3
 8001292:	f000 8135 	beq.w	8001500 <MoveMotor+0x280>
 8001296:	2b03      	cmp	r3, #3
 8001298:	f300 81e6 	bgt.w	8001668 <MoveMotor+0x3e8>
 800129c:	2b01      	cmp	r3, #1
 800129e:	d003      	beq.n	80012a8 <MoveMotor+0x28>
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	f000 8096 	beq.w	80013d2 <MoveMotor+0x152>
            }


	    	break;
	  }
}
 80012a6:	e1df      	b.n	8001668 <MoveMotor+0x3e8>
	               current_count1 = TIM1->CNT;
 80012a8:	4bac      	ldr	r3, [pc, #688]	@ (800155c <MoveMotor+0x2dc>)
 80012aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ac:	461a      	mov	r2, r3
 80012ae:	4bac      	ldr	r3, [pc, #688]	@ (8001560 <MoveMotor+0x2e0>)
 80012b0:	601a      	str	r2, [r3, #0]
	               if (degrees >= 0)
 80012b2:	edd7 7a00 	vldr	s15, [r7]
 80012b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012be:	db43      	blt.n	8001348 <MoveMotor+0xc8>
	            	   target_count1 = (degrees / 360) * ENCODER_COUNTS_PER_REV;
 80012c0:	ed97 7a00 	vldr	s14, [r7]
 80012c4:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8001564 <MoveMotor+0x2e4>
 80012c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012cc:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8001568 <MoveMotor+0x2e8>
 80012d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d8:	ee17 2a90 	vmov	r2, s15
 80012dc:	4ba3      	ldr	r3, [pc, #652]	@ (800156c <MoveMotor+0x2ec>)
 80012de:	601a      	str	r2, [r3, #0]
	                   dir_pin_state = GPIO_PIN_SET; // Set direction to positive
 80012e0:	2301      	movs	r3, #1
 80012e2:	72fb      	strb	r3, [r7, #11]
	                   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, dir_pin_state); // Set direction
 80012e4:	7afb      	ldrb	r3, [r7, #11]
 80012e6:	461a      	mov	r2, r3
 80012e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012ec:	48a0      	ldr	r0, [pc, #640]	@ (8001570 <MoveMotor+0x2f0>)
 80012ee:	f001 fb33 	bl	8002958 <HAL_GPIO_WritePin>
	                   TIM1->CNT=0;
 80012f2:	4b9a      	ldr	r3, [pc, #616]	@ (800155c <MoveMotor+0x2dc>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	@ 0x24
	                   microDelay(500);
 80012f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012fc:	f7ff fe7a 	bl	8000ff4 <microDelay>
	                   while (current_count1 < target_count1)
 8001300:	e018      	b.n	8001334 <MoveMotor+0xb4>
	                  	                       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001308:	4899      	ldr	r0, [pc, #612]	@ (8001570 <MoveMotor+0x2f0>)
 800130a:	f001 fb25 	bl	8002958 <HAL_GPIO_WritePin>
	                  	                       microDelay(500);
 800130e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001312:	f7ff fe6f 	bl	8000ff4 <microDelay>
	                  	                       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800131c:	4894      	ldr	r0, [pc, #592]	@ (8001570 <MoveMotor+0x2f0>)
 800131e:	f001 fb1b 	bl	8002958 <HAL_GPIO_WritePin>
	                  	                       microDelay(500);
 8001322:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001326:	f7ff fe65 	bl	8000ff4 <microDelay>
	                  	                       current_count1 = TIM1->CNT;
 800132a:	4b8c      	ldr	r3, [pc, #560]	@ (800155c <MoveMotor+0x2dc>)
 800132c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132e:	461a      	mov	r2, r3
 8001330:	4b8b      	ldr	r3, [pc, #556]	@ (8001560 <MoveMotor+0x2e0>)
 8001332:	601a      	str	r2, [r3, #0]
	                   while (current_count1 < target_count1)
 8001334:	4b8a      	ldr	r3, [pc, #552]	@ (8001560 <MoveMotor+0x2e0>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b8c      	ldr	r3, [pc, #560]	@ (800156c <MoveMotor+0x2ec>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	dbe0      	blt.n	8001302 <MoveMotor+0x82>
	                   current_count1=0;
 8001340:	4b87      	ldr	r3, [pc, #540]	@ (8001560 <MoveMotor+0x2e0>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
	      break;
 8001346:	e18f      	b.n	8001668 <MoveMotor+0x3e8>
	                   dir_pin_state = GPIO_PIN_RESET; // Set direction to negative
 8001348:	2300      	movs	r3, #0
 800134a:	72fb      	strb	r3, [r7, #11]
	                   target_count= (steps_per_revolution/360)*degrees;
 800134c:	4b89      	ldr	r3, [pc, #548]	@ (8001574 <MoveMotor+0x2f4>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8001564 <MoveMotor+0x2e4>
 8001356:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800135a:	edd7 7a00 	vldr	s15, [r7]
 800135e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001366:	ee17 2a90 	vmov	r2, s15
 800136a:	4b83      	ldr	r3, [pc, #524]	@ (8001578 <MoveMotor+0x2f8>)
 800136c:	601a      	str	r2, [r3, #0]
	                   target_count1= target_count*-1;
 800136e:	4b82      	ldr	r3, [pc, #520]	@ (8001578 <MoveMotor+0x2f8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	425b      	negs	r3, r3
 8001374:	4a7d      	ldr	r2, [pc, #500]	@ (800156c <MoveMotor+0x2ec>)
 8001376:	6013      	str	r3, [r2, #0]
	                   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, dir_pin_state); // Set direction
 8001378:	7afb      	ldrb	r3, [r7, #11]
 800137a:	461a      	mov	r2, r3
 800137c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001380:	487b      	ldr	r0, [pc, #492]	@ (8001570 <MoveMotor+0x2f0>)
 8001382:	f001 fae9 	bl	8002958 <HAL_GPIO_WritePin>
	                    microDelay(500);
 8001386:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800138a:	f7ff fe33 	bl	8000ff4 <microDelay>
	                    for(current_count=0;current_count< target_count1;current_count++)
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e016      	b.n	80013c2 <MoveMotor+0x142>
	                    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800139a:	4875      	ldr	r0, [pc, #468]	@ (8001570 <MoveMotor+0x2f0>)
 800139c:	f001 fadc 	bl	8002958 <HAL_GPIO_WritePin>
	                        microDelay(500);
 80013a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013a4:	f7ff fe26 	bl	8000ff4 <microDelay>
	                    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013ae:	4870      	ldr	r0, [pc, #448]	@ (8001570 <MoveMotor+0x2f0>)
 80013b0:	f001 fad2 	bl	8002958 <HAL_GPIO_WritePin>
	                    	 microDelay(500);
 80013b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013b8:	f7ff fe1c 	bl	8000ff4 <microDelay>
	                    for(current_count=0;current_count< target_count1;current_count++)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	4b6a      	ldr	r3, [pc, #424]	@ (800156c <MoveMotor+0x2ec>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dbe3      	blt.n	8001394 <MoveMotor+0x114>
	                    current_count=0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
	      break;
 80013d0:	e14a      	b.n	8001668 <MoveMotor+0x3e8>
	    	current_count2= TIM3->CNT;
 80013d2:	4b6a      	ldr	r3, [pc, #424]	@ (800157c <MoveMotor+0x2fc>)
 80013d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b69      	ldr	r3, [pc, #420]	@ (8001580 <MoveMotor+0x300>)
 80013da:	601a      	str	r2, [r3, #0]
	    	if(degrees >= 0)
 80013dc:	edd7 7a00 	vldr	s15, [r7]
 80013e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e8:	db48      	blt.n	800147c <MoveMotor+0x1fc>
	    		target_count2 = 0;
 80013ea:	4b66      	ldr	r3, [pc, #408]	@ (8001584 <MoveMotor+0x304>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
	    		current_count2 = 0;
 80013f0:	4b63      	ldr	r3, [pc, #396]	@ (8001580 <MoveMotor+0x300>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
	    		target_count2=(degrees / 360) * ENCODER_COUNTS_PER_REV;
 80013f6:	ed97 7a00 	vldr	s14, [r7]
 80013fa:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8001564 <MoveMotor+0x2e4>
 80013fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001402:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001568 <MoveMotor+0x2e8>
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140e:	ee17 2a90 	vmov	r2, s15
 8001412:	4b5c      	ldr	r3, [pc, #368]	@ (8001584 <MoveMotor+0x304>)
 8001414:	601a      	str	r2, [r3, #0]
	    		   dir_pin_state = GPIO_PIN_SET;
 8001416:	2301      	movs	r3, #1
 8001418:	72fb      	strb	r3, [r7, #11]
	    		   TIM3->CNT = 0;
 800141a:	4b58      	ldr	r3, [pc, #352]	@ (800157c <MoveMotor+0x2fc>)
 800141c:	2200      	movs	r2, #0
 800141e:	625a      	str	r2, [r3, #36]	@ 0x24
	    		   	    	current_count2 = TIM3->CNT;
 8001420:	4b56      	ldr	r3, [pc, #344]	@ (800157c <MoveMotor+0x2fc>)
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	461a      	mov	r2, r3
 8001426:	4b56      	ldr	r3, [pc, #344]	@ (8001580 <MoveMotor+0x300>)
 8001428:	601a      	str	r2, [r3, #0]
	    		   	    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, dir_pin_state);
 800142a:	7afb      	ldrb	r3, [r7, #11]
 800142c:	461a      	mov	r2, r3
 800142e:	2180      	movs	r1, #128	@ 0x80
 8001430:	484f      	ldr	r0, [pc, #316]	@ (8001570 <MoveMotor+0x2f0>)
 8001432:	f001 fa91 	bl	8002958 <HAL_GPIO_WritePin>
	    		   	    	microDelay(500);
 8001436:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800143a:	f7ff fddb 	bl	8000ff4 <microDelay>
	    		   	     while (current_count2 < target_count2)
 800143e:	e016      	b.n	800146e <MoveMotor+0x1ee>
	    		   	    		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	2140      	movs	r1, #64	@ 0x40
 8001444:	484a      	ldr	r0, [pc, #296]	@ (8001570 <MoveMotor+0x2f0>)
 8001446:	f001 fa87 	bl	8002958 <HAL_GPIO_WritePin>
	    		   	    		   microDelay(500);
 800144a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800144e:	f7ff fdd1 	bl	8000ff4 <microDelay>
	    		   	    		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	2140      	movs	r1, #64	@ 0x40
 8001456:	4846      	ldr	r0, [pc, #280]	@ (8001570 <MoveMotor+0x2f0>)
 8001458:	f001 fa7e 	bl	8002958 <HAL_GPIO_WritePin>
	    		   	    		   microDelay(500);
 800145c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001460:	f7ff fdc8 	bl	8000ff4 <microDelay>
	    		   	    		   current_count2= TIM3->CNT;
 8001464:	4b45      	ldr	r3, [pc, #276]	@ (800157c <MoveMotor+0x2fc>)
 8001466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001468:	461a      	mov	r2, r3
 800146a:	4b45      	ldr	r3, [pc, #276]	@ (8001580 <MoveMotor+0x300>)
 800146c:	601a      	str	r2, [r3, #0]
	    		   	     while (current_count2 < target_count2)
 800146e:	4b44      	ldr	r3, [pc, #272]	@ (8001580 <MoveMotor+0x300>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b44      	ldr	r3, [pc, #272]	@ (8001584 <MoveMotor+0x304>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	dbe2      	blt.n	8001440 <MoveMotor+0x1c0>
	    	break;
 800147a:	e0f5      	b.n	8001668 <MoveMotor+0x3e8>
	    			                   dir_pin_state = GPIO_PIN_RESET; // Set direction to negative
 800147c:	2300      	movs	r3, #0
 800147e:	72fb      	strb	r3, [r7, #11]
	    			                   target_count= (steps_per_revolution/360)*degrees;
 8001480:	4b3c      	ldr	r3, [pc, #240]	@ (8001574 <MoveMotor+0x2f4>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001564 <MoveMotor+0x2e4>
 800148a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800148e:	edd7 7a00 	vldr	s15, [r7]
 8001492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800149a:	ee17 2a90 	vmov	r2, s15
 800149e:	4b36      	ldr	r3, [pc, #216]	@ (8001578 <MoveMotor+0x2f8>)
 80014a0:	601a      	str	r2, [r3, #0]
	    			                   target_count2= target_count*-1;
 80014a2:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <MoveMotor+0x2f8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	425b      	negs	r3, r3
 80014a8:	4a36      	ldr	r2, [pc, #216]	@ (8001584 <MoveMotor+0x304>)
 80014aa:	6013      	str	r3, [r2, #0]
	    			                   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, dir_pin_state); // Set direction
 80014ac:	7afb      	ldrb	r3, [r7, #11]
 80014ae:	461a      	mov	r2, r3
 80014b0:	2180      	movs	r1, #128	@ 0x80
 80014b2:	482f      	ldr	r0, [pc, #188]	@ (8001570 <MoveMotor+0x2f0>)
 80014b4:	f001 fa50 	bl	8002958 <HAL_GPIO_WritePin>
	    			                    microDelay(500);
 80014b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014bc:	f7ff fd9a 	bl	8000ff4 <microDelay>
	    			                    for(current_count=0;current_count< target_count2;current_count++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	e014      	b.n	80014f0 <MoveMotor+0x270>
	    			                    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	2140      	movs	r1, #64	@ 0x40
 80014ca:	4829      	ldr	r0, [pc, #164]	@ (8001570 <MoveMotor+0x2f0>)
 80014cc:	f001 fa44 	bl	8002958 <HAL_GPIO_WritePin>
	    			                        microDelay(500);
 80014d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014d4:	f7ff fd8e 	bl	8000ff4 <microDelay>
	    			                    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2140      	movs	r1, #64	@ 0x40
 80014dc:	4824      	ldr	r0, [pc, #144]	@ (8001570 <MoveMotor+0x2f0>)
 80014de:	f001 fa3b 	bl	8002958 <HAL_GPIO_WritePin>
	    			                    	 microDelay(500);
 80014e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014e6:	f7ff fd85 	bl	8000ff4 <microDelay>
	    			                    for(current_count=0;current_count< target_count2;current_count++)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	3301      	adds	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <MoveMotor+0x304>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dbe5      	blt.n	80014c6 <MoveMotor+0x246>
	    			                    current_count=0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
	    	break;
 80014fe:	e0b3      	b.n	8001668 <MoveMotor+0x3e8>
            current_count3 = TIM5->CNT;
 8001500:	4b21      	ldr	r3, [pc, #132]	@ (8001588 <MoveMotor+0x308>)
 8001502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001504:	461a      	mov	r2, r3
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <MoveMotor+0x30c>)
 8001508:	601a      	str	r2, [r3, #0]
            if (degrees >= 0)
 800150a:	edd7 7a00 	vldr	s15, [r7]
 800150e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	db62      	blt.n	80015de <MoveMotor+0x35e>
         	   target_count3 = (degrees / 360) * ENCODER_COUNTS_PER_REV;
 8001518:	ed97 7a00 	vldr	s14, [r7]
 800151c:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001564 <MoveMotor+0x2e4>
 8001520:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001524:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001568 <MoveMotor+0x2e8>
 8001528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001530:	ee17 2a90 	vmov	r2, s15
 8001534:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <MoveMotor+0x310>)
 8001536:	601a      	str	r2, [r3, #0]
                dir_pin_state = GPIO_PIN_SET; // Set direction to positive
 8001538:	2301      	movs	r3, #1
 800153a:	72fb      	strb	r3, [r7, #11]
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, dir_pin_state); // Set direction
 800153c:	7afb      	ldrb	r3, [r7, #11]
 800153e:	461a      	mov	r2, r3
 8001540:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001544:	4813      	ldr	r0, [pc, #76]	@ (8001594 <MoveMotor+0x314>)
 8001546:	f001 fa07 	bl	8002958 <HAL_GPIO_WritePin>
                TIM5->CNT=0;
 800154a:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <MoveMotor+0x308>)
 800154c:	2200      	movs	r2, #0
 800154e:	625a      	str	r2, [r3, #36]	@ 0x24
                microDelay(500);
 8001550:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001554:	f7ff fd4e 	bl	8000ff4 <microDelay>
                while (current_count3 < target_count3)
 8001558:	e037      	b.n	80015ca <MoveMotor+0x34a>
 800155a:	bf00      	nop
 800155c:	40010000 	.word	0x40010000
 8001560:	200001f4 	.word	0x200001f4
 8001564:	43b40000 	.word	0x43b40000
 8001568:	457a0000 	.word	0x457a0000
 800156c:	20000204 	.word	0x20000204
 8001570:	40020800 	.word	0x40020800
 8001574:	20000000 	.word	0x20000000
 8001578:	20000200 	.word	0x20000200
 800157c:	40000400 	.word	0x40000400
 8001580:	200001f8 	.word	0x200001f8
 8001584:	20000208 	.word	0x20000208
 8001588:	40000c00 	.word	0x40000c00
 800158c:	200001fc 	.word	0x200001fc
 8001590:	2000020c 	.word	0x2000020c
 8001594:	40020400 	.word	0x40020400
               	                       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800159e:	4834      	ldr	r0, [pc, #208]	@ (8001670 <MoveMotor+0x3f0>)
 80015a0:	f001 f9da 	bl	8002958 <HAL_GPIO_WritePin>
               	                       microDelay(500);
 80015a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015a8:	f7ff fd24 	bl	8000ff4 <microDelay>
               	                       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015b2:	482f      	ldr	r0, [pc, #188]	@ (8001670 <MoveMotor+0x3f0>)
 80015b4:	f001 f9d0 	bl	8002958 <HAL_GPIO_WritePin>
               	                       microDelay(500);
 80015b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015bc:	f7ff fd1a 	bl	8000ff4 <microDelay>
               	                       current_count3 = TIM5->CNT;
 80015c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001674 <MoveMotor+0x3f4>)
 80015c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001678 <MoveMotor+0x3f8>)
 80015c8:	601a      	str	r2, [r3, #0]
                while (current_count3 < target_count3)
 80015ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001678 <MoveMotor+0x3f8>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <MoveMotor+0x3fc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	dbe0      	blt.n	8001598 <MoveMotor+0x318>
                current_count3=0;
 80015d6:	4b28      	ldr	r3, [pc, #160]	@ (8001678 <MoveMotor+0x3f8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
	    	break;
 80015dc:	e043      	b.n	8001666 <MoveMotor+0x3e6>
                dir_pin_state = GPIO_PIN_RESET; // Set direction to negative
 80015de:	2300      	movs	r3, #0
 80015e0:	72fb      	strb	r3, [r7, #11]
                target_count= (steps_per_revolution/360)*degrees;
 80015e2:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <MoveMotor+0x400>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001684 <MoveMotor+0x404>
 80015ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015f0:	edd7 7a00 	vldr	s15, [r7]
 80015f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fc:	ee17 2a90 	vmov	r2, s15
 8001600:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <MoveMotor+0x408>)
 8001602:	601a      	str	r2, [r3, #0]
                target_count3= target_count*-1;
 8001604:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <MoveMotor+0x408>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	425b      	negs	r3, r3
 800160a:	4a1c      	ldr	r2, [pc, #112]	@ (800167c <MoveMotor+0x3fc>)
 800160c:	6013      	str	r3, [r2, #0]
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, dir_pin_state); // Set direction
 800160e:	7afb      	ldrb	r3, [r7, #11]
 8001610:	461a      	mov	r2, r3
 8001612:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001616:	4816      	ldr	r0, [pc, #88]	@ (8001670 <MoveMotor+0x3f0>)
 8001618:	f001 f99e 	bl	8002958 <HAL_GPIO_WritePin>
                 microDelay(500);
 800161c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001620:	f7ff fce8 	bl	8000ff4 <microDelay>
                 for(current_count=0;current_count< target_count3;current_count++)
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	e016      	b.n	8001658 <MoveMotor+0x3d8>
	                       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800162a:	2201      	movs	r2, #1
 800162c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001630:	480f      	ldr	r0, [pc, #60]	@ (8001670 <MoveMotor+0x3f0>)
 8001632:	f001 f991 	bl	8002958 <HAL_GPIO_WritePin>
	                       microDelay(500);
 8001636:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800163a:	f7ff fcdb 	bl	8000ff4 <microDelay>
	                       HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001644:	480a      	ldr	r0, [pc, #40]	@ (8001670 <MoveMotor+0x3f0>)
 8001646:	f001 f987 	bl	8002958 <HAL_GPIO_WritePin>
	                       microDelay(500);
 800164a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800164e:	f7ff fcd1 	bl	8000ff4 <microDelay>
                 for(current_count=0;current_count< target_count3;current_count++)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3301      	adds	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <MoveMotor+0x3fc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	429a      	cmp	r2, r3
 8001660:	dbe3      	blt.n	800162a <MoveMotor+0x3aa>
                 current_count=0;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
	    	break;
 8001666:	bf00      	nop
}
 8001668:	bf00      	nop
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40020400 	.word	0x40020400
 8001674:	40000c00 	.word	0x40000c00
 8001678:	200001fc 	.word	0x200001fc
 800167c:	2000020c 	.word	0x2000020c
 8001680:	20000000 	.word	0x20000000
 8001684:	43b40000 	.word	0x43b40000
 8001688:	20000200 	.word	0x20000200

0800168c <reset_encoder_position>:
  stop_motor(4);
}

// Reset encoder position for a specific motor
void reset_encoder_position(int motor_id)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  switch (motor_id)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d011      	beq.n	80016be <reset_encoder_position+0x32>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b03      	cmp	r3, #3
 800169e:	dc12      	bgt.n	80016c6 <reset_encoder_position+0x3a>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d003      	beq.n	80016ae <reset_encoder_position+0x22>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d004      	beq.n	80016b6 <reset_encoder_position+0x2a>
      break;
    case 3:
      TIM5->CNT = 0;
      break;
  }
}
 80016ac:	e00b      	b.n	80016c6 <reset_encoder_position+0x3a>
      TIM1->CNT = 0;
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <reset_encoder_position+0x48>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
 80016b4:	e007      	b.n	80016c6 <reset_encoder_position+0x3a>
      TIM3->CNT = 0;
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <reset_encoder_position+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
 80016bc:	e003      	b.n	80016c6 <reset_encoder_position+0x3a>
      TIM5->CNT = 0;
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <reset_encoder_position+0x50>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
 80016c4:	bf00      	nop
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40010000 	.word	0x40010000
 80016d8:	40000400 	.word	0x40000400
 80016dc:	40000c00 	.word	0x40000c00

080016e0 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt callback for homing
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]


  if (GPIO_Pin == GPIO_PIN_8)          // Motor 1 Z pulse
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016f0:	d109      	bne.n	8001706 <HAL_GPIO_EXTI_Callback+0x26>
  {

    homing_done_m1 = 1;               // Mark motor 1 homed
 80016f2:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <HAL_GPIO_EXTI_Callback+0x64>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
    reset_encoder_position(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f7ff ffc7 	bl	800168c <reset_encoder_position>
    stop_motor(1);
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff fc92 	bl	8001028 <stop_motor>
    reset_encoder_position(3);
    stop_motor(3);
  }


}
 8001704:	e019      	b.n	800173a <HAL_GPIO_EXTI_Callback+0x5a>
  else if (GPIO_Pin == GPIO_PIN_9)    // Motor 2 Z pulse
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800170c:	d109      	bne.n	8001722 <HAL_GPIO_EXTI_Callback+0x42>
    homing_done_m2 = 1;               // Mark motor 2 homed
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <HAL_GPIO_EXTI_Callback+0x68>)
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
    reset_encoder_position(2);
 8001714:	2002      	movs	r0, #2
 8001716:	f7ff ffb9 	bl	800168c <reset_encoder_position>
    stop_motor(2);
 800171a:	2002      	movs	r0, #2
 800171c:	f7ff fc84 	bl	8001028 <stop_motor>
}
 8001720:	e00b      	b.n	800173a <HAL_GPIO_EXTI_Callback+0x5a>
  else if (GPIO_Pin == GPIO_PIN_5)     // Motor 3 Z pulse
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	2b20      	cmp	r3, #32
 8001726:	d108      	bne.n	800173a <HAL_GPIO_EXTI_Callback+0x5a>
    homing_done_m3 = 1;               // Mark motor 3 homed
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <HAL_GPIO_EXTI_Callback+0x6c>)
 800172a:	2201      	movs	r2, #1
 800172c:	701a      	strb	r2, [r3, #0]
    reset_encoder_position(3);
 800172e:	2003      	movs	r0, #3
 8001730:	f7ff ffac 	bl	800168c <reset_encoder_position>
    stop_motor(3);
 8001734:	2003      	movs	r0, #3
 8001736:	f7ff fc77 	bl	8001028 <stop_motor>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000210 	.word	0x20000210
 8001748:	20000211 	.word	0x20000211
 800174c:	20000212 	.word	0x20000212

08001750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  int count=0;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  float wheelDiameter1 = 21.0;             // Wheel diameter in mm
 800175a:	4b4a      	ldr	r3, [pc, #296]	@ (8001884 <main+0x134>)
 800175c:	613b      	str	r3, [r7, #16]
  int stepsPerRevolution1 = 800;          // Steps per full revolution
 800175e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001762:	60fb      	str	r3, [r7, #12]
  float lengthToMove1 = 50.0;              // Length to move in mm
 8001764:	4b48      	ldr	r3, [pc, #288]	@ (8001888 <main+0x138>)
 8001766:	60bb      	str	r3, [r7, #8]
  int steps1 = calculateSteps(wheelDiameter1, stepsPerRevolution1, lengthToMove1);// Calculate the steps required
 8001768:	edd7 0a02 	vldr	s1, [r7, #8]
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001772:	f7ff fc91 	bl	8001098 <calculateSteps>
 8001776:	6078      	str	r0, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001778:	f000 fdaa 	bl	80022d0 <HAL_Init>
  //TIM1->ARR=3999; //set auto reload value
  //TIM1->CR1|=TIM_CR1_APRE;//Enable auto reload
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177c:	f000 f89c 	bl	80018b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001780:	f000 fa88 	bl	8001c94 <MX_GPIO_Init>
  MX_RTC_Init();
 8001784:	f000 f904 	bl	8001990 <MX_RTC_Init>
  MX_TIM2_Init();
 8001788:	f000 f990 	bl	8001aac <MX_TIM2_Init>
  MX_TIM1_Init();
 800178c:	f000 f926 	bl	80019dc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001790:	f000 f9d8 	bl	8001b44 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001794:	f000 fa2a 	bl	8001bec <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001798:	213c      	movs	r1, #60	@ 0x3c
 800179a:	483c      	ldr	r0, [pc, #240]	@ (800188c <main+0x13c>)
 800179c:	f002 f8b6 	bl	800390c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80017a0:	213c      	movs	r1, #60	@ 0x3c
 80017a2:	483b      	ldr	r0, [pc, #236]	@ (8001890 <main+0x140>)
 80017a4:	f002 f8b2 	bl	800390c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80017a8:	213c      	movs	r1, #60	@ 0x3c
 80017aa:	483a      	ldr	r0, [pc, #232]	@ (8001894 <main+0x144>)
 80017ac:	f002 f8ae 	bl	800390c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim2);
 80017b0:	4839      	ldr	r0, [pc, #228]	@ (8001898 <main+0x148>)
 80017b2:	f001 ffab 	bl	800370c <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(count==0)
 80017b6:	e05d      	b.n	8001874 <main+0x124>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HomeMotor(1);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff fcad 	bl	8001118 <HomeMotor>
	  HomeMotor(2);
 80017be:	2002      	movs	r0, #2
 80017c0:	f7ff fcaa 	bl	8001118 <HomeMotor>
	  HAL_Delay(1000);
 80017c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017c8:	f000 fdf4 	bl	80023b4 <HAL_Delay>
	  MoveMotor(2,90);
 80017cc:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 800189c <main+0x14c>
 80017d0:	2002      	movs	r0, #2
 80017d2:	f7ff fd55 	bl	8001280 <MoveMotor>
	  HAL_Delay(1000);
 80017d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017da:	f000 fdeb 	bl	80023b4 <HAL_Delay>
	  MoveMotor(2,-95);
 80017de:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80018a0 <main+0x150>
 80017e2:	2002      	movs	r0, #2
 80017e4:	f7ff fd4c 	bl	8001280 <MoveMotor>

	 	  HAL_Delay(1000);
 80017e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ec:	f000 fde2 	bl	80023b4 <HAL_Delay>
	 	 MoveMotor(2,45);
 80017f0:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80018a4 <main+0x154>
 80017f4:	2002      	movs	r0, #2
 80017f6:	f7ff fd43 	bl	8001280 <MoveMotor>
	 	HAL_Delay(1000);
 80017fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017fe:	f000 fdd9 	bl	80023b4 <HAL_Delay>
	 	//MoveMotor(2,-60);
	 	 // HAL_Delay(1000);
	 	 MoveMotor(2,-50);
 8001802:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 80018a8 <main+0x158>
 8001806:	2002      	movs	r0, #2
 8001808:	f7ff fd3a 	bl	8001280 <MoveMotor>
	 	  //MoveMotor(2,20);
	 	  HAL_Delay(1000);
 800180c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001810:	f000 fdd0 	bl	80023b4 <HAL_Delay>
	 	 	  MoveMotor(2,180);
 8001814:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 80018ac <main+0x15c>
 8001818:	2002      	movs	r0, #2
 800181a:	f7ff fd31 	bl	8001280 <MoveMotor>
	 	 	  HAL_Delay(1000);
 800181e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001822:	f000 fdc7 	bl	80023b4 <HAL_Delay>
	 	 	  MoveMotor(2,-185);
 8001826:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80018b0 <main+0x160>
 800182a:	2002      	movs	r0, #2
 800182c:	f7ff fd28 	bl	8001280 <MoveMotor>



	  HAL_Delay(1000);
 8001830:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001834:	f000 fdbe 	bl	80023b4 <HAL_Delay>
	  MoveMotor(1,90);
 8001838:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800189c <main+0x14c>
 800183c:	2001      	movs	r0, #1
 800183e:	f7ff fd1f 	bl	8001280 <MoveMotor>
	  HAL_Delay(1000);
 8001842:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001846:	f000 fdb5 	bl	80023b4 <HAL_Delay>
	 	  	  MoveMotor(1,-150);
 800184a:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 80018b4 <main+0x164>
 800184e:	2001      	movs	r0, #1
 8001850:	f7ff fd16 	bl	8001280 <MoveMotor>
	 	  	 HAL_Delay(1000);
 8001854:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001858:	f000 fdac 	bl	80023b4 <HAL_Delay>
	 	  		  	  MoveMotor(1,90);
 800185c:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800189c <main+0x14c>
 8001860:	2001      	movs	r0, #1
 8001862:	f7ff fd0d 	bl	8001280 <MoveMotor>
	  HAL_Delay(1000);
 8001866:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800186a:	f000 fda3 	bl	80023b4 <HAL_Delay>

           count++;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3301      	adds	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
  while(count==0)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d09e      	beq.n	80017b8 <main+0x68>
 800187a:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	41a80000 	.word	0x41a80000
 8001888:	42480000 	.word	0x42480000
 800188c:	20000234 	.word	0x20000234
 8001890:	200002c4 	.word	0x200002c4
 8001894:	2000030c 	.word	0x2000030c
 8001898:	2000027c 	.word	0x2000027c
 800189c:	42b40000 	.word	0x42b40000
 80018a0:	c2be0000 	.word	0xc2be0000
 80018a4:	42340000 	.word	0x42340000
 80018a8:	c2480000 	.word	0xc2480000
 80018ac:	43340000 	.word	0x43340000
 80018b0:	c3390000 	.word	0xc3390000
 80018b4:	c3160000 	.word	0xc3160000

080018b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b094      	sub	sp, #80	@ 0x50
 80018bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018be:	f107 0320 	add.w	r3, r7, #32
 80018c2:	2230      	movs	r2, #48	@ 0x30
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 fac1 	bl	8004e4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	4b29      	ldr	r3, [pc, #164]	@ (8001988 <SystemClock_Config+0xd0>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	4a28      	ldr	r2, [pc, #160]	@ (8001988 <SystemClock_Config+0xd0>)
 80018e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ec:	4b26      	ldr	r3, [pc, #152]	@ (8001988 <SystemClock_Config+0xd0>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018f8:	2300      	movs	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	4b23      	ldr	r3, [pc, #140]	@ (800198c <SystemClock_Config+0xd4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001904:	4a21      	ldr	r2, [pc, #132]	@ (800198c <SystemClock_Config+0xd4>)
 8001906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <SystemClock_Config+0xd4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001918:	2309      	movs	r3, #9
 800191a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800191c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001922:	2301      	movs	r3, #1
 8001924:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001926:	2302      	movs	r3, #2
 8001928:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800192a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800192e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001930:	2304      	movs	r3, #4
 8001932:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001934:	2354      	movs	r3, #84	@ 0x54
 8001936:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001938:	2302      	movs	r3, #2
 800193a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800193c:	2307      	movs	r3, #7
 800193e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001940:	f107 0320 	add.w	r3, r7, #32
 8001944:	4618      	mov	r0, r3
 8001946:	f001 f839 	bl	80029bc <HAL_RCC_OscConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001950:	f000 fa54 	bl	8001dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001954:	230f      	movs	r3, #15
 8001956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001958:	2302      	movs	r3, #2
 800195a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	2102      	movs	r1, #2
 8001970:	4618      	mov	r0, r3
 8001972:	f001 fa9b 	bl	8002eac <HAL_RCC_ClockConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800197c:	f000 fa3e 	bl	8001dfc <Error_Handler>
  }
}
 8001980:	bf00      	nop
 8001982:	3750      	adds	r7, #80	@ 0x50
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000

08001990 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <MX_RTC_Init+0x44>)
 8001996:	4a10      	ldr	r2, [pc, #64]	@ (80019d8 <MX_RTC_Init+0x48>)
 8001998:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <MX_RTC_Init+0x44>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <MX_RTC_Init+0x44>)
 80019a2:	227f      	movs	r2, #127	@ 0x7f
 80019a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <MX_RTC_Init+0x44>)
 80019a8:	22ff      	movs	r2, #255	@ 0xff
 80019aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019ac:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <MX_RTC_Init+0x44>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <MX_RTC_Init+0x44>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <MX_RTC_Init+0x44>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <MX_RTC_Init+0x44>)
 80019c0:	f001 fd4e 	bl	8003460 <HAL_RTC_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80019ca:	f000 fa17 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000214 	.word	0x20000214
 80019d8:	40002800 	.word	0x40002800

080019dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08c      	sub	sp, #48	@ 0x30
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
	  __HAL_RCC_TIM1_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa0 <MX_TIM1_Init+0xc4>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	4a2d      	ldr	r2, [pc, #180]	@ (8001aa0 <MX_TIM1_Init+0xc4>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019f2:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa0 <MX_TIM1_Init+0xc4>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	2224      	movs	r2, #36	@ 0x24
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 fa21 	bl	8004e4e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a14:	4b23      	ldr	r3, [pc, #140]	@ (8001aa4 <MX_TIM1_Init+0xc8>)
 8001a16:	4a24      	ldr	r2, [pc, #144]	@ (8001aa8 <MX_TIM1_Init+0xcc>)
 8001a18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a1a:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <MX_TIM1_Init+0xc8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001a20:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <MX_TIM1_Init+0xc8>)
 8001a22:	2260      	movs	r2, #96	@ 0x60
 8001a24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8001a26:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <MX_TIM1_Init+0xc8>)
 8001a28:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001a2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <MX_TIM1_Init+0xc8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <MX_TIM1_Init+0xc8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <MX_TIM1_Init+0xc8>)
 8001a3c:	2280      	movs	r2, #128	@ 0x80
 8001a3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a40:	2303      	movs	r3, #3
 8001a42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480e      	ldr	r0, [pc, #56]	@ (8001aa4 <MX_TIM1_Init+0xc8>)
 8001a6c:	f001 fea8 	bl	80037c0 <HAL_TIM_Encoder_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001a76:	f000 f9c1 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	4619      	mov	r1, r3
 8001a86:	4807      	ldr	r0, [pc, #28]	@ (8001aa4 <MX_TIM1_Init+0xc8>)
 8001a88:	f002 f9e2 	bl	8003e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001a92:	f000 f9b3 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	3730      	adds	r7, #48	@ 0x30
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	20000234 	.word	0x20000234
 8001aa8:	40010000 	.word	0x40010000

08001aac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <MX_TIM2_Init+0x94>)
 8001aca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ace:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <MX_TIM2_Init+0x94>)
 8001ad2:	2253      	movs	r2, #83	@ 0x53
 8001ad4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <MX_TIM2_Init+0x94>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001adc:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <MX_TIM2_Init+0x94>)
 8001ade:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <MX_TIM2_Init+0x94>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <MX_TIM2_Init+0x94>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af0:	4813      	ldr	r0, [pc, #76]	@ (8001b40 <MX_TIM2_Init+0x94>)
 8001af2:	f001 fdbb 	bl	800366c <HAL_TIM_Base_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001afc:	f000 f97e 	bl	8001dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480c      	ldr	r0, [pc, #48]	@ (8001b40 <MX_TIM2_Init+0x94>)
 8001b0e:	f001 ff8b 	bl	8003a28 <HAL_TIM_ConfigClockSource>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b18:	f000 f970 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b24:	463b      	mov	r3, r7
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	@ (8001b40 <MX_TIM2_Init+0x94>)
 8001b2a:	f002 f991 	bl	8003e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b34:	f000 f962 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b38:	bf00      	nop
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000027c 	.word	0x2000027c

08001b44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	@ 0x30
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	2224      	movs	r2, #36	@ 0x24
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 f97b 	bl	8004e4e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b60:	4b20      	ldr	r3, [pc, #128]	@ (8001be4 <MX_TIM3_Init+0xa0>)
 8001b62:	4a21      	ldr	r2, [pc, #132]	@ (8001be8 <MX_TIM3_Init+0xa4>)
 8001b64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b66:	4b1f      	ldr	r3, [pc, #124]	@ (8001be4 <MX_TIM3_Init+0xa0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <MX_TIM3_Init+0xa0>)
 8001b6e:	2260      	movs	r2, #96	@ 0x60
 8001b70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3999;
 8001b72:	4b1c      	ldr	r3, [pc, #112]	@ (8001be4 <MX_TIM3_Init+0xa0>)
 8001b74:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001b78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <MX_TIM3_Init+0xa0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b80:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <MX_TIM3_Init+0xa0>)
 8001b82:	2280      	movs	r2, #128	@ 0x80
 8001b84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b86:	2303      	movs	r3, #3
 8001b88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480c      	ldr	r0, [pc, #48]	@ (8001be4 <MX_TIM3_Init+0xa0>)
 8001bb2:	f001 fe05 	bl	80037c0 <HAL_TIM_Encoder_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001bbc:	f000 f91e 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_TIM3_Init+0xa0>)
 8001bce:	f002 f93f 	bl	8003e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001bd8:	f000 f910 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	3730      	adds	r7, #48	@ 0x30
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200002c4 	.word	0x200002c4
 8001be8:	40000400 	.word	0x40000400

08001bec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	@ 0x30
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	2224      	movs	r2, #36	@ 0x24
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 f927 	bl	8004e4e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c08:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <MX_TIM5_Init+0xa0>)
 8001c0a:	4a21      	ldr	r2, [pc, #132]	@ (8001c90 <MX_TIM5_Init+0xa4>)
 8001c0c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c8c <MX_TIM5_Init+0xa0>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c14:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <MX_TIM5_Init+0xa0>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3999;
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c8c <MX_TIM5_Init+0xa0>)
 8001c1c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001c20:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <MX_TIM5_Init+0xa0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c28:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <MX_TIM5_Init+0xa0>)
 8001c2a:	2280      	movs	r2, #128	@ 0x80
 8001c2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c36:	2301      	movs	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c46:	2301      	movs	r3, #1
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	4619      	mov	r1, r3
 8001c58:	480c      	ldr	r0, [pc, #48]	@ (8001c8c <MX_TIM5_Init+0xa0>)
 8001c5a:	f001 fdb1 	bl	80037c0 <HAL_TIM_Encoder_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001c64:	f000 f8ca 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <MX_TIM5_Init+0xa0>)
 8001c76:	f002 f8eb 	bl	8003e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001c80:	f000 f8bc 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	3730      	adds	r7, #48	@ 0x30
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000030c 	.word	0x2000030c
 8001c90:	40000c00 	.word	0x40000c00

08001c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b4f      	ldr	r3, [pc, #316]	@ (8001dec <MX_GPIO_Init+0x158>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	4a4e      	ldr	r2, [pc, #312]	@ (8001dec <MX_GPIO_Init+0x158>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cba:	4b4c      	ldr	r3, [pc, #304]	@ (8001dec <MX_GPIO_Init+0x158>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b48      	ldr	r3, [pc, #288]	@ (8001dec <MX_GPIO_Init+0x158>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	4a47      	ldr	r2, [pc, #284]	@ (8001dec <MX_GPIO_Init+0x158>)
 8001cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd6:	4b45      	ldr	r3, [pc, #276]	@ (8001dec <MX_GPIO_Init+0x158>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	4b41      	ldr	r3, [pc, #260]	@ (8001dec <MX_GPIO_Init+0x158>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a40      	ldr	r2, [pc, #256]	@ (8001dec <MX_GPIO_Init+0x158>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dec <MX_GPIO_Init+0x158>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	4b3a      	ldr	r3, [pc, #232]	@ (8001dec <MX_GPIO_Init+0x158>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	4a39      	ldr	r2, [pc, #228]	@ (8001dec <MX_GPIO_Init+0x158>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0e:	4b37      	ldr	r3, [pc, #220]	@ (8001dec <MX_GPIO_Init+0x158>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f241 71f0 	movw	r1, #6128	@ 0x17f0
 8001d20:	4833      	ldr	r0, [pc, #204]	@ (8001df0 <MX_GPIO_Init+0x15c>)
 8001d22:	f000 fe19 	bl	8002958 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 8001d26:	2200      	movs	r2, #0
 8001d28:	f246 0164 	movw	r1, #24676	@ 0x6064
 8001d2c:	4831      	ldr	r0, [pc, #196]	@ (8001df4 <MX_GPIO_Init+0x160>)
 8001d2e:	f000 fe13 	bl	8002958 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d32:	2304      	movs	r3, #4
 8001d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	482a      	ldr	r0, [pc, #168]	@ (8001df0 <MX_GPIO_Init+0x15c>)
 8001d46:	f000 fc6b 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4824      	ldr	r0, [pc, #144]	@ (8001df0 <MX_GPIO_Init+0x15c>)
 8001d5e:	f000 fc5f 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d62:	2320      	movs	r3, #32
 8001d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	4619      	mov	r1, r3
 8001d76:	4820      	ldr	r0, [pc, #128]	@ (8001df8 <MX_GPIO_Init+0x164>)
 8001d78:	f000 fc52 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001d7c:	f241 73f0 	movw	r3, #6128	@ 0x17f0
 8001d80:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d82:	2301      	movs	r3, #1
 8001d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	4619      	mov	r1, r3
 8001d94:	4816      	ldr	r0, [pc, #88]	@ (8001df0 <MX_GPIO_Init+0x15c>)
 8001d96:	f000 fc43 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 8001d9a:	f246 0364 	movw	r3, #24676	@ 0x6064
 8001d9e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	2301      	movs	r3, #1
 8001da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4619      	mov	r1, r3
 8001db2:	4810      	ldr	r0, [pc, #64]	@ (8001df4 <MX_GPIO_Init+0x160>)
 8001db4:	f000 fc34 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001db8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dbe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4809      	ldr	r0, [pc, #36]	@ (8001df4 <MX_GPIO_Init+0x160>)
 8001dd0:	f000 fc26 	bl	8002620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	2017      	movs	r0, #23
 8001dda:	f000 fbea 	bl	80025b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001dde:	2017      	movs	r0, #23
 8001de0:	f000 fc03 	bl	80025ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001de4:	bf00      	nop
 8001de6:	3728      	adds	r7, #40	@ 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020800 	.word	0x40020800
 8001df4:	40020400 	.word	0x40020400
 8001df8:	40020000 	.word	0x40020000

08001dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e00:	b672      	cpsid	i
}
 8001e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <Error_Handler+0x8>

08001e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <HAL_MspInit+0x4c>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	4a0f      	ldr	r2, [pc, #60]	@ (8001e54 <HAL_MspInit+0x4c>)
 8001e18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <HAL_MspInit+0x4c>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <HAL_MspInit+0x4c>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	4a08      	ldr	r2, [pc, #32]	@ (8001e54 <HAL_MspInit+0x4c>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3a:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <HAL_MspInit+0x4c>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e46:	2007      	movs	r0, #7
 8001e48:	f000 fba8 	bl	800259c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800

08001e58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea8 <HAL_RTC_MspInit+0x50>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d111      	bne.n	8001e9e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e82:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 f9fb 	bl	8003284 <HAL_RCCEx_PeriphCLKConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001e94:	f7ff ffb2 	bl	8001dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <HAL_RTC_MspInit+0x54>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3720      	adds	r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40002800 	.word	0x40002800
 8001eac:	42470e3c 	.word	0x42470e3c

08001eb0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08e      	sub	sp, #56	@ 0x38
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a4b      	ldr	r2, [pc, #300]	@ (8001ffc <HAL_TIM_Encoder_MspInit+0x14c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d12d      	bne.n	8001f2e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
 8001ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	4a49      	ldr	r2, [pc, #292]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee2:	4b47      	ldr	r3, [pc, #284]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	623b      	str	r3, [r7, #32]
 8001eec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	4b43      	ldr	r3, [pc, #268]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a42      	ldr	r2, [pc, #264]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b40      	ldr	r3, [pc, #256]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f24:	4619      	mov	r1, r3
 8001f26:	4837      	ldr	r0, [pc, #220]	@ (8002004 <HAL_TIM_Encoder_MspInit+0x154>)
 8001f28:	f000 fb7a 	bl	8002620 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f2c:	e062      	b.n	8001ff4 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM3)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a35      	ldr	r2, [pc, #212]	@ (8002008 <HAL_TIM_Encoder_MspInit+0x158>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d12c      	bne.n	8001f92 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	4b30      	ldr	r3, [pc, #192]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	4a2f      	ldr	r2, [pc, #188]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001f42:	f043 0302 	orr.w	r3, r3, #2
 8001f46:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f48:	4b2d      	ldr	r3, [pc, #180]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	4b29      	ldr	r3, [pc, #164]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	4a28      	ldr	r2, [pc, #160]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f64:	4b26      	ldr	r3, [pc, #152]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f70:	23c0      	movs	r3, #192	@ 0xc0
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f80:	2302      	movs	r3, #2
 8001f82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f88:	4619      	mov	r1, r3
 8001f8a:	481e      	ldr	r0, [pc, #120]	@ (8002004 <HAL_TIM_Encoder_MspInit+0x154>)
 8001f8c:	f000 fb48 	bl	8002620 <HAL_GPIO_Init>
}
 8001f90:	e030      	b.n	8001ff4 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM5)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1d      	ldr	r2, [pc, #116]	@ (800200c <HAL_TIM_Encoder_MspInit+0x15c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d12b      	bne.n	8001ff4 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa4:	4a16      	ldr	r2, [pc, #88]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fac:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <HAL_TIM_Encoder_MspInit+0x150>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fec:	4619      	mov	r1, r3
 8001fee:	4805      	ldr	r0, [pc, #20]	@ (8002004 <HAL_TIM_Encoder_MspInit+0x154>)
 8001ff0:	f000 fb16 	bl	8002620 <HAL_GPIO_Init>
}
 8001ff4:	bf00      	nop
 8001ff6:	3738      	adds	r7, #56	@ 0x38
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40010000 	.word	0x40010000
 8002000:	40023800 	.word	0x40023800
 8002004:	40020000 	.word	0x40020000
 8002008:	40000400 	.word	0x40000400
 800200c:	40000c00 	.word	0x40000c00

08002010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002020:	d10d      	bne.n	800203e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <HAL_TIM_Base_MspInit+0x3c>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	4a08      	ldr	r2, [pc, #32]	@ (800204c <HAL_TIM_Base_MspInit+0x3c>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6413      	str	r3, [r2, #64]	@ 0x40
 8002032:	4b06      	ldr	r3, [pc, #24]	@ (800204c <HAL_TIM_Base_MspInit+0x3c>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800

08002050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <NMI_Handler+0x4>

08002058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <HardFault_Handler+0x4>

08002060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <MemManage_Handler+0x4>

08002068 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <BusFault_Handler+0x4>

08002070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <UsageFault_Handler+0x4>

08002078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a6:	f000 f965 	bl	8002374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}

080020ae <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80020b2:	2020      	movs	r0, #32
 80020b4:	f000 fc6a 	bl	800298c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80020b8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80020bc:	f000 fc66 	bl	800298c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80020c0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020c4:	f000 fc62 	bl	800298c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return 1;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_kill>:

int _kill(int pid, int sig)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020e6:	f002 ff05 	bl	8004ef4 <__errno>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2216      	movs	r2, #22
 80020ee:	601a      	str	r2, [r3, #0]
  return -1;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_exit>:

void _exit (int status)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ffe7 	bl	80020dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800210e:	bf00      	nop
 8002110:	e7fd      	b.n	800210e <_exit+0x12>

08002112 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e00a      	b.n	800213a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002124:	f3af 8000 	nop.w
 8002128:	4601      	mov	r1, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	60ba      	str	r2, [r7, #8]
 8002130:	b2ca      	uxtb	r2, r1
 8002132:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3301      	adds	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	dbf0      	blt.n	8002124 <_read+0x12>
  }

  return len;
 8002142:	687b      	ldr	r3, [r7, #4]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	e009      	b.n	8002172 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	60ba      	str	r2, [r7, #8]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3301      	adds	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	429a      	cmp	r2, r3
 8002178:	dbf1      	blt.n	800215e <_write+0x12>
  }
  return len;
 800217a:	687b      	ldr	r3, [r7, #4]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <_close>:

int _close(int file)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800218c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021ac:	605a      	str	r2, [r3, #4]
  return 0;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <_isatty>:

int _isatty(int file)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021c4:	2301      	movs	r3, #1
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f4:	4a14      	ldr	r2, [pc, #80]	@ (8002248 <_sbrk+0x5c>)
 80021f6:	4b15      	ldr	r3, [pc, #84]	@ (800224c <_sbrk+0x60>)
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002200:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002208:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <_sbrk+0x64>)
 800220a:	4a12      	ldr	r2, [pc, #72]	@ (8002254 <_sbrk+0x68>)
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	429a      	cmp	r2, r3
 800221a:	d207      	bcs.n	800222c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800221c:	f002 fe6a 	bl	8004ef4 <__errno>
 8002220:	4603      	mov	r3, r0
 8002222:	220c      	movs	r2, #12
 8002224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	e009      	b.n	8002240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800222c:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002232:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a05      	ldr	r2, [pc, #20]	@ (8002250 <_sbrk+0x64>)
 800223c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20018000 	.word	0x20018000
 800224c:	00000400 	.word	0x00000400
 8002250:	20000354 	.word	0x20000354
 8002254:	200004a8 	.word	0x200004a8

08002258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <SystemInit+0x20>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002262:	4a05      	ldr	r2, [pc, #20]	@ (8002278 <SystemInit+0x20>)
 8002264:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002268:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800227c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002280:	f7ff ffea 	bl	8002258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002284:	480c      	ldr	r0, [pc, #48]	@ (80022b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002286:	490d      	ldr	r1, [pc, #52]	@ (80022bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002288:	4a0d      	ldr	r2, [pc, #52]	@ (80022c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800228c:	e002      	b.n	8002294 <LoopCopyDataInit>

0800228e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002292:	3304      	adds	r3, #4

08002294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002298:	d3f9      	bcc.n	800228e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229a:	4a0a      	ldr	r2, [pc, #40]	@ (80022c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800229c:	4c0a      	ldr	r4, [pc, #40]	@ (80022c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a0:	e001      	b.n	80022a6 <LoopFillZerobss>

080022a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a4:	3204      	adds	r2, #4

080022a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a8:	d3fb      	bcc.n	80022a2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80022aa:	f002 fe29 	bl	8004f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ae:	f7ff fa4f 	bl	8001750 <main>
  bx  lr    
 80022b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022bc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80022c0:	08008af0 	.word	0x08008af0
  ldr r2, =_sbss
 80022c4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80022c8:	200004a8 	.word	0x200004a8

080022cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022cc:	e7fe      	b.n	80022cc <ADC_IRQHandler>
	...

080022d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <HAL_Init+0x40>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002310 <HAL_Init+0x40>)
 80022da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <HAL_Init+0x40>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <HAL_Init+0x40>)
 80022e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ec:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <HAL_Init+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a07      	ldr	r2, [pc, #28]	@ (8002310 <HAL_Init+0x40>)
 80022f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f8:	2003      	movs	r0, #3
 80022fa:	f000 f94f 	bl	800259c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fe:	2000      	movs	r0, #0
 8002300:	f000 f808 	bl	8002314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002304:	f7ff fd80 	bl	8001e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023c00 	.word	0x40023c00

08002314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800231c:	4b12      	ldr	r3, [pc, #72]	@ (8002368 <HAL_InitTick+0x54>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b12      	ldr	r3, [pc, #72]	@ (800236c <HAL_InitTick+0x58>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800232a:	fbb3 f3f1 	udiv	r3, r3, r1
 800232e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f967 	bl	8002606 <HAL_SYSTICK_Config>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e00e      	b.n	8002360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b0f      	cmp	r3, #15
 8002346:	d80a      	bhi.n	800235e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002348:	2200      	movs	r2, #0
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f000 f92f 	bl	80025b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002354:	4a06      	ldr	r2, [pc, #24]	@ (8002370 <HAL_InitTick+0x5c>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	e000      	b.n	8002360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000004 	.word	0x20000004
 800236c:	2000000c 	.word	0x2000000c
 8002370:	20000008 	.word	0x20000008

08002374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_IncTick+0x20>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <HAL_IncTick+0x24>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4413      	add	r3, r2
 8002384:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <HAL_IncTick+0x24>)
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	2000000c 	.word	0x2000000c
 8002398:	20000358 	.word	0x20000358

0800239c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return uwTick;
 80023a0:	4b03      	ldr	r3, [pc, #12]	@ (80023b0 <HAL_GetTick+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000358 	.word	0x20000358

080023b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023bc:	f7ff ffee 	bl	800239c <HAL_GetTick>
 80023c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d005      	beq.n	80023da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ce:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <HAL_Delay+0x44>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023da:	bf00      	nop
 80023dc:	f7ff ffde 	bl	800239c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d8f7      	bhi.n	80023dc <HAL_Delay+0x28>
  {
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000000c 	.word	0x2000000c

080023fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800240c:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002424:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800242c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242e:	4a04      	ldr	r2, [pc, #16]	@ (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	60d3      	str	r3, [r2, #12]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002448:	4b04      	ldr	r3, [pc, #16]	@ (800245c <__NVIC_GetPriorityGrouping+0x18>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 0307 	and.w	r3, r3, #7
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	db0b      	blt.n	800248a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	4907      	ldr	r1, [pc, #28]	@ (8002498 <__NVIC_EnableIRQ+0x38>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2001      	movs	r0, #1
 8002482:	fa00 f202 	lsl.w	r2, r0, r2
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0a      	blt.n	80024c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	490c      	ldr	r1, [pc, #48]	@ (80024e8 <__NVIC_SetPriority+0x4c>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c4:	e00a      	b.n	80024dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4908      	ldr	r1, [pc, #32]	@ (80024ec <__NVIC_SetPriority+0x50>)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3b04      	subs	r3, #4
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	440b      	add	r3, r1
 80024da:	761a      	strb	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	@ 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	2b04      	cmp	r3, #4
 800250c:	bf28      	it	cs
 800250e:	2304      	movcs	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3304      	adds	r3, #4
 8002516:	2b06      	cmp	r3, #6
 8002518:	d902      	bls.n	8002520 <NVIC_EncodePriority+0x30>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3b03      	subs	r3, #3
 800251e:	e000      	b.n	8002522 <NVIC_EncodePriority+0x32>
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 32ff 	mov.w	r2, #4294967295
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002538:	f04f 31ff 	mov.w	r1, #4294967295
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43d9      	mvns	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	4313      	orrs	r3, r2
         );
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	@ 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002568:	d301      	bcc.n	800256e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <SysTick_Config+0x40>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002576:	210f      	movs	r1, #15
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f7ff ff8e 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <SysTick_Config+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002586:	4b04      	ldr	r3, [pc, #16]	@ (8002598 <SysTick_Config+0x40>)
 8002588:	2207      	movs	r2, #7
 800258a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	e000e010 	.word	0xe000e010

0800259c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff29 	bl	80023fc <__NVIC_SetPriorityGrouping>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c4:	f7ff ff3e 	bl	8002444 <__NVIC_GetPriorityGrouping>
 80025c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6978      	ldr	r0, [r7, #20]
 80025d0:	f7ff ff8e 	bl	80024f0 <NVIC_EncodePriority>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff5d 	bl	800249c <__NVIC_SetPriority>
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff31 	bl	8002460 <__NVIC_EnableIRQ>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ffa2 	bl	8002558 <SysTick_Config>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	@ 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e159      	b.n	80028f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800263c:	2201      	movs	r2, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	429a      	cmp	r2, r3
 8002656:	f040 8148 	bne.w	80028ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d005      	beq.n	8002672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266e:	2b02      	cmp	r3, #2
 8002670:	d130      	bne.n	80026d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2203      	movs	r2, #3
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a8:	2201      	movs	r2, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 0201 	and.w	r2, r3, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d017      	beq.n	8002710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d123      	bne.n	8002764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	08da      	lsrs	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3208      	adds	r2, #8
 8002724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	220f      	movs	r2, #15
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	69b9      	ldr	r1, [r7, #24]
 8002760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0203 	and.w	r2, r3, #3
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80a2 	beq.w	80028ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b57      	ldr	r3, [pc, #348]	@ (8002908 <HAL_GPIO_Init+0x2e8>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	4a56      	ldr	r2, [pc, #344]	@ (8002908 <HAL_GPIO_Init+0x2e8>)
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027b6:	4b54      	ldr	r3, [pc, #336]	@ (8002908 <HAL_GPIO_Init+0x2e8>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027c2:	4a52      	ldr	r2, [pc, #328]	@ (800290c <HAL_GPIO_Init+0x2ec>)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a49      	ldr	r2, [pc, #292]	@ (8002910 <HAL_GPIO_Init+0x2f0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d019      	beq.n	8002822 <HAL_GPIO_Init+0x202>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a48      	ldr	r2, [pc, #288]	@ (8002914 <HAL_GPIO_Init+0x2f4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_GPIO_Init+0x1fe>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a47      	ldr	r2, [pc, #284]	@ (8002918 <HAL_GPIO_Init+0x2f8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00d      	beq.n	800281a <HAL_GPIO_Init+0x1fa>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a46      	ldr	r2, [pc, #280]	@ (800291c <HAL_GPIO_Init+0x2fc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d007      	beq.n	8002816 <HAL_GPIO_Init+0x1f6>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a45      	ldr	r2, [pc, #276]	@ (8002920 <HAL_GPIO_Init+0x300>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_GPIO_Init+0x1f2>
 800280e:	2304      	movs	r3, #4
 8002810:	e008      	b.n	8002824 <HAL_GPIO_Init+0x204>
 8002812:	2307      	movs	r3, #7
 8002814:	e006      	b.n	8002824 <HAL_GPIO_Init+0x204>
 8002816:	2303      	movs	r3, #3
 8002818:	e004      	b.n	8002824 <HAL_GPIO_Init+0x204>
 800281a:	2302      	movs	r3, #2
 800281c:	e002      	b.n	8002824 <HAL_GPIO_Init+0x204>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_GPIO_Init+0x204>
 8002822:	2300      	movs	r3, #0
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	f002 0203 	and.w	r2, r2, #3
 800282a:	0092      	lsls	r2, r2, #2
 800282c:	4093      	lsls	r3, r2
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002834:	4935      	ldr	r1, [pc, #212]	@ (800290c <HAL_GPIO_Init+0x2ec>)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	089b      	lsrs	r3, r3, #2
 800283a:	3302      	adds	r3, #2
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002842:	4b38      	ldr	r3, [pc, #224]	@ (8002924 <HAL_GPIO_Init+0x304>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002866:	4a2f      	ldr	r2, [pc, #188]	@ (8002924 <HAL_GPIO_Init+0x304>)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800286c:	4b2d      	ldr	r3, [pc, #180]	@ (8002924 <HAL_GPIO_Init+0x304>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002890:	4a24      	ldr	r2, [pc, #144]	@ (8002924 <HAL_GPIO_Init+0x304>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002896:	4b23      	ldr	r3, [pc, #140]	@ (8002924 <HAL_GPIO_Init+0x304>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002924 <HAL_GPIO_Init+0x304>)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028c0:	4b18      	ldr	r3, [pc, #96]	@ (8002924 <HAL_GPIO_Init+0x304>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002924 <HAL_GPIO_Init+0x304>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3301      	adds	r3, #1
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2b0f      	cmp	r3, #15
 80028f4:	f67f aea2 	bls.w	800263c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	3724      	adds	r7, #36	@ 0x24
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800
 800290c:	40013800 	.word	0x40013800
 8002910:	40020000 	.word	0x40020000
 8002914:	40020400 	.word	0x40020400
 8002918:	40020800 	.word	0x40020800
 800291c:	40020c00 	.word	0x40020c00
 8002920:	40021000 	.word	0x40021000
 8002924:	40013c00 	.word	0x40013c00

08002928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	887b      	ldrh	r3, [r7, #2]
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	e001      	b.n	800294a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002974:	e003      	b.n	800297e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	041a      	lsls	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	619a      	str	r2, [r3, #24]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002996:	4b08      	ldr	r3, [pc, #32]	@ (80029b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d006      	beq.n	80029b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029a2:	4a05      	ldr	r2, [pc, #20]	@ (80029b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fe98 	bl	80016e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40013c00 	.word	0x40013c00

080029bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e267      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d075      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029da:	4b88      	ldr	r3, [pc, #544]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d00c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e6:	4b85      	ldr	r3, [pc, #532]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d112      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f2:	4b82      	ldr	r3, [pc, #520]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029fe:	d10b      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a00:	4b7e      	ldr	r3, [pc, #504]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d05b      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x108>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d157      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e242      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a20:	d106      	bne.n	8002a30 <HAL_RCC_OscConfig+0x74>
 8002a22:	4b76      	ldr	r3, [pc, #472]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a75      	ldr	r2, [pc, #468]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e01d      	b.n	8002a6c <HAL_RCC_OscConfig+0xb0>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x98>
 8002a3a:	4b70      	ldr	r3, [pc, #448]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a6f      	ldr	r2, [pc, #444]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b6d      	ldr	r3, [pc, #436]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6c      	ldr	r2, [pc, #432]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0xb0>
 8002a54:	4b69      	ldr	r3, [pc, #420]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a68      	ldr	r2, [pc, #416]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b66      	ldr	r3, [pc, #408]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a65      	ldr	r2, [pc, #404]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7ff fc92 	bl	800239c <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7ff fc8e 	bl	800239c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	@ 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e207      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0xc0>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fc7e 	bl	800239c <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7ff fc7a 	bl	800239c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	@ 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e1f3      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	4b51      	ldr	r3, [pc, #324]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0xe8>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d063      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ade:	4b47      	ldr	r3, [pc, #284]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d11c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aea:	4b44      	ldr	r3, [pc, #272]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d116      	bne.n	8002b24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	4b41      	ldr	r3, [pc, #260]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_RCC_OscConfig+0x152>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e1c7      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4937      	ldr	r1, [pc, #220]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	e03a      	b.n	8002b9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d020      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b2c:	4b34      	ldr	r3, [pc, #208]	@ (8002c00 <HAL_RCC_OscConfig+0x244>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b32:	f7ff fc33 	bl	800239c <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3a:	f7ff fc2f 	bl	800239c <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e1a8      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b58:	4b28      	ldr	r3, [pc, #160]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4925      	ldr	r1, [pc, #148]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
 8002b6c:	e015      	b.n	8002b9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6e:	4b24      	ldr	r3, [pc, #144]	@ (8002c00 <HAL_RCC_OscConfig+0x244>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7ff fc12 	bl	800239c <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7c:	f7ff fc0e 	bl	800239c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e187      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d036      	beq.n	8002c14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d016      	beq.n	8002bdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bae:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <HAL_RCC_OscConfig+0x248>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7ff fbf2 	bl	800239c <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7ff fbee 	bl	800239c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e167      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_RCC_OscConfig+0x240>)
 8002bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x200>
 8002bda:	e01b      	b.n	8002c14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bdc:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_RCC_OscConfig+0x248>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be2:	f7ff fbdb 	bl	800239c <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be8:	e00e      	b.n	8002c08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bea:	f7ff fbd7 	bl	800239c <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d907      	bls.n	8002c08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e150      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	42470000 	.word	0x42470000
 8002c04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c08:	4b88      	ldr	r3, [pc, #544]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ea      	bne.n	8002bea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8097 	beq.w	8002d50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c26:	4b81      	ldr	r3, [pc, #516]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10f      	bne.n	8002c52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	4b7d      	ldr	r3, [pc, #500]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c42:	4b7a      	ldr	r3, [pc, #488]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b77      	ldr	r3, [pc, #476]	@ (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b74      	ldr	r3, [pc, #464]	@ (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a73      	ldr	r2, [pc, #460]	@ (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7ff fb97 	bl	800239c <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7ff fb93 	bl	800239c <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e10c      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b6a      	ldr	r3, [pc, #424]	@ (8002e30 <HAL_RCC_OscConfig+0x474>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x2ea>
 8002c98:	4b64      	ldr	r3, [pc, #400]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9c:	4a63      	ldr	r2, [pc, #396]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca4:	e01c      	b.n	8002ce0 <HAL_RCC_OscConfig+0x324>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x30c>
 8002cae:	4b5f      	ldr	r3, [pc, #380]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb2:	4a5e      	ldr	r2, [pc, #376]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cba:	4b5c      	ldr	r3, [pc, #368]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbe:	4a5b      	ldr	r2, [pc, #364]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc6:	e00b      	b.n	8002ce0 <HAL_RCC_OscConfig+0x324>
 8002cc8:	4b58      	ldr	r3, [pc, #352]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ccc:	4a57      	ldr	r2, [pc, #348]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd4:	4b55      	ldr	r3, [pc, #340]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd8:	4a54      	ldr	r2, [pc, #336]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002cda:	f023 0304 	bic.w	r3, r3, #4
 8002cde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d015      	beq.n	8002d14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7ff fb58 	bl	800239c <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7ff fb54 	bl	800239c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e0cb      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d06:	4b49      	ldr	r3, [pc, #292]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0ee      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x334>
 8002d12:	e014      	b.n	8002d3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d14:	f7ff fb42 	bl	800239c <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1a:	e00a      	b.n	8002d32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1c:	f7ff fb3e 	bl	800239c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e0b5      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d32:	4b3e      	ldr	r3, [pc, #248]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1ee      	bne.n	8002d1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d105      	bne.n	8002d50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d44:	4b39      	ldr	r3, [pc, #228]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	4a38      	ldr	r2, [pc, #224]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80a1 	beq.w	8002e9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d5a:	4b34      	ldr	r3, [pc, #208]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d05c      	beq.n	8002e20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d141      	bne.n	8002df2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6e:	4b31      	ldr	r3, [pc, #196]	@ (8002e34 <HAL_RCC_OscConfig+0x478>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7ff fb12 	bl	800239c <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7ff fb0e 	bl	800239c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e087      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	4b27      	ldr	r3, [pc, #156]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	019b      	lsls	r3, r3, #6
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	3b01      	subs	r3, #1
 8002db4:	041b      	lsls	r3, r3, #16
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbc:	061b      	lsls	r3, r3, #24
 8002dbe:	491b      	ldr	r1, [pc, #108]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e34 <HAL_RCC_OscConfig+0x478>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7ff fae7 	bl	800239c <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd2:	f7ff fae3 	bl	800239c <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e05c      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de4:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x416>
 8002df0:	e054      	b.n	8002e9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df2:	4b10      	ldr	r3, [pc, #64]	@ (8002e34 <HAL_RCC_OscConfig+0x478>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7ff fad0 	bl	800239c <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e00:	f7ff facc 	bl	800239c <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e045      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <HAL_RCC_OscConfig+0x470>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x444>
 8002e1e:	e03d      	b.n	8002e9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d107      	bne.n	8002e38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e038      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40007000 	.word	0x40007000
 8002e34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <HAL_RCC_OscConfig+0x4ec>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d028      	beq.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d121      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d11a      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d111      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7e:	085b      	lsrs	r3, r3, #1
 8002e80:	3b01      	subs	r3, #1
 8002e82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800

08002eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0cc      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b68      	ldr	r3, [pc, #416]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d90c      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b65      	ldr	r3, [pc, #404]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	4b63      	ldr	r3, [pc, #396]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0b8      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f00:	4b59      	ldr	r3, [pc, #356]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a58      	ldr	r2, [pc, #352]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f18:	4b53      	ldr	r3, [pc, #332]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	4a52      	ldr	r2, [pc, #328]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f24:	4b50      	ldr	r3, [pc, #320]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	494d      	ldr	r1, [pc, #308]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d044      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d107      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	4b47      	ldr	r3, [pc, #284]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d119      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e07f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e06f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e067      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8a:	4b37      	ldr	r3, [pc, #220]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 0203 	bic.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4934      	ldr	r1, [pc, #208]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f9c:	f7ff f9fe 	bl	800239c <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa4:	f7ff f9fa 	bl	800239c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e04f      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	4b2b      	ldr	r3, [pc, #172]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 020c 	and.w	r2, r3, #12
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1eb      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b25      	ldr	r3, [pc, #148]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d20c      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b22      	ldr	r3, [pc, #136]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b20      	ldr	r3, [pc, #128]	@ (8003064 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e032      	b.n	800305a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003000:	4b19      	ldr	r3, [pc, #100]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4916      	ldr	r1, [pc, #88]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800301e:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	490e      	ldr	r1, [pc, #56]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003032:	f000 f821 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8003036:	4602      	mov	r2, r0
 8003038:	4b0b      	ldr	r3, [pc, #44]	@ (8003068 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	490a      	ldr	r1, [pc, #40]	@ (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	5ccb      	ldrb	r3, [r1, r3]
 8003046:	fa22 f303 	lsr.w	r3, r2, r3
 800304a:	4a09      	ldr	r2, [pc, #36]	@ (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800304e:	4b09      	ldr	r3, [pc, #36]	@ (8003074 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff f95e 	bl	8002314 <HAL_InitTick>

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023c00 	.word	0x40023c00
 8003068:	40023800 	.word	0x40023800
 800306c:	080086a0 	.word	0x080086a0
 8003070:	20000004 	.word	0x20000004
 8003074:	20000008 	.word	0x20000008

08003078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800307c:	b094      	sub	sp, #80	@ 0x50
 800307e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003090:	4b79      	ldr	r3, [pc, #484]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b08      	cmp	r3, #8
 800309a:	d00d      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x40>
 800309c:	2b08      	cmp	r3, #8
 800309e:	f200 80e1 	bhi.w	8003264 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x34>
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d003      	beq.n	80030b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030aa:	e0db      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030ac:	4b73      	ldr	r3, [pc, #460]	@ (800327c <HAL_RCC_GetSysClockFreq+0x204>)
 80030ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030b0:	e0db      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030b2:	4b73      	ldr	r3, [pc, #460]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x208>)
 80030b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030b6:	e0d8      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d063      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	099b      	lsrs	r3, r3, #6
 80030d4:	2200      	movs	r2, #0
 80030d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030e2:	2300      	movs	r3, #0
 80030e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80030e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030ea:	4622      	mov	r2, r4
 80030ec:	462b      	mov	r3, r5
 80030ee:	f04f 0000 	mov.w	r0, #0
 80030f2:	f04f 0100 	mov.w	r1, #0
 80030f6:	0159      	lsls	r1, r3, #5
 80030f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030fc:	0150      	lsls	r0, r2, #5
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4621      	mov	r1, r4
 8003104:	1a51      	subs	r1, r2, r1
 8003106:	6139      	str	r1, [r7, #16]
 8003108:	4629      	mov	r1, r5
 800310a:	eb63 0301 	sbc.w	r3, r3, r1
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800311c:	4659      	mov	r1, fp
 800311e:	018b      	lsls	r3, r1, #6
 8003120:	4651      	mov	r1, sl
 8003122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003126:	4651      	mov	r1, sl
 8003128:	018a      	lsls	r2, r1, #6
 800312a:	4651      	mov	r1, sl
 800312c:	ebb2 0801 	subs.w	r8, r2, r1
 8003130:	4659      	mov	r1, fp
 8003132:	eb63 0901 	sbc.w	r9, r3, r1
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800314a:	4690      	mov	r8, r2
 800314c:	4699      	mov	r9, r3
 800314e:	4623      	mov	r3, r4
 8003150:	eb18 0303 	adds.w	r3, r8, r3
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	462b      	mov	r3, r5
 8003158:	eb49 0303 	adc.w	r3, r9, r3
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800316a:	4629      	mov	r1, r5
 800316c:	024b      	lsls	r3, r1, #9
 800316e:	4621      	mov	r1, r4
 8003170:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003174:	4621      	mov	r1, r4
 8003176:	024a      	lsls	r2, r1, #9
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800317e:	2200      	movs	r2, #0
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003182:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003184:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003188:	f7fd fd86 	bl	8000c98 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4613      	mov	r3, r2
 8003192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003194:	e058      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003196:	4b38      	ldr	r3, [pc, #224]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	099b      	lsrs	r3, r3, #6
 800319c:	2200      	movs	r2, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	4611      	mov	r1, r2
 80031a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031a6:	623b      	str	r3, [r7, #32]
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031b0:	4642      	mov	r2, r8
 80031b2:	464b      	mov	r3, r9
 80031b4:	f04f 0000 	mov.w	r0, #0
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	0159      	lsls	r1, r3, #5
 80031be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c2:	0150      	lsls	r0, r2, #5
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4641      	mov	r1, r8
 80031ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80031ce:	4649      	mov	r1, r9
 80031d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031e8:	ebb2 040a 	subs.w	r4, r2, sl
 80031ec:	eb63 050b 	sbc.w	r5, r3, fp
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	00eb      	lsls	r3, r5, #3
 80031fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fe:	00e2      	lsls	r2, r4, #3
 8003200:	4614      	mov	r4, r2
 8003202:	461d      	mov	r5, r3
 8003204:	4643      	mov	r3, r8
 8003206:	18e3      	adds	r3, r4, r3
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	464b      	mov	r3, r9
 800320c:	eb45 0303 	adc.w	r3, r5, r3
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800321e:	4629      	mov	r1, r5
 8003220:	028b      	lsls	r3, r1, #10
 8003222:	4621      	mov	r1, r4
 8003224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003228:	4621      	mov	r1, r4
 800322a:	028a      	lsls	r2, r1, #10
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003232:	2200      	movs	r2, #0
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	61fa      	str	r2, [r7, #28]
 8003238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800323c:	f7fd fd2c 	bl	8000c98 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4613      	mov	r3, r2
 8003246:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003248:	4b0b      	ldr	r3, [pc, #44]	@ (8003278 <HAL_RCC_GetSysClockFreq+0x200>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	3301      	adds	r3, #1
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003258:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800325a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003262:	e002      	b.n	800326a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b05      	ldr	r3, [pc, #20]	@ (800327c <HAL_RCC_GetSysClockFreq+0x204>)
 8003266:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800326c:	4618      	mov	r0, r3
 800326e:	3750      	adds	r7, #80	@ 0x50
 8003270:	46bd      	mov	sp, r7
 8003272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800
 800327c:	00f42400 	.word	0x00f42400
 8003280:	007a1200 	.word	0x007a1200

08003284 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d035      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032ac:	4b67      	ldr	r3, [pc, #412]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032b2:	f7ff f873 	bl	800239c <HAL_GetTick>
 80032b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032ba:	f7ff f86f 	bl	800239c <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e0ba      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032cc:	4b60      	ldr	r3, [pc, #384]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f0      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	019a      	lsls	r2, r3, #6
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	071b      	lsls	r3, r3, #28
 80032e4:	495a      	ldr	r1, [pc, #360]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032ec:	4b57      	ldr	r3, [pc, #348]	@ (800344c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032f2:	f7ff f853 	bl	800239c <HAL_GetTick>
 80032f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032fa:	f7ff f84f 	bl	800239c <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e09a      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800330c:	4b50      	ldr	r3, [pc, #320]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8083 	beq.w	800342c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	4b49      	ldr	r3, [pc, #292]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	4a48      	ldr	r2, [pc, #288]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003334:	6413      	str	r3, [r2, #64]	@ 0x40
 8003336:	4b46      	ldr	r3, [pc, #280]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003342:	4b44      	ldr	r3, [pc, #272]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a43      	ldr	r2, [pc, #268]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800334c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800334e:	f7ff f825 	bl	800239c <HAL_GetTick>
 8003352:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003356:	f7ff f821 	bl	800239c <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e06c      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003368:	4b3a      	ldr	r3, [pc, #232]	@ (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003374:	4b36      	ldr	r3, [pc, #216]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003378:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800337c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02f      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	429a      	cmp	r2, r3
 8003390:	d028      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003392:	4b2f      	ldr	r3, [pc, #188]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800339a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800339c:	4b2e      	ldr	r3, [pc, #184]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033a8:	4a29      	ldr	r2, [pc, #164]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033ae:	4b28      	ldr	r3, [pc, #160]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d114      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fe ffef 	bl	800239c <HAL_GetTick>
 80033be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe ffeb 	bl	800239c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e034      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ee      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033f0:	d10d      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80033f2:	4b17      	ldr	r3, [pc, #92]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003406:	4912      	ldr	r1, [pc, #72]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003408:	4313      	orrs	r3, r2
 800340a:	608b      	str	r3, [r1, #8]
 800340c:	e005      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800340e:	4b10      	ldr	r3, [pc, #64]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4a0f      	ldr	r2, [pc, #60]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003414:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003418:	6093      	str	r3, [r2, #8]
 800341a:	4b0d      	ldr	r3, [pc, #52]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800341c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003426:	490a      	ldr	r1, [pc, #40]	@ (8003450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	7c1a      	ldrb	r2, [r3, #16]
 800343c:	4b07      	ldr	r3, [pc, #28]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800343e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	42470068 	.word	0x42470068
 8003450:	40023800 	.word	0x40023800
 8003454:	40007000 	.word	0x40007000
 8003458:	42470e40 	.word	0x42470e40
 800345c:	424711e0 	.word	0x424711e0

08003460 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e073      	b.n	800355e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	7f5b      	ldrb	r3, [r3, #29]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe fce6 	bl	8001e58 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b10      	cmp	r3, #16
 800349e:	d055      	beq.n	800354c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	22ca      	movs	r2, #202	@ 0xca
 80034a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2253      	movs	r2, #83	@ 0x53
 80034ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f87f 	bl	80035b4 <RTC_EnterInitMode>
 80034b6:	4603      	mov	r3, r0
 80034b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d12c      	bne.n	800351a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80034ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034d2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6899      	ldr	r1, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	68d2      	ldr	r2, [r2, #12]
 80034fa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6919      	ldr	r1, [r3, #16]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	041a      	lsls	r2, r3, #16
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f886 	bl	8003622 <RTC_ExitInitMode>
 8003516:	4603      	mov	r3, r0
 8003518:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d110      	bne.n	8003542 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800352e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	22ff      	movs	r2, #255	@ 0xff
 8003548:	625a      	str	r2, [r3, #36]	@ 0x24
 800354a:	e001      	b.n	8003550 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d102      	bne.n	800355c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800355c:	7bfb      	ldrb	r3, [r7, #15]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a0d      	ldr	r2, [pc, #52]	@ (80035b0 <HAL_RTC_WaitForSynchro+0x48>)
 800357a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800357c:	f7fe ff0e 	bl	800239c <HAL_GetTick>
 8003580:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003582:	e009      	b.n	8003598 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003584:	f7fe ff0a 	bl	800239c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003592:	d901      	bls.n	8003598 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e007      	b.n	80035a8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0ee      	beq.n	8003584 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	00013f5f 	.word	0x00013f5f

080035b4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d122      	bne.n	8003618 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035e0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035e2:	f7fe fedb 	bl	800239c <HAL_GetTick>
 80035e6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80035e8:	e00c      	b.n	8003604 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035ea:	f7fe fed7 	bl	800239c <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035f8:	d904      	bls.n	8003604 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2204      	movs	r2, #4
 80035fe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d102      	bne.n	8003618 <RTC_EnterInitMode+0x64>
 8003612:	7bfb      	ldrb	r3, [r7, #15]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d1e8      	bne.n	80035ea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003618:	7bfb      	ldrb	r3, [r7, #15]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800363c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10a      	bne.n	8003662 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ff8b 	bl	8003568 <HAL_RTC_WaitForSynchro>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2204      	movs	r2, #4
 800365c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e041      	b.n	8003702 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fe fcbc 	bl	8002010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f000 fa84 	bl	8003bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d001      	beq.n	8003724 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e03c      	b.n	800379e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1e      	ldr	r2, [pc, #120]	@ (80037ac <HAL_TIM_Base_Start+0xa0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d018      	beq.n	8003768 <HAL_TIM_Base_Start+0x5c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800373e:	d013      	beq.n	8003768 <HAL_TIM_Base_Start+0x5c>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1a      	ldr	r2, [pc, #104]	@ (80037b0 <HAL_TIM_Base_Start+0xa4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00e      	beq.n	8003768 <HAL_TIM_Base_Start+0x5c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a19      	ldr	r2, [pc, #100]	@ (80037b4 <HAL_TIM_Base_Start+0xa8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d009      	beq.n	8003768 <HAL_TIM_Base_Start+0x5c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a17      	ldr	r2, [pc, #92]	@ (80037b8 <HAL_TIM_Base_Start+0xac>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <HAL_TIM_Base_Start+0x5c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a16      	ldr	r2, [pc, #88]	@ (80037bc <HAL_TIM_Base_Start+0xb0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d111      	bne.n	800378c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b06      	cmp	r3, #6
 8003778:	d010      	beq.n	800379c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378a:	e007      	b.n	800379c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40010000 	.word	0x40010000
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800
 80037b8:	40000c00 	.word	0x40000c00
 80037bc:	40014000 	.word	0x40014000

080037c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e097      	b.n	8003904 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fe fb61 	bl	8001eb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003804:	f023 0307 	bic.w	r3, r3, #7
 8003808:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3304      	adds	r3, #4
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f000 f9cf 	bl	8003bb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	4313      	orrs	r3, r2
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003860:	f023 030c 	bic.w	r3, r3, #12
 8003864:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800386c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	021b      	lsls	r3, r3, #8
 800387c:	4313      	orrs	r3, r2
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	011a      	lsls	r2, r3, #4
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	031b      	lsls	r3, r3, #12
 8003890:	4313      	orrs	r3, r2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800389e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80038a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	4313      	orrs	r3, r2
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800391c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003924:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800392c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003934:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d110      	bne.n	800395e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d102      	bne.n	8003948 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003942:	7b7b      	ldrb	r3, [r7, #13]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d001      	beq.n	800394c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e069      	b.n	8003a20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800395c:	e031      	b.n	80039c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b04      	cmp	r3, #4
 8003962:	d110      	bne.n	8003986 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003964:	7bbb      	ldrb	r3, [r7, #14]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d102      	bne.n	8003970 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800396a:	7b3b      	ldrb	r3, [r7, #12]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d001      	beq.n	8003974 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e055      	b.n	8003a20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003984:	e01d      	b.n	80039c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d108      	bne.n	800399e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800398c:	7bbb      	ldrb	r3, [r7, #14]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d105      	bne.n	800399e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003992:	7b7b      	ldrb	r3, [r7, #13]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d102      	bne.n	800399e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003998:	7b3b      	ldrb	r3, [r7, #12]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d001      	beq.n	80039a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e03e      	b.n	8003a20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2202      	movs	r2, #2
 80039ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_TIM_Encoder_Start+0xc4>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d008      	beq.n	80039e0 <HAL_TIM_Encoder_Start+0xd4>
 80039ce:	e00f      	b.n	80039f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2201      	movs	r2, #1
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fa13 	bl	8003e04 <TIM_CCxChannelCmd>
      break;
 80039de:	e016      	b.n	8003a0e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2201      	movs	r2, #1
 80039e6:	2104      	movs	r1, #4
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fa0b 	bl	8003e04 <TIM_CCxChannelCmd>
      break;
 80039ee:	e00e      	b.n	8003a0e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2201      	movs	r2, #1
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fa03 	bl	8003e04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	2104      	movs	r1, #4
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f9fc 	bl	8003e04 <TIM_CCxChannelCmd>
      break;
 8003a0c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_TIM_ConfigClockSource+0x1c>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e0b4      	b.n	8003bae <HAL_TIM_ConfigClockSource+0x186>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a7c:	d03e      	beq.n	8003afc <HAL_TIM_ConfigClockSource+0xd4>
 8003a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a82:	f200 8087 	bhi.w	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a8a:	f000 8086 	beq.w	8003b9a <HAL_TIM_ConfigClockSource+0x172>
 8003a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a92:	d87f      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003a94:	2b70      	cmp	r3, #112	@ 0x70
 8003a96:	d01a      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0xa6>
 8003a98:	2b70      	cmp	r3, #112	@ 0x70
 8003a9a:	d87b      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003a9c:	2b60      	cmp	r3, #96	@ 0x60
 8003a9e:	d050      	beq.n	8003b42 <HAL_TIM_ConfigClockSource+0x11a>
 8003aa0:	2b60      	cmp	r3, #96	@ 0x60
 8003aa2:	d877      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa4:	2b50      	cmp	r3, #80	@ 0x50
 8003aa6:	d03c      	beq.n	8003b22 <HAL_TIM_ConfigClockSource+0xfa>
 8003aa8:	2b50      	cmp	r3, #80	@ 0x50
 8003aaa:	d873      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003aac:	2b40      	cmp	r3, #64	@ 0x40
 8003aae:	d058      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0x13a>
 8003ab0:	2b40      	cmp	r3, #64	@ 0x40
 8003ab2:	d86f      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab4:	2b30      	cmp	r3, #48	@ 0x30
 8003ab6:	d064      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ab8:	2b30      	cmp	r3, #48	@ 0x30
 8003aba:	d86b      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d060      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d867      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d05c      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d05a      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x15a>
 8003acc:	e062      	b.n	8003b94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ade:	f000 f971 	bl	8003dc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003af0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	609a      	str	r2, [r3, #8]
      break;
 8003afa:	e04f      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b0c:	f000 f95a 	bl	8003dc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b1e:	609a      	str	r2, [r3, #8]
      break;
 8003b20:	e03c      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f000 f8ce 	bl	8003cd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2150      	movs	r1, #80	@ 0x50
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 f927 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003b40:	e02c      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f000 f8ed 	bl	8003d2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2160      	movs	r1, #96	@ 0x60
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f917 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003b60:	e01c      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f000 f8ae 	bl	8003cd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2140      	movs	r1, #64	@ 0x40
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f907 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003b80:	e00c      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	f000 f8fe 	bl	8003d8e <TIM_ITRx_SetConfig>
      break;
 8003b92:	e003      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      break;
 8003b98:	e000      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3a      	ldr	r2, [pc, #232]	@ (8003cb4 <TIM_Base_SetConfig+0xfc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00f      	beq.n	8003bf0 <TIM_Base_SetConfig+0x38>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd6:	d00b      	beq.n	8003bf0 <TIM_Base_SetConfig+0x38>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a37      	ldr	r2, [pc, #220]	@ (8003cb8 <TIM_Base_SetConfig+0x100>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d007      	beq.n	8003bf0 <TIM_Base_SetConfig+0x38>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a36      	ldr	r2, [pc, #216]	@ (8003cbc <TIM_Base_SetConfig+0x104>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_Base_SetConfig+0x38>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a35      	ldr	r2, [pc, #212]	@ (8003cc0 <TIM_Base_SetConfig+0x108>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d108      	bne.n	8003c02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb4 <TIM_Base_SetConfig+0xfc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01b      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c10:	d017      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a28      	ldr	r2, [pc, #160]	@ (8003cb8 <TIM_Base_SetConfig+0x100>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a27      	ldr	r2, [pc, #156]	@ (8003cbc <TIM_Base_SetConfig+0x104>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00f      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a26      	ldr	r2, [pc, #152]	@ (8003cc0 <TIM_Base_SetConfig+0x108>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00b      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a25      	ldr	r2, [pc, #148]	@ (8003cc4 <TIM_Base_SetConfig+0x10c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a24      	ldr	r2, [pc, #144]	@ (8003cc8 <TIM_Base_SetConfig+0x110>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_Base_SetConfig+0x8a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a23      	ldr	r2, [pc, #140]	@ (8003ccc <TIM_Base_SetConfig+0x114>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d108      	bne.n	8003c54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8003cb4 <TIM_Base_SetConfig+0xfc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d103      	bne.n	8003c88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d105      	bne.n	8003ca6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f023 0201 	bic.w	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	611a      	str	r2, [r3, #16]
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40000800 	.word	0x40000800
 8003cc0:	40000c00 	.word	0x40000c00
 8003cc4:	40014000 	.word	0x40014000
 8003cc8:	40014400 	.word	0x40014400
 8003ccc:	40014800 	.word	0x40014800

08003cd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	f023 0201 	bic.w	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f023 030a 	bic.w	r3, r3, #10
 8003d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b087      	sub	sp, #28
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	f023 0210 	bic.w	r2, r3, #16
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	031b      	lsls	r3, r3, #12
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	621a      	str	r2, [r3, #32]
}
 8003d82:	bf00      	nop
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b085      	sub	sp, #20
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f043 0307 	orr.w	r3, r3, #7
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	609a      	str	r2, [r3, #8]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	021a      	lsls	r2, r3, #8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	2201      	movs	r2, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1a      	ldr	r2, [r3, #32]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1a      	ldr	r2, [r3, #32]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e050      	b.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d018      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb4:	d013      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a18      	ldr	r2, [pc, #96]	@ (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a16      	ldr	r2, [pc, #88]	@ (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a15      	ldr	r2, [pc, #84]	@ (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a13      	ldr	r2, [pc, #76]	@ (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d10c      	bne.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40010000 	.word	0x40010000
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40000800 	.word	0x40000800
 8003f24:	40000c00 	.word	0x40000c00
 8003f28:	40014000 	.word	0x40014000

08003f2c <__cvt>:
 8003f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f30:	ec57 6b10 	vmov	r6, r7, d0
 8003f34:	2f00      	cmp	r7, #0
 8003f36:	460c      	mov	r4, r1
 8003f38:	4619      	mov	r1, r3
 8003f3a:	463b      	mov	r3, r7
 8003f3c:	bfbb      	ittet	lt
 8003f3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003f42:	461f      	movlt	r7, r3
 8003f44:	2300      	movge	r3, #0
 8003f46:	232d      	movlt	r3, #45	@ 0x2d
 8003f48:	700b      	strb	r3, [r1, #0]
 8003f4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003f50:	4691      	mov	r9, r2
 8003f52:	f023 0820 	bic.w	r8, r3, #32
 8003f56:	bfbc      	itt	lt
 8003f58:	4632      	movlt	r2, r6
 8003f5a:	4616      	movlt	r6, r2
 8003f5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f60:	d005      	beq.n	8003f6e <__cvt+0x42>
 8003f62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003f66:	d100      	bne.n	8003f6a <__cvt+0x3e>
 8003f68:	3401      	adds	r4, #1
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	e000      	b.n	8003f70 <__cvt+0x44>
 8003f6e:	2103      	movs	r1, #3
 8003f70:	ab03      	add	r3, sp, #12
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	ab02      	add	r3, sp, #8
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	ec47 6b10 	vmov	d0, r6, r7
 8003f7c:	4653      	mov	r3, sl
 8003f7e:	4622      	mov	r2, r4
 8003f80:	f001 f876 	bl	8005070 <_dtoa_r>
 8003f84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003f88:	4605      	mov	r5, r0
 8003f8a:	d119      	bne.n	8003fc0 <__cvt+0x94>
 8003f8c:	f019 0f01 	tst.w	r9, #1
 8003f90:	d00e      	beq.n	8003fb0 <__cvt+0x84>
 8003f92:	eb00 0904 	add.w	r9, r0, r4
 8003f96:	2200      	movs	r2, #0
 8003f98:	2300      	movs	r3, #0
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	4639      	mov	r1, r7
 8003f9e:	f7fc fd9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fa2:	b108      	cbz	r0, 8003fa8 <__cvt+0x7c>
 8003fa4:	f8cd 900c 	str.w	r9, [sp, #12]
 8003fa8:	2230      	movs	r2, #48	@ 0x30
 8003faa:	9b03      	ldr	r3, [sp, #12]
 8003fac:	454b      	cmp	r3, r9
 8003fae:	d31e      	bcc.n	8003fee <__cvt+0xc2>
 8003fb0:	9b03      	ldr	r3, [sp, #12]
 8003fb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003fb4:	1b5b      	subs	r3, r3, r5
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	b004      	add	sp, #16
 8003fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003fc4:	eb00 0904 	add.w	r9, r0, r4
 8003fc8:	d1e5      	bne.n	8003f96 <__cvt+0x6a>
 8003fca:	7803      	ldrb	r3, [r0, #0]
 8003fcc:	2b30      	cmp	r3, #48	@ 0x30
 8003fce:	d10a      	bne.n	8003fe6 <__cvt+0xba>
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	4639      	mov	r1, r7
 8003fd8:	f7fc fd7e 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fdc:	b918      	cbnz	r0, 8003fe6 <__cvt+0xba>
 8003fde:	f1c4 0401 	rsb	r4, r4, #1
 8003fe2:	f8ca 4000 	str.w	r4, [sl]
 8003fe6:	f8da 3000 	ldr.w	r3, [sl]
 8003fea:	4499      	add	r9, r3
 8003fec:	e7d3      	b.n	8003f96 <__cvt+0x6a>
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	9103      	str	r1, [sp, #12]
 8003ff2:	701a      	strb	r2, [r3, #0]
 8003ff4:	e7d9      	b.n	8003faa <__cvt+0x7e>

08003ff6 <__exponent>:
 8003ff6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ff8:	2900      	cmp	r1, #0
 8003ffa:	bfba      	itte	lt
 8003ffc:	4249      	neglt	r1, r1
 8003ffe:	232d      	movlt	r3, #45	@ 0x2d
 8004000:	232b      	movge	r3, #43	@ 0x2b
 8004002:	2909      	cmp	r1, #9
 8004004:	7002      	strb	r2, [r0, #0]
 8004006:	7043      	strb	r3, [r0, #1]
 8004008:	dd29      	ble.n	800405e <__exponent+0x68>
 800400a:	f10d 0307 	add.w	r3, sp, #7
 800400e:	461d      	mov	r5, r3
 8004010:	270a      	movs	r7, #10
 8004012:	461a      	mov	r2, r3
 8004014:	fbb1 f6f7 	udiv	r6, r1, r7
 8004018:	fb07 1416 	mls	r4, r7, r6, r1
 800401c:	3430      	adds	r4, #48	@ 0x30
 800401e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004022:	460c      	mov	r4, r1
 8004024:	2c63      	cmp	r4, #99	@ 0x63
 8004026:	f103 33ff 	add.w	r3, r3, #4294967295
 800402a:	4631      	mov	r1, r6
 800402c:	dcf1      	bgt.n	8004012 <__exponent+0x1c>
 800402e:	3130      	adds	r1, #48	@ 0x30
 8004030:	1e94      	subs	r4, r2, #2
 8004032:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004036:	1c41      	adds	r1, r0, #1
 8004038:	4623      	mov	r3, r4
 800403a:	42ab      	cmp	r3, r5
 800403c:	d30a      	bcc.n	8004054 <__exponent+0x5e>
 800403e:	f10d 0309 	add.w	r3, sp, #9
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	42ac      	cmp	r4, r5
 8004046:	bf88      	it	hi
 8004048:	2300      	movhi	r3, #0
 800404a:	3302      	adds	r3, #2
 800404c:	4403      	add	r3, r0
 800404e:	1a18      	subs	r0, r3, r0
 8004050:	b003      	add	sp, #12
 8004052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004054:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004058:	f801 6f01 	strb.w	r6, [r1, #1]!
 800405c:	e7ed      	b.n	800403a <__exponent+0x44>
 800405e:	2330      	movs	r3, #48	@ 0x30
 8004060:	3130      	adds	r1, #48	@ 0x30
 8004062:	7083      	strb	r3, [r0, #2]
 8004064:	70c1      	strb	r1, [r0, #3]
 8004066:	1d03      	adds	r3, r0, #4
 8004068:	e7f1      	b.n	800404e <__exponent+0x58>
	...

0800406c <_printf_float>:
 800406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004070:	b08d      	sub	sp, #52	@ 0x34
 8004072:	460c      	mov	r4, r1
 8004074:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004078:	4616      	mov	r6, r2
 800407a:	461f      	mov	r7, r3
 800407c:	4605      	mov	r5, r0
 800407e:	f000 feef 	bl	8004e60 <_localeconv_r>
 8004082:	6803      	ldr	r3, [r0, #0]
 8004084:	9304      	str	r3, [sp, #16]
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc f8fa 	bl	8000280 <strlen>
 800408c:	2300      	movs	r3, #0
 800408e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004090:	f8d8 3000 	ldr.w	r3, [r8]
 8004094:	9005      	str	r0, [sp, #20]
 8004096:	3307      	adds	r3, #7
 8004098:	f023 0307 	bic.w	r3, r3, #7
 800409c:	f103 0208 	add.w	r2, r3, #8
 80040a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80040a4:	f8d4 b000 	ldr.w	fp, [r4]
 80040a8:	f8c8 2000 	str.w	r2, [r8]
 80040ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80040b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80040b4:	9307      	str	r3, [sp, #28]
 80040b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80040ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80040be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040c2:	4b9c      	ldr	r3, [pc, #624]	@ (8004334 <_printf_float+0x2c8>)
 80040c4:	f04f 32ff 	mov.w	r2, #4294967295
 80040c8:	f7fc fd38 	bl	8000b3c <__aeabi_dcmpun>
 80040cc:	bb70      	cbnz	r0, 800412c <_printf_float+0xc0>
 80040ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040d2:	4b98      	ldr	r3, [pc, #608]	@ (8004334 <_printf_float+0x2c8>)
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295
 80040d8:	f7fc fd12 	bl	8000b00 <__aeabi_dcmple>
 80040dc:	bb30      	cbnz	r0, 800412c <_printf_float+0xc0>
 80040de:	2200      	movs	r2, #0
 80040e0:	2300      	movs	r3, #0
 80040e2:	4640      	mov	r0, r8
 80040e4:	4649      	mov	r1, r9
 80040e6:	f7fc fd01 	bl	8000aec <__aeabi_dcmplt>
 80040ea:	b110      	cbz	r0, 80040f2 <_printf_float+0x86>
 80040ec:	232d      	movs	r3, #45	@ 0x2d
 80040ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040f2:	4a91      	ldr	r2, [pc, #580]	@ (8004338 <_printf_float+0x2cc>)
 80040f4:	4b91      	ldr	r3, [pc, #580]	@ (800433c <_printf_float+0x2d0>)
 80040f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80040fa:	bf94      	ite	ls
 80040fc:	4690      	movls	r8, r2
 80040fe:	4698      	movhi	r8, r3
 8004100:	2303      	movs	r3, #3
 8004102:	6123      	str	r3, [r4, #16]
 8004104:	f02b 0304 	bic.w	r3, fp, #4
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	f04f 0900 	mov.w	r9, #0
 800410e:	9700      	str	r7, [sp, #0]
 8004110:	4633      	mov	r3, r6
 8004112:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004114:	4621      	mov	r1, r4
 8004116:	4628      	mov	r0, r5
 8004118:	f000 f9d2 	bl	80044c0 <_printf_common>
 800411c:	3001      	adds	r0, #1
 800411e:	f040 808d 	bne.w	800423c <_printf_float+0x1d0>
 8004122:	f04f 30ff 	mov.w	r0, #4294967295
 8004126:	b00d      	add	sp, #52	@ 0x34
 8004128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412c:	4642      	mov	r2, r8
 800412e:	464b      	mov	r3, r9
 8004130:	4640      	mov	r0, r8
 8004132:	4649      	mov	r1, r9
 8004134:	f7fc fd02 	bl	8000b3c <__aeabi_dcmpun>
 8004138:	b140      	cbz	r0, 800414c <_printf_float+0xe0>
 800413a:	464b      	mov	r3, r9
 800413c:	2b00      	cmp	r3, #0
 800413e:	bfbc      	itt	lt
 8004140:	232d      	movlt	r3, #45	@ 0x2d
 8004142:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004146:	4a7e      	ldr	r2, [pc, #504]	@ (8004340 <_printf_float+0x2d4>)
 8004148:	4b7e      	ldr	r3, [pc, #504]	@ (8004344 <_printf_float+0x2d8>)
 800414a:	e7d4      	b.n	80040f6 <_printf_float+0x8a>
 800414c:	6863      	ldr	r3, [r4, #4]
 800414e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004152:	9206      	str	r2, [sp, #24]
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	d13b      	bne.n	80041d0 <_printf_float+0x164>
 8004158:	2306      	movs	r3, #6
 800415a:	6063      	str	r3, [r4, #4]
 800415c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004160:	2300      	movs	r3, #0
 8004162:	6022      	str	r2, [r4, #0]
 8004164:	9303      	str	r3, [sp, #12]
 8004166:	ab0a      	add	r3, sp, #40	@ 0x28
 8004168:	e9cd a301 	strd	sl, r3, [sp, #4]
 800416c:	ab09      	add	r3, sp, #36	@ 0x24
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	6861      	ldr	r1, [r4, #4]
 8004172:	ec49 8b10 	vmov	d0, r8, r9
 8004176:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800417a:	4628      	mov	r0, r5
 800417c:	f7ff fed6 	bl	8003f2c <__cvt>
 8004180:	9b06      	ldr	r3, [sp, #24]
 8004182:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004184:	2b47      	cmp	r3, #71	@ 0x47
 8004186:	4680      	mov	r8, r0
 8004188:	d129      	bne.n	80041de <_printf_float+0x172>
 800418a:	1cc8      	adds	r0, r1, #3
 800418c:	db02      	blt.n	8004194 <_printf_float+0x128>
 800418e:	6863      	ldr	r3, [r4, #4]
 8004190:	4299      	cmp	r1, r3
 8004192:	dd41      	ble.n	8004218 <_printf_float+0x1ac>
 8004194:	f1aa 0a02 	sub.w	sl, sl, #2
 8004198:	fa5f fa8a 	uxtb.w	sl, sl
 800419c:	3901      	subs	r1, #1
 800419e:	4652      	mov	r2, sl
 80041a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80041a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80041a6:	f7ff ff26 	bl	8003ff6 <__exponent>
 80041aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041ac:	1813      	adds	r3, r2, r0
 80041ae:	2a01      	cmp	r2, #1
 80041b0:	4681      	mov	r9, r0
 80041b2:	6123      	str	r3, [r4, #16]
 80041b4:	dc02      	bgt.n	80041bc <_printf_float+0x150>
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	07d2      	lsls	r2, r2, #31
 80041ba:	d501      	bpl.n	80041c0 <_printf_float+0x154>
 80041bc:	3301      	adds	r3, #1
 80041be:	6123      	str	r3, [r4, #16]
 80041c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0a2      	beq.n	800410e <_printf_float+0xa2>
 80041c8:	232d      	movs	r3, #45	@ 0x2d
 80041ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041ce:	e79e      	b.n	800410e <_printf_float+0xa2>
 80041d0:	9a06      	ldr	r2, [sp, #24]
 80041d2:	2a47      	cmp	r2, #71	@ 0x47
 80041d4:	d1c2      	bne.n	800415c <_printf_float+0xf0>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1c0      	bne.n	800415c <_printf_float+0xf0>
 80041da:	2301      	movs	r3, #1
 80041dc:	e7bd      	b.n	800415a <_printf_float+0xee>
 80041de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80041e2:	d9db      	bls.n	800419c <_printf_float+0x130>
 80041e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80041e8:	d118      	bne.n	800421c <_printf_float+0x1b0>
 80041ea:	2900      	cmp	r1, #0
 80041ec:	6863      	ldr	r3, [r4, #4]
 80041ee:	dd0b      	ble.n	8004208 <_printf_float+0x19c>
 80041f0:	6121      	str	r1, [r4, #16]
 80041f2:	b913      	cbnz	r3, 80041fa <_printf_float+0x18e>
 80041f4:	6822      	ldr	r2, [r4, #0]
 80041f6:	07d0      	lsls	r0, r2, #31
 80041f8:	d502      	bpl.n	8004200 <_printf_float+0x194>
 80041fa:	3301      	adds	r3, #1
 80041fc:	440b      	add	r3, r1
 80041fe:	6123      	str	r3, [r4, #16]
 8004200:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004202:	f04f 0900 	mov.w	r9, #0
 8004206:	e7db      	b.n	80041c0 <_printf_float+0x154>
 8004208:	b913      	cbnz	r3, 8004210 <_printf_float+0x1a4>
 800420a:	6822      	ldr	r2, [r4, #0]
 800420c:	07d2      	lsls	r2, r2, #31
 800420e:	d501      	bpl.n	8004214 <_printf_float+0x1a8>
 8004210:	3302      	adds	r3, #2
 8004212:	e7f4      	b.n	80041fe <_printf_float+0x192>
 8004214:	2301      	movs	r3, #1
 8004216:	e7f2      	b.n	80041fe <_printf_float+0x192>
 8004218:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800421c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800421e:	4299      	cmp	r1, r3
 8004220:	db05      	blt.n	800422e <_printf_float+0x1c2>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	6121      	str	r1, [r4, #16]
 8004226:	07d8      	lsls	r0, r3, #31
 8004228:	d5ea      	bpl.n	8004200 <_printf_float+0x194>
 800422a:	1c4b      	adds	r3, r1, #1
 800422c:	e7e7      	b.n	80041fe <_printf_float+0x192>
 800422e:	2900      	cmp	r1, #0
 8004230:	bfd4      	ite	le
 8004232:	f1c1 0202 	rsble	r2, r1, #2
 8004236:	2201      	movgt	r2, #1
 8004238:	4413      	add	r3, r2
 800423a:	e7e0      	b.n	80041fe <_printf_float+0x192>
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	055a      	lsls	r2, r3, #21
 8004240:	d407      	bmi.n	8004252 <_printf_float+0x1e6>
 8004242:	6923      	ldr	r3, [r4, #16]
 8004244:	4642      	mov	r2, r8
 8004246:	4631      	mov	r1, r6
 8004248:	4628      	mov	r0, r5
 800424a:	47b8      	blx	r7
 800424c:	3001      	adds	r0, #1
 800424e:	d12b      	bne.n	80042a8 <_printf_float+0x23c>
 8004250:	e767      	b.n	8004122 <_printf_float+0xb6>
 8004252:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004256:	f240 80dd 	bls.w	8004414 <_printf_float+0x3a8>
 800425a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800425e:	2200      	movs	r2, #0
 8004260:	2300      	movs	r3, #0
 8004262:	f7fc fc39 	bl	8000ad8 <__aeabi_dcmpeq>
 8004266:	2800      	cmp	r0, #0
 8004268:	d033      	beq.n	80042d2 <_printf_float+0x266>
 800426a:	4a37      	ldr	r2, [pc, #220]	@ (8004348 <_printf_float+0x2dc>)
 800426c:	2301      	movs	r3, #1
 800426e:	4631      	mov	r1, r6
 8004270:	4628      	mov	r0, r5
 8004272:	47b8      	blx	r7
 8004274:	3001      	adds	r0, #1
 8004276:	f43f af54 	beq.w	8004122 <_printf_float+0xb6>
 800427a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800427e:	4543      	cmp	r3, r8
 8004280:	db02      	blt.n	8004288 <_printf_float+0x21c>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	07d8      	lsls	r0, r3, #31
 8004286:	d50f      	bpl.n	80042a8 <_printf_float+0x23c>
 8004288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800428c:	4631      	mov	r1, r6
 800428e:	4628      	mov	r0, r5
 8004290:	47b8      	blx	r7
 8004292:	3001      	adds	r0, #1
 8004294:	f43f af45 	beq.w	8004122 <_printf_float+0xb6>
 8004298:	f04f 0900 	mov.w	r9, #0
 800429c:	f108 38ff 	add.w	r8, r8, #4294967295
 80042a0:	f104 0a1a 	add.w	sl, r4, #26
 80042a4:	45c8      	cmp	r8, r9
 80042a6:	dc09      	bgt.n	80042bc <_printf_float+0x250>
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	079b      	lsls	r3, r3, #30
 80042ac:	f100 8103 	bmi.w	80044b6 <_printf_float+0x44a>
 80042b0:	68e0      	ldr	r0, [r4, #12]
 80042b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042b4:	4298      	cmp	r0, r3
 80042b6:	bfb8      	it	lt
 80042b8:	4618      	movlt	r0, r3
 80042ba:	e734      	b.n	8004126 <_printf_float+0xba>
 80042bc:	2301      	movs	r3, #1
 80042be:	4652      	mov	r2, sl
 80042c0:	4631      	mov	r1, r6
 80042c2:	4628      	mov	r0, r5
 80042c4:	47b8      	blx	r7
 80042c6:	3001      	adds	r0, #1
 80042c8:	f43f af2b 	beq.w	8004122 <_printf_float+0xb6>
 80042cc:	f109 0901 	add.w	r9, r9, #1
 80042d0:	e7e8      	b.n	80042a4 <_printf_float+0x238>
 80042d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	dc39      	bgt.n	800434c <_printf_float+0x2e0>
 80042d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004348 <_printf_float+0x2dc>)
 80042da:	2301      	movs	r3, #1
 80042dc:	4631      	mov	r1, r6
 80042de:	4628      	mov	r0, r5
 80042e0:	47b8      	blx	r7
 80042e2:	3001      	adds	r0, #1
 80042e4:	f43f af1d 	beq.w	8004122 <_printf_float+0xb6>
 80042e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80042ec:	ea59 0303 	orrs.w	r3, r9, r3
 80042f0:	d102      	bne.n	80042f8 <_printf_float+0x28c>
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	07d9      	lsls	r1, r3, #31
 80042f6:	d5d7      	bpl.n	80042a8 <_printf_float+0x23c>
 80042f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042fc:	4631      	mov	r1, r6
 80042fe:	4628      	mov	r0, r5
 8004300:	47b8      	blx	r7
 8004302:	3001      	adds	r0, #1
 8004304:	f43f af0d 	beq.w	8004122 <_printf_float+0xb6>
 8004308:	f04f 0a00 	mov.w	sl, #0
 800430c:	f104 0b1a 	add.w	fp, r4, #26
 8004310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004312:	425b      	negs	r3, r3
 8004314:	4553      	cmp	r3, sl
 8004316:	dc01      	bgt.n	800431c <_printf_float+0x2b0>
 8004318:	464b      	mov	r3, r9
 800431a:	e793      	b.n	8004244 <_printf_float+0x1d8>
 800431c:	2301      	movs	r3, #1
 800431e:	465a      	mov	r2, fp
 8004320:	4631      	mov	r1, r6
 8004322:	4628      	mov	r0, r5
 8004324:	47b8      	blx	r7
 8004326:	3001      	adds	r0, #1
 8004328:	f43f aefb 	beq.w	8004122 <_printf_float+0xb6>
 800432c:	f10a 0a01 	add.w	sl, sl, #1
 8004330:	e7ee      	b.n	8004310 <_printf_float+0x2a4>
 8004332:	bf00      	nop
 8004334:	7fefffff 	.word	0x7fefffff
 8004338:	080086b0 	.word	0x080086b0
 800433c:	080086b4 	.word	0x080086b4
 8004340:	080086b8 	.word	0x080086b8
 8004344:	080086bc 	.word	0x080086bc
 8004348:	080086c0 	.word	0x080086c0
 800434c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800434e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004352:	4553      	cmp	r3, sl
 8004354:	bfa8      	it	ge
 8004356:	4653      	movge	r3, sl
 8004358:	2b00      	cmp	r3, #0
 800435a:	4699      	mov	r9, r3
 800435c:	dc36      	bgt.n	80043cc <_printf_float+0x360>
 800435e:	f04f 0b00 	mov.w	fp, #0
 8004362:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004366:	f104 021a 	add.w	r2, r4, #26
 800436a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800436c:	9306      	str	r3, [sp, #24]
 800436e:	eba3 0309 	sub.w	r3, r3, r9
 8004372:	455b      	cmp	r3, fp
 8004374:	dc31      	bgt.n	80043da <_printf_float+0x36e>
 8004376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004378:	459a      	cmp	sl, r3
 800437a:	dc3a      	bgt.n	80043f2 <_printf_float+0x386>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	07da      	lsls	r2, r3, #31
 8004380:	d437      	bmi.n	80043f2 <_printf_float+0x386>
 8004382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004384:	ebaa 0903 	sub.w	r9, sl, r3
 8004388:	9b06      	ldr	r3, [sp, #24]
 800438a:	ebaa 0303 	sub.w	r3, sl, r3
 800438e:	4599      	cmp	r9, r3
 8004390:	bfa8      	it	ge
 8004392:	4699      	movge	r9, r3
 8004394:	f1b9 0f00 	cmp.w	r9, #0
 8004398:	dc33      	bgt.n	8004402 <_printf_float+0x396>
 800439a:	f04f 0800 	mov.w	r8, #0
 800439e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043a2:	f104 0b1a 	add.w	fp, r4, #26
 80043a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043a8:	ebaa 0303 	sub.w	r3, sl, r3
 80043ac:	eba3 0309 	sub.w	r3, r3, r9
 80043b0:	4543      	cmp	r3, r8
 80043b2:	f77f af79 	ble.w	80042a8 <_printf_float+0x23c>
 80043b6:	2301      	movs	r3, #1
 80043b8:	465a      	mov	r2, fp
 80043ba:	4631      	mov	r1, r6
 80043bc:	4628      	mov	r0, r5
 80043be:	47b8      	blx	r7
 80043c0:	3001      	adds	r0, #1
 80043c2:	f43f aeae 	beq.w	8004122 <_printf_float+0xb6>
 80043c6:	f108 0801 	add.w	r8, r8, #1
 80043ca:	e7ec      	b.n	80043a6 <_printf_float+0x33a>
 80043cc:	4642      	mov	r2, r8
 80043ce:	4631      	mov	r1, r6
 80043d0:	4628      	mov	r0, r5
 80043d2:	47b8      	blx	r7
 80043d4:	3001      	adds	r0, #1
 80043d6:	d1c2      	bne.n	800435e <_printf_float+0x2f2>
 80043d8:	e6a3      	b.n	8004122 <_printf_float+0xb6>
 80043da:	2301      	movs	r3, #1
 80043dc:	4631      	mov	r1, r6
 80043de:	4628      	mov	r0, r5
 80043e0:	9206      	str	r2, [sp, #24]
 80043e2:	47b8      	blx	r7
 80043e4:	3001      	adds	r0, #1
 80043e6:	f43f ae9c 	beq.w	8004122 <_printf_float+0xb6>
 80043ea:	9a06      	ldr	r2, [sp, #24]
 80043ec:	f10b 0b01 	add.w	fp, fp, #1
 80043f0:	e7bb      	b.n	800436a <_printf_float+0x2fe>
 80043f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043f6:	4631      	mov	r1, r6
 80043f8:	4628      	mov	r0, r5
 80043fa:	47b8      	blx	r7
 80043fc:	3001      	adds	r0, #1
 80043fe:	d1c0      	bne.n	8004382 <_printf_float+0x316>
 8004400:	e68f      	b.n	8004122 <_printf_float+0xb6>
 8004402:	9a06      	ldr	r2, [sp, #24]
 8004404:	464b      	mov	r3, r9
 8004406:	4442      	add	r2, r8
 8004408:	4631      	mov	r1, r6
 800440a:	4628      	mov	r0, r5
 800440c:	47b8      	blx	r7
 800440e:	3001      	adds	r0, #1
 8004410:	d1c3      	bne.n	800439a <_printf_float+0x32e>
 8004412:	e686      	b.n	8004122 <_printf_float+0xb6>
 8004414:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004418:	f1ba 0f01 	cmp.w	sl, #1
 800441c:	dc01      	bgt.n	8004422 <_printf_float+0x3b6>
 800441e:	07db      	lsls	r3, r3, #31
 8004420:	d536      	bpl.n	8004490 <_printf_float+0x424>
 8004422:	2301      	movs	r3, #1
 8004424:	4642      	mov	r2, r8
 8004426:	4631      	mov	r1, r6
 8004428:	4628      	mov	r0, r5
 800442a:	47b8      	blx	r7
 800442c:	3001      	adds	r0, #1
 800442e:	f43f ae78 	beq.w	8004122 <_printf_float+0xb6>
 8004432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004436:	4631      	mov	r1, r6
 8004438:	4628      	mov	r0, r5
 800443a:	47b8      	blx	r7
 800443c:	3001      	adds	r0, #1
 800443e:	f43f ae70 	beq.w	8004122 <_printf_float+0xb6>
 8004442:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004446:	2200      	movs	r2, #0
 8004448:	2300      	movs	r3, #0
 800444a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800444e:	f7fc fb43 	bl	8000ad8 <__aeabi_dcmpeq>
 8004452:	b9c0      	cbnz	r0, 8004486 <_printf_float+0x41a>
 8004454:	4653      	mov	r3, sl
 8004456:	f108 0201 	add.w	r2, r8, #1
 800445a:	4631      	mov	r1, r6
 800445c:	4628      	mov	r0, r5
 800445e:	47b8      	blx	r7
 8004460:	3001      	adds	r0, #1
 8004462:	d10c      	bne.n	800447e <_printf_float+0x412>
 8004464:	e65d      	b.n	8004122 <_printf_float+0xb6>
 8004466:	2301      	movs	r3, #1
 8004468:	465a      	mov	r2, fp
 800446a:	4631      	mov	r1, r6
 800446c:	4628      	mov	r0, r5
 800446e:	47b8      	blx	r7
 8004470:	3001      	adds	r0, #1
 8004472:	f43f ae56 	beq.w	8004122 <_printf_float+0xb6>
 8004476:	f108 0801 	add.w	r8, r8, #1
 800447a:	45d0      	cmp	r8, sl
 800447c:	dbf3      	blt.n	8004466 <_printf_float+0x3fa>
 800447e:	464b      	mov	r3, r9
 8004480:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004484:	e6df      	b.n	8004246 <_printf_float+0x1da>
 8004486:	f04f 0800 	mov.w	r8, #0
 800448a:	f104 0b1a 	add.w	fp, r4, #26
 800448e:	e7f4      	b.n	800447a <_printf_float+0x40e>
 8004490:	2301      	movs	r3, #1
 8004492:	4642      	mov	r2, r8
 8004494:	e7e1      	b.n	800445a <_printf_float+0x3ee>
 8004496:	2301      	movs	r3, #1
 8004498:	464a      	mov	r2, r9
 800449a:	4631      	mov	r1, r6
 800449c:	4628      	mov	r0, r5
 800449e:	47b8      	blx	r7
 80044a0:	3001      	adds	r0, #1
 80044a2:	f43f ae3e 	beq.w	8004122 <_printf_float+0xb6>
 80044a6:	f108 0801 	add.w	r8, r8, #1
 80044aa:	68e3      	ldr	r3, [r4, #12]
 80044ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80044ae:	1a5b      	subs	r3, r3, r1
 80044b0:	4543      	cmp	r3, r8
 80044b2:	dcf0      	bgt.n	8004496 <_printf_float+0x42a>
 80044b4:	e6fc      	b.n	80042b0 <_printf_float+0x244>
 80044b6:	f04f 0800 	mov.w	r8, #0
 80044ba:	f104 0919 	add.w	r9, r4, #25
 80044be:	e7f4      	b.n	80044aa <_printf_float+0x43e>

080044c0 <_printf_common>:
 80044c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c4:	4616      	mov	r6, r2
 80044c6:	4698      	mov	r8, r3
 80044c8:	688a      	ldr	r2, [r1, #8]
 80044ca:	690b      	ldr	r3, [r1, #16]
 80044cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044d0:	4293      	cmp	r3, r2
 80044d2:	bfb8      	it	lt
 80044d4:	4613      	movlt	r3, r2
 80044d6:	6033      	str	r3, [r6, #0]
 80044d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044dc:	4607      	mov	r7, r0
 80044de:	460c      	mov	r4, r1
 80044e0:	b10a      	cbz	r2, 80044e6 <_printf_common+0x26>
 80044e2:	3301      	adds	r3, #1
 80044e4:	6033      	str	r3, [r6, #0]
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	0699      	lsls	r1, r3, #26
 80044ea:	bf42      	ittt	mi
 80044ec:	6833      	ldrmi	r3, [r6, #0]
 80044ee:	3302      	addmi	r3, #2
 80044f0:	6033      	strmi	r3, [r6, #0]
 80044f2:	6825      	ldr	r5, [r4, #0]
 80044f4:	f015 0506 	ands.w	r5, r5, #6
 80044f8:	d106      	bne.n	8004508 <_printf_common+0x48>
 80044fa:	f104 0a19 	add.w	sl, r4, #25
 80044fe:	68e3      	ldr	r3, [r4, #12]
 8004500:	6832      	ldr	r2, [r6, #0]
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	42ab      	cmp	r3, r5
 8004506:	dc26      	bgt.n	8004556 <_printf_common+0x96>
 8004508:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800450c:	6822      	ldr	r2, [r4, #0]
 800450e:	3b00      	subs	r3, #0
 8004510:	bf18      	it	ne
 8004512:	2301      	movne	r3, #1
 8004514:	0692      	lsls	r2, r2, #26
 8004516:	d42b      	bmi.n	8004570 <_printf_common+0xb0>
 8004518:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800451c:	4641      	mov	r1, r8
 800451e:	4638      	mov	r0, r7
 8004520:	47c8      	blx	r9
 8004522:	3001      	adds	r0, #1
 8004524:	d01e      	beq.n	8004564 <_printf_common+0xa4>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	6922      	ldr	r2, [r4, #16]
 800452a:	f003 0306 	and.w	r3, r3, #6
 800452e:	2b04      	cmp	r3, #4
 8004530:	bf02      	ittt	eq
 8004532:	68e5      	ldreq	r5, [r4, #12]
 8004534:	6833      	ldreq	r3, [r6, #0]
 8004536:	1aed      	subeq	r5, r5, r3
 8004538:	68a3      	ldr	r3, [r4, #8]
 800453a:	bf0c      	ite	eq
 800453c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004540:	2500      	movne	r5, #0
 8004542:	4293      	cmp	r3, r2
 8004544:	bfc4      	itt	gt
 8004546:	1a9b      	subgt	r3, r3, r2
 8004548:	18ed      	addgt	r5, r5, r3
 800454a:	2600      	movs	r6, #0
 800454c:	341a      	adds	r4, #26
 800454e:	42b5      	cmp	r5, r6
 8004550:	d11a      	bne.n	8004588 <_printf_common+0xc8>
 8004552:	2000      	movs	r0, #0
 8004554:	e008      	b.n	8004568 <_printf_common+0xa8>
 8004556:	2301      	movs	r3, #1
 8004558:	4652      	mov	r2, sl
 800455a:	4641      	mov	r1, r8
 800455c:	4638      	mov	r0, r7
 800455e:	47c8      	blx	r9
 8004560:	3001      	adds	r0, #1
 8004562:	d103      	bne.n	800456c <_printf_common+0xac>
 8004564:	f04f 30ff 	mov.w	r0, #4294967295
 8004568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456c:	3501      	adds	r5, #1
 800456e:	e7c6      	b.n	80044fe <_printf_common+0x3e>
 8004570:	18e1      	adds	r1, r4, r3
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	2030      	movs	r0, #48	@ 0x30
 8004576:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800457a:	4422      	add	r2, r4
 800457c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004580:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004584:	3302      	adds	r3, #2
 8004586:	e7c7      	b.n	8004518 <_printf_common+0x58>
 8004588:	2301      	movs	r3, #1
 800458a:	4622      	mov	r2, r4
 800458c:	4641      	mov	r1, r8
 800458e:	4638      	mov	r0, r7
 8004590:	47c8      	blx	r9
 8004592:	3001      	adds	r0, #1
 8004594:	d0e6      	beq.n	8004564 <_printf_common+0xa4>
 8004596:	3601      	adds	r6, #1
 8004598:	e7d9      	b.n	800454e <_printf_common+0x8e>
	...

0800459c <_printf_i>:
 800459c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045a0:	7e0f      	ldrb	r7, [r1, #24]
 80045a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045a4:	2f78      	cmp	r7, #120	@ 0x78
 80045a6:	4691      	mov	r9, r2
 80045a8:	4680      	mov	r8, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	469a      	mov	sl, r3
 80045ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045b2:	d807      	bhi.n	80045c4 <_printf_i+0x28>
 80045b4:	2f62      	cmp	r7, #98	@ 0x62
 80045b6:	d80a      	bhi.n	80045ce <_printf_i+0x32>
 80045b8:	2f00      	cmp	r7, #0
 80045ba:	f000 80d2 	beq.w	8004762 <_printf_i+0x1c6>
 80045be:	2f58      	cmp	r7, #88	@ 0x58
 80045c0:	f000 80b9 	beq.w	8004736 <_printf_i+0x19a>
 80045c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045cc:	e03a      	b.n	8004644 <_printf_i+0xa8>
 80045ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045d2:	2b15      	cmp	r3, #21
 80045d4:	d8f6      	bhi.n	80045c4 <_printf_i+0x28>
 80045d6:	a101      	add	r1, pc, #4	@ (adr r1, 80045dc <_printf_i+0x40>)
 80045d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045dc:	08004635 	.word	0x08004635
 80045e0:	08004649 	.word	0x08004649
 80045e4:	080045c5 	.word	0x080045c5
 80045e8:	080045c5 	.word	0x080045c5
 80045ec:	080045c5 	.word	0x080045c5
 80045f0:	080045c5 	.word	0x080045c5
 80045f4:	08004649 	.word	0x08004649
 80045f8:	080045c5 	.word	0x080045c5
 80045fc:	080045c5 	.word	0x080045c5
 8004600:	080045c5 	.word	0x080045c5
 8004604:	080045c5 	.word	0x080045c5
 8004608:	08004749 	.word	0x08004749
 800460c:	08004673 	.word	0x08004673
 8004610:	08004703 	.word	0x08004703
 8004614:	080045c5 	.word	0x080045c5
 8004618:	080045c5 	.word	0x080045c5
 800461c:	0800476b 	.word	0x0800476b
 8004620:	080045c5 	.word	0x080045c5
 8004624:	08004673 	.word	0x08004673
 8004628:	080045c5 	.word	0x080045c5
 800462c:	080045c5 	.word	0x080045c5
 8004630:	0800470b 	.word	0x0800470b
 8004634:	6833      	ldr	r3, [r6, #0]
 8004636:	1d1a      	adds	r2, r3, #4
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6032      	str	r2, [r6, #0]
 800463c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004640:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004644:	2301      	movs	r3, #1
 8004646:	e09d      	b.n	8004784 <_printf_i+0x1e8>
 8004648:	6833      	ldr	r3, [r6, #0]
 800464a:	6820      	ldr	r0, [r4, #0]
 800464c:	1d19      	adds	r1, r3, #4
 800464e:	6031      	str	r1, [r6, #0]
 8004650:	0606      	lsls	r6, r0, #24
 8004652:	d501      	bpl.n	8004658 <_printf_i+0xbc>
 8004654:	681d      	ldr	r5, [r3, #0]
 8004656:	e003      	b.n	8004660 <_printf_i+0xc4>
 8004658:	0645      	lsls	r5, r0, #25
 800465a:	d5fb      	bpl.n	8004654 <_printf_i+0xb8>
 800465c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004660:	2d00      	cmp	r5, #0
 8004662:	da03      	bge.n	800466c <_printf_i+0xd0>
 8004664:	232d      	movs	r3, #45	@ 0x2d
 8004666:	426d      	negs	r5, r5
 8004668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800466c:	4859      	ldr	r0, [pc, #356]	@ (80047d4 <_printf_i+0x238>)
 800466e:	230a      	movs	r3, #10
 8004670:	e011      	b.n	8004696 <_printf_i+0xfa>
 8004672:	6821      	ldr	r1, [r4, #0]
 8004674:	6833      	ldr	r3, [r6, #0]
 8004676:	0608      	lsls	r0, r1, #24
 8004678:	f853 5b04 	ldr.w	r5, [r3], #4
 800467c:	d402      	bmi.n	8004684 <_printf_i+0xe8>
 800467e:	0649      	lsls	r1, r1, #25
 8004680:	bf48      	it	mi
 8004682:	b2ad      	uxthmi	r5, r5
 8004684:	2f6f      	cmp	r7, #111	@ 0x6f
 8004686:	4853      	ldr	r0, [pc, #332]	@ (80047d4 <_printf_i+0x238>)
 8004688:	6033      	str	r3, [r6, #0]
 800468a:	bf14      	ite	ne
 800468c:	230a      	movne	r3, #10
 800468e:	2308      	moveq	r3, #8
 8004690:	2100      	movs	r1, #0
 8004692:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004696:	6866      	ldr	r6, [r4, #4]
 8004698:	60a6      	str	r6, [r4, #8]
 800469a:	2e00      	cmp	r6, #0
 800469c:	bfa2      	ittt	ge
 800469e:	6821      	ldrge	r1, [r4, #0]
 80046a0:	f021 0104 	bicge.w	r1, r1, #4
 80046a4:	6021      	strge	r1, [r4, #0]
 80046a6:	b90d      	cbnz	r5, 80046ac <_printf_i+0x110>
 80046a8:	2e00      	cmp	r6, #0
 80046aa:	d04b      	beq.n	8004744 <_printf_i+0x1a8>
 80046ac:	4616      	mov	r6, r2
 80046ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80046b2:	fb03 5711 	mls	r7, r3, r1, r5
 80046b6:	5dc7      	ldrb	r7, [r0, r7]
 80046b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046bc:	462f      	mov	r7, r5
 80046be:	42bb      	cmp	r3, r7
 80046c0:	460d      	mov	r5, r1
 80046c2:	d9f4      	bls.n	80046ae <_printf_i+0x112>
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d10b      	bne.n	80046e0 <_printf_i+0x144>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	07df      	lsls	r7, r3, #31
 80046cc:	d508      	bpl.n	80046e0 <_printf_i+0x144>
 80046ce:	6923      	ldr	r3, [r4, #16]
 80046d0:	6861      	ldr	r1, [r4, #4]
 80046d2:	4299      	cmp	r1, r3
 80046d4:	bfde      	ittt	le
 80046d6:	2330      	movle	r3, #48	@ 0x30
 80046d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046e0:	1b92      	subs	r2, r2, r6
 80046e2:	6122      	str	r2, [r4, #16]
 80046e4:	f8cd a000 	str.w	sl, [sp]
 80046e8:	464b      	mov	r3, r9
 80046ea:	aa03      	add	r2, sp, #12
 80046ec:	4621      	mov	r1, r4
 80046ee:	4640      	mov	r0, r8
 80046f0:	f7ff fee6 	bl	80044c0 <_printf_common>
 80046f4:	3001      	adds	r0, #1
 80046f6:	d14a      	bne.n	800478e <_printf_i+0x1f2>
 80046f8:	f04f 30ff 	mov.w	r0, #4294967295
 80046fc:	b004      	add	sp, #16
 80046fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	f043 0320 	orr.w	r3, r3, #32
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	4833      	ldr	r0, [pc, #204]	@ (80047d8 <_printf_i+0x23c>)
 800470c:	2778      	movs	r7, #120	@ 0x78
 800470e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	6831      	ldr	r1, [r6, #0]
 8004716:	061f      	lsls	r7, r3, #24
 8004718:	f851 5b04 	ldr.w	r5, [r1], #4
 800471c:	d402      	bmi.n	8004724 <_printf_i+0x188>
 800471e:	065f      	lsls	r7, r3, #25
 8004720:	bf48      	it	mi
 8004722:	b2ad      	uxthmi	r5, r5
 8004724:	6031      	str	r1, [r6, #0]
 8004726:	07d9      	lsls	r1, r3, #31
 8004728:	bf44      	itt	mi
 800472a:	f043 0320 	orrmi.w	r3, r3, #32
 800472e:	6023      	strmi	r3, [r4, #0]
 8004730:	b11d      	cbz	r5, 800473a <_printf_i+0x19e>
 8004732:	2310      	movs	r3, #16
 8004734:	e7ac      	b.n	8004690 <_printf_i+0xf4>
 8004736:	4827      	ldr	r0, [pc, #156]	@ (80047d4 <_printf_i+0x238>)
 8004738:	e7e9      	b.n	800470e <_printf_i+0x172>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	f023 0320 	bic.w	r3, r3, #32
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	e7f6      	b.n	8004732 <_printf_i+0x196>
 8004744:	4616      	mov	r6, r2
 8004746:	e7bd      	b.n	80046c4 <_printf_i+0x128>
 8004748:	6833      	ldr	r3, [r6, #0]
 800474a:	6825      	ldr	r5, [r4, #0]
 800474c:	6961      	ldr	r1, [r4, #20]
 800474e:	1d18      	adds	r0, r3, #4
 8004750:	6030      	str	r0, [r6, #0]
 8004752:	062e      	lsls	r6, r5, #24
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	d501      	bpl.n	800475c <_printf_i+0x1c0>
 8004758:	6019      	str	r1, [r3, #0]
 800475a:	e002      	b.n	8004762 <_printf_i+0x1c6>
 800475c:	0668      	lsls	r0, r5, #25
 800475e:	d5fb      	bpl.n	8004758 <_printf_i+0x1bc>
 8004760:	8019      	strh	r1, [r3, #0]
 8004762:	2300      	movs	r3, #0
 8004764:	6123      	str	r3, [r4, #16]
 8004766:	4616      	mov	r6, r2
 8004768:	e7bc      	b.n	80046e4 <_printf_i+0x148>
 800476a:	6833      	ldr	r3, [r6, #0]
 800476c:	1d1a      	adds	r2, r3, #4
 800476e:	6032      	str	r2, [r6, #0]
 8004770:	681e      	ldr	r6, [r3, #0]
 8004772:	6862      	ldr	r2, [r4, #4]
 8004774:	2100      	movs	r1, #0
 8004776:	4630      	mov	r0, r6
 8004778:	f7fb fd32 	bl	80001e0 <memchr>
 800477c:	b108      	cbz	r0, 8004782 <_printf_i+0x1e6>
 800477e:	1b80      	subs	r0, r0, r6
 8004780:	6060      	str	r0, [r4, #4]
 8004782:	6863      	ldr	r3, [r4, #4]
 8004784:	6123      	str	r3, [r4, #16]
 8004786:	2300      	movs	r3, #0
 8004788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800478c:	e7aa      	b.n	80046e4 <_printf_i+0x148>
 800478e:	6923      	ldr	r3, [r4, #16]
 8004790:	4632      	mov	r2, r6
 8004792:	4649      	mov	r1, r9
 8004794:	4640      	mov	r0, r8
 8004796:	47d0      	blx	sl
 8004798:	3001      	adds	r0, #1
 800479a:	d0ad      	beq.n	80046f8 <_printf_i+0x15c>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	079b      	lsls	r3, r3, #30
 80047a0:	d413      	bmi.n	80047ca <_printf_i+0x22e>
 80047a2:	68e0      	ldr	r0, [r4, #12]
 80047a4:	9b03      	ldr	r3, [sp, #12]
 80047a6:	4298      	cmp	r0, r3
 80047a8:	bfb8      	it	lt
 80047aa:	4618      	movlt	r0, r3
 80047ac:	e7a6      	b.n	80046fc <_printf_i+0x160>
 80047ae:	2301      	movs	r3, #1
 80047b0:	4632      	mov	r2, r6
 80047b2:	4649      	mov	r1, r9
 80047b4:	4640      	mov	r0, r8
 80047b6:	47d0      	blx	sl
 80047b8:	3001      	adds	r0, #1
 80047ba:	d09d      	beq.n	80046f8 <_printf_i+0x15c>
 80047bc:	3501      	adds	r5, #1
 80047be:	68e3      	ldr	r3, [r4, #12]
 80047c0:	9903      	ldr	r1, [sp, #12]
 80047c2:	1a5b      	subs	r3, r3, r1
 80047c4:	42ab      	cmp	r3, r5
 80047c6:	dcf2      	bgt.n	80047ae <_printf_i+0x212>
 80047c8:	e7eb      	b.n	80047a2 <_printf_i+0x206>
 80047ca:	2500      	movs	r5, #0
 80047cc:	f104 0619 	add.w	r6, r4, #25
 80047d0:	e7f5      	b.n	80047be <_printf_i+0x222>
 80047d2:	bf00      	nop
 80047d4:	080086c2 	.word	0x080086c2
 80047d8:	080086d3 	.word	0x080086d3

080047dc <_scanf_float>:
 80047dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e0:	b087      	sub	sp, #28
 80047e2:	4617      	mov	r7, r2
 80047e4:	9303      	str	r3, [sp, #12]
 80047e6:	688b      	ldr	r3, [r1, #8]
 80047e8:	1e5a      	subs	r2, r3, #1
 80047ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80047ee:	bf81      	itttt	hi
 80047f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80047f4:	eb03 0b05 	addhi.w	fp, r3, r5
 80047f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80047fc:	608b      	strhi	r3, [r1, #8]
 80047fe:	680b      	ldr	r3, [r1, #0]
 8004800:	460a      	mov	r2, r1
 8004802:	f04f 0500 	mov.w	r5, #0
 8004806:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800480a:	f842 3b1c 	str.w	r3, [r2], #28
 800480e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004812:	4680      	mov	r8, r0
 8004814:	460c      	mov	r4, r1
 8004816:	bf98      	it	ls
 8004818:	f04f 0b00 	movls.w	fp, #0
 800481c:	9201      	str	r2, [sp, #4]
 800481e:	4616      	mov	r6, r2
 8004820:	46aa      	mov	sl, r5
 8004822:	46a9      	mov	r9, r5
 8004824:	9502      	str	r5, [sp, #8]
 8004826:	68a2      	ldr	r2, [r4, #8]
 8004828:	b152      	cbz	r2, 8004840 <_scanf_float+0x64>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004830:	d864      	bhi.n	80048fc <_scanf_float+0x120>
 8004832:	2b40      	cmp	r3, #64	@ 0x40
 8004834:	d83c      	bhi.n	80048b0 <_scanf_float+0xd4>
 8004836:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800483a:	b2c8      	uxtb	r0, r1
 800483c:	280e      	cmp	r0, #14
 800483e:	d93a      	bls.n	80048b6 <_scanf_float+0xda>
 8004840:	f1b9 0f00 	cmp.w	r9, #0
 8004844:	d003      	beq.n	800484e <_scanf_float+0x72>
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004852:	f1ba 0f01 	cmp.w	sl, #1
 8004856:	f200 8117 	bhi.w	8004a88 <_scanf_float+0x2ac>
 800485a:	9b01      	ldr	r3, [sp, #4]
 800485c:	429e      	cmp	r6, r3
 800485e:	f200 8108 	bhi.w	8004a72 <_scanf_float+0x296>
 8004862:	2001      	movs	r0, #1
 8004864:	b007      	add	sp, #28
 8004866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800486a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800486e:	2a0d      	cmp	r2, #13
 8004870:	d8e6      	bhi.n	8004840 <_scanf_float+0x64>
 8004872:	a101      	add	r1, pc, #4	@ (adr r1, 8004878 <_scanf_float+0x9c>)
 8004874:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004878:	080049bf 	.word	0x080049bf
 800487c:	08004841 	.word	0x08004841
 8004880:	08004841 	.word	0x08004841
 8004884:	08004841 	.word	0x08004841
 8004888:	08004a1f 	.word	0x08004a1f
 800488c:	080049f7 	.word	0x080049f7
 8004890:	08004841 	.word	0x08004841
 8004894:	08004841 	.word	0x08004841
 8004898:	080049cd 	.word	0x080049cd
 800489c:	08004841 	.word	0x08004841
 80048a0:	08004841 	.word	0x08004841
 80048a4:	08004841 	.word	0x08004841
 80048a8:	08004841 	.word	0x08004841
 80048ac:	08004985 	.word	0x08004985
 80048b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80048b4:	e7db      	b.n	800486e <_scanf_float+0x92>
 80048b6:	290e      	cmp	r1, #14
 80048b8:	d8c2      	bhi.n	8004840 <_scanf_float+0x64>
 80048ba:	a001      	add	r0, pc, #4	@ (adr r0, 80048c0 <_scanf_float+0xe4>)
 80048bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80048c0:	08004975 	.word	0x08004975
 80048c4:	08004841 	.word	0x08004841
 80048c8:	08004975 	.word	0x08004975
 80048cc:	08004a0b 	.word	0x08004a0b
 80048d0:	08004841 	.word	0x08004841
 80048d4:	0800491d 	.word	0x0800491d
 80048d8:	0800495b 	.word	0x0800495b
 80048dc:	0800495b 	.word	0x0800495b
 80048e0:	0800495b 	.word	0x0800495b
 80048e4:	0800495b 	.word	0x0800495b
 80048e8:	0800495b 	.word	0x0800495b
 80048ec:	0800495b 	.word	0x0800495b
 80048f0:	0800495b 	.word	0x0800495b
 80048f4:	0800495b 	.word	0x0800495b
 80048f8:	0800495b 	.word	0x0800495b
 80048fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80048fe:	d809      	bhi.n	8004914 <_scanf_float+0x138>
 8004900:	2b60      	cmp	r3, #96	@ 0x60
 8004902:	d8b2      	bhi.n	800486a <_scanf_float+0x8e>
 8004904:	2b54      	cmp	r3, #84	@ 0x54
 8004906:	d07b      	beq.n	8004a00 <_scanf_float+0x224>
 8004908:	2b59      	cmp	r3, #89	@ 0x59
 800490a:	d199      	bne.n	8004840 <_scanf_float+0x64>
 800490c:	2d07      	cmp	r5, #7
 800490e:	d197      	bne.n	8004840 <_scanf_float+0x64>
 8004910:	2508      	movs	r5, #8
 8004912:	e02c      	b.n	800496e <_scanf_float+0x192>
 8004914:	2b74      	cmp	r3, #116	@ 0x74
 8004916:	d073      	beq.n	8004a00 <_scanf_float+0x224>
 8004918:	2b79      	cmp	r3, #121	@ 0x79
 800491a:	e7f6      	b.n	800490a <_scanf_float+0x12e>
 800491c:	6821      	ldr	r1, [r4, #0]
 800491e:	05c8      	lsls	r0, r1, #23
 8004920:	d51b      	bpl.n	800495a <_scanf_float+0x17e>
 8004922:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004926:	6021      	str	r1, [r4, #0]
 8004928:	f109 0901 	add.w	r9, r9, #1
 800492c:	f1bb 0f00 	cmp.w	fp, #0
 8004930:	d003      	beq.n	800493a <_scanf_float+0x15e>
 8004932:	3201      	adds	r2, #1
 8004934:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004938:	60a2      	str	r2, [r4, #8]
 800493a:	68a3      	ldr	r3, [r4, #8]
 800493c:	3b01      	subs	r3, #1
 800493e:	60a3      	str	r3, [r4, #8]
 8004940:	6923      	ldr	r3, [r4, #16]
 8004942:	3301      	adds	r3, #1
 8004944:	6123      	str	r3, [r4, #16]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3b01      	subs	r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	f340 8087 	ble.w	8004a60 <_scanf_float+0x284>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	3301      	adds	r3, #1
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	e765      	b.n	8004826 <_scanf_float+0x4a>
 800495a:	eb1a 0105 	adds.w	r1, sl, r5
 800495e:	f47f af6f 	bne.w	8004840 <_scanf_float+0x64>
 8004962:	6822      	ldr	r2, [r4, #0]
 8004964:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004968:	6022      	str	r2, [r4, #0]
 800496a:	460d      	mov	r5, r1
 800496c:	468a      	mov	sl, r1
 800496e:	f806 3b01 	strb.w	r3, [r6], #1
 8004972:	e7e2      	b.n	800493a <_scanf_float+0x15e>
 8004974:	6822      	ldr	r2, [r4, #0]
 8004976:	0610      	lsls	r0, r2, #24
 8004978:	f57f af62 	bpl.w	8004840 <_scanf_float+0x64>
 800497c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004980:	6022      	str	r2, [r4, #0]
 8004982:	e7f4      	b.n	800496e <_scanf_float+0x192>
 8004984:	f1ba 0f00 	cmp.w	sl, #0
 8004988:	d10e      	bne.n	80049a8 <_scanf_float+0x1cc>
 800498a:	f1b9 0f00 	cmp.w	r9, #0
 800498e:	d10e      	bne.n	80049ae <_scanf_float+0x1d2>
 8004990:	6822      	ldr	r2, [r4, #0]
 8004992:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004996:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800499a:	d108      	bne.n	80049ae <_scanf_float+0x1d2>
 800499c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80049a0:	6022      	str	r2, [r4, #0]
 80049a2:	f04f 0a01 	mov.w	sl, #1
 80049a6:	e7e2      	b.n	800496e <_scanf_float+0x192>
 80049a8:	f1ba 0f02 	cmp.w	sl, #2
 80049ac:	d055      	beq.n	8004a5a <_scanf_float+0x27e>
 80049ae:	2d01      	cmp	r5, #1
 80049b0:	d002      	beq.n	80049b8 <_scanf_float+0x1dc>
 80049b2:	2d04      	cmp	r5, #4
 80049b4:	f47f af44 	bne.w	8004840 <_scanf_float+0x64>
 80049b8:	3501      	adds	r5, #1
 80049ba:	b2ed      	uxtb	r5, r5
 80049bc:	e7d7      	b.n	800496e <_scanf_float+0x192>
 80049be:	f1ba 0f01 	cmp.w	sl, #1
 80049c2:	f47f af3d 	bne.w	8004840 <_scanf_float+0x64>
 80049c6:	f04f 0a02 	mov.w	sl, #2
 80049ca:	e7d0      	b.n	800496e <_scanf_float+0x192>
 80049cc:	b97d      	cbnz	r5, 80049ee <_scanf_float+0x212>
 80049ce:	f1b9 0f00 	cmp.w	r9, #0
 80049d2:	f47f af38 	bne.w	8004846 <_scanf_float+0x6a>
 80049d6:	6822      	ldr	r2, [r4, #0]
 80049d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80049dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80049e0:	f040 8108 	bne.w	8004bf4 <_scanf_float+0x418>
 80049e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80049e8:	6022      	str	r2, [r4, #0]
 80049ea:	2501      	movs	r5, #1
 80049ec:	e7bf      	b.n	800496e <_scanf_float+0x192>
 80049ee:	2d03      	cmp	r5, #3
 80049f0:	d0e2      	beq.n	80049b8 <_scanf_float+0x1dc>
 80049f2:	2d05      	cmp	r5, #5
 80049f4:	e7de      	b.n	80049b4 <_scanf_float+0x1d8>
 80049f6:	2d02      	cmp	r5, #2
 80049f8:	f47f af22 	bne.w	8004840 <_scanf_float+0x64>
 80049fc:	2503      	movs	r5, #3
 80049fe:	e7b6      	b.n	800496e <_scanf_float+0x192>
 8004a00:	2d06      	cmp	r5, #6
 8004a02:	f47f af1d 	bne.w	8004840 <_scanf_float+0x64>
 8004a06:	2507      	movs	r5, #7
 8004a08:	e7b1      	b.n	800496e <_scanf_float+0x192>
 8004a0a:	6822      	ldr	r2, [r4, #0]
 8004a0c:	0591      	lsls	r1, r2, #22
 8004a0e:	f57f af17 	bpl.w	8004840 <_scanf_float+0x64>
 8004a12:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004a16:	6022      	str	r2, [r4, #0]
 8004a18:	f8cd 9008 	str.w	r9, [sp, #8]
 8004a1c:	e7a7      	b.n	800496e <_scanf_float+0x192>
 8004a1e:	6822      	ldr	r2, [r4, #0]
 8004a20:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004a24:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004a28:	d006      	beq.n	8004a38 <_scanf_float+0x25c>
 8004a2a:	0550      	lsls	r0, r2, #21
 8004a2c:	f57f af08 	bpl.w	8004840 <_scanf_float+0x64>
 8004a30:	f1b9 0f00 	cmp.w	r9, #0
 8004a34:	f000 80de 	beq.w	8004bf4 <_scanf_float+0x418>
 8004a38:	0591      	lsls	r1, r2, #22
 8004a3a:	bf58      	it	pl
 8004a3c:	9902      	ldrpl	r1, [sp, #8]
 8004a3e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004a42:	bf58      	it	pl
 8004a44:	eba9 0101 	subpl.w	r1, r9, r1
 8004a48:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004a4c:	bf58      	it	pl
 8004a4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004a52:	6022      	str	r2, [r4, #0]
 8004a54:	f04f 0900 	mov.w	r9, #0
 8004a58:	e789      	b.n	800496e <_scanf_float+0x192>
 8004a5a:	f04f 0a03 	mov.w	sl, #3
 8004a5e:	e786      	b.n	800496e <_scanf_float+0x192>
 8004a60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004a64:	4639      	mov	r1, r7
 8004a66:	4640      	mov	r0, r8
 8004a68:	4798      	blx	r3
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	f43f aedb 	beq.w	8004826 <_scanf_float+0x4a>
 8004a70:	e6e6      	b.n	8004840 <_scanf_float+0x64>
 8004a72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a7a:	463a      	mov	r2, r7
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	4798      	blx	r3
 8004a80:	6923      	ldr	r3, [r4, #16]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	6123      	str	r3, [r4, #16]
 8004a86:	e6e8      	b.n	800485a <_scanf_float+0x7e>
 8004a88:	1e6b      	subs	r3, r5, #1
 8004a8a:	2b06      	cmp	r3, #6
 8004a8c:	d824      	bhi.n	8004ad8 <_scanf_float+0x2fc>
 8004a8e:	2d02      	cmp	r5, #2
 8004a90:	d836      	bhi.n	8004b00 <_scanf_float+0x324>
 8004a92:	9b01      	ldr	r3, [sp, #4]
 8004a94:	429e      	cmp	r6, r3
 8004a96:	f67f aee4 	bls.w	8004862 <_scanf_float+0x86>
 8004a9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004aa2:	463a      	mov	r2, r7
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	4798      	blx	r3
 8004aa8:	6923      	ldr	r3, [r4, #16]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	6123      	str	r3, [r4, #16]
 8004aae:	e7f0      	b.n	8004a92 <_scanf_float+0x2b6>
 8004ab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ab4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004ab8:	463a      	mov	r2, r7
 8004aba:	4640      	mov	r0, r8
 8004abc:	4798      	blx	r3
 8004abe:	6923      	ldr	r3, [r4, #16]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ac8:	fa5f fa8a 	uxtb.w	sl, sl
 8004acc:	f1ba 0f02 	cmp.w	sl, #2
 8004ad0:	d1ee      	bne.n	8004ab0 <_scanf_float+0x2d4>
 8004ad2:	3d03      	subs	r5, #3
 8004ad4:	b2ed      	uxtb	r5, r5
 8004ad6:	1b76      	subs	r6, r6, r5
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	05da      	lsls	r2, r3, #23
 8004adc:	d530      	bpl.n	8004b40 <_scanf_float+0x364>
 8004ade:	055b      	lsls	r3, r3, #21
 8004ae0:	d511      	bpl.n	8004b06 <_scanf_float+0x32a>
 8004ae2:	9b01      	ldr	r3, [sp, #4]
 8004ae4:	429e      	cmp	r6, r3
 8004ae6:	f67f aebc 	bls.w	8004862 <_scanf_float+0x86>
 8004aea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004aee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004af2:	463a      	mov	r2, r7
 8004af4:	4640      	mov	r0, r8
 8004af6:	4798      	blx	r3
 8004af8:	6923      	ldr	r3, [r4, #16]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	6123      	str	r3, [r4, #16]
 8004afe:	e7f0      	b.n	8004ae2 <_scanf_float+0x306>
 8004b00:	46aa      	mov	sl, r5
 8004b02:	46b3      	mov	fp, r6
 8004b04:	e7de      	b.n	8004ac4 <_scanf_float+0x2e8>
 8004b06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004b0a:	6923      	ldr	r3, [r4, #16]
 8004b0c:	2965      	cmp	r1, #101	@ 0x65
 8004b0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b12:	f106 35ff 	add.w	r5, r6, #4294967295
 8004b16:	6123      	str	r3, [r4, #16]
 8004b18:	d00c      	beq.n	8004b34 <_scanf_float+0x358>
 8004b1a:	2945      	cmp	r1, #69	@ 0x45
 8004b1c:	d00a      	beq.n	8004b34 <_scanf_float+0x358>
 8004b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b22:	463a      	mov	r2, r7
 8004b24:	4640      	mov	r0, r8
 8004b26:	4798      	blx	r3
 8004b28:	6923      	ldr	r3, [r4, #16]
 8004b2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	1eb5      	subs	r5, r6, #2
 8004b32:	6123      	str	r3, [r4, #16]
 8004b34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b38:	463a      	mov	r2, r7
 8004b3a:	4640      	mov	r0, r8
 8004b3c:	4798      	blx	r3
 8004b3e:	462e      	mov	r6, r5
 8004b40:	6822      	ldr	r2, [r4, #0]
 8004b42:	f012 0210 	ands.w	r2, r2, #16
 8004b46:	d001      	beq.n	8004b4c <_scanf_float+0x370>
 8004b48:	2000      	movs	r0, #0
 8004b4a:	e68b      	b.n	8004864 <_scanf_float+0x88>
 8004b4c:	7032      	strb	r2, [r6, #0]
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b58:	d11c      	bne.n	8004b94 <_scanf_float+0x3b8>
 8004b5a:	9b02      	ldr	r3, [sp, #8]
 8004b5c:	454b      	cmp	r3, r9
 8004b5e:	eba3 0209 	sub.w	r2, r3, r9
 8004b62:	d123      	bne.n	8004bac <_scanf_float+0x3d0>
 8004b64:	9901      	ldr	r1, [sp, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	4640      	mov	r0, r8
 8004b6a:	f002 fbf9 	bl	8007360 <_strtod_r>
 8004b6e:	9b03      	ldr	r3, [sp, #12]
 8004b70:	6821      	ldr	r1, [r4, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f011 0f02 	tst.w	r1, #2
 8004b78:	ec57 6b10 	vmov	r6, r7, d0
 8004b7c:	f103 0204 	add.w	r2, r3, #4
 8004b80:	d01f      	beq.n	8004bc2 <_scanf_float+0x3e6>
 8004b82:	9903      	ldr	r1, [sp, #12]
 8004b84:	600a      	str	r2, [r1, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	e9c3 6700 	strd	r6, r7, [r3]
 8004b8c:	68e3      	ldr	r3, [r4, #12]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	60e3      	str	r3, [r4, #12]
 8004b92:	e7d9      	b.n	8004b48 <_scanf_float+0x36c>
 8004b94:	9b04      	ldr	r3, [sp, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0e4      	beq.n	8004b64 <_scanf_float+0x388>
 8004b9a:	9905      	ldr	r1, [sp, #20]
 8004b9c:	230a      	movs	r3, #10
 8004b9e:	3101      	adds	r1, #1
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	f002 fc5d 	bl	8007460 <_strtol_r>
 8004ba6:	9b04      	ldr	r3, [sp, #16]
 8004ba8:	9e05      	ldr	r6, [sp, #20]
 8004baa:	1ac2      	subs	r2, r0, r3
 8004bac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004bb0:	429e      	cmp	r6, r3
 8004bb2:	bf28      	it	cs
 8004bb4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004bb8:	4910      	ldr	r1, [pc, #64]	@ (8004bfc <_scanf_float+0x420>)
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f000 f8e4 	bl	8004d88 <siprintf>
 8004bc0:	e7d0      	b.n	8004b64 <_scanf_float+0x388>
 8004bc2:	f011 0f04 	tst.w	r1, #4
 8004bc6:	9903      	ldr	r1, [sp, #12]
 8004bc8:	600a      	str	r2, [r1, #0]
 8004bca:	d1dc      	bne.n	8004b86 <_scanf_float+0x3aa>
 8004bcc:	681d      	ldr	r5, [r3, #0]
 8004bce:	4632      	mov	r2, r6
 8004bd0:	463b      	mov	r3, r7
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	4639      	mov	r1, r7
 8004bd6:	f7fb ffb1 	bl	8000b3c <__aeabi_dcmpun>
 8004bda:	b128      	cbz	r0, 8004be8 <_scanf_float+0x40c>
 8004bdc:	4808      	ldr	r0, [pc, #32]	@ (8004c00 <_scanf_float+0x424>)
 8004bde:	f000 f9b7 	bl	8004f50 <nanf>
 8004be2:	ed85 0a00 	vstr	s0, [r5]
 8004be6:	e7d1      	b.n	8004b8c <_scanf_float+0x3b0>
 8004be8:	4630      	mov	r0, r6
 8004bea:	4639      	mov	r1, r7
 8004bec:	f7fc f804 	bl	8000bf8 <__aeabi_d2f>
 8004bf0:	6028      	str	r0, [r5, #0]
 8004bf2:	e7cb      	b.n	8004b8c <_scanf_float+0x3b0>
 8004bf4:	f04f 0900 	mov.w	r9, #0
 8004bf8:	e629      	b.n	800484e <_scanf_float+0x72>
 8004bfa:	bf00      	nop
 8004bfc:	080086e4 	.word	0x080086e4
 8004c00:	08008a7d 	.word	0x08008a7d

08004c04 <std>:
 8004c04:	2300      	movs	r3, #0
 8004c06:	b510      	push	{r4, lr}
 8004c08:	4604      	mov	r4, r0
 8004c0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c12:	6083      	str	r3, [r0, #8]
 8004c14:	8181      	strh	r1, [r0, #12]
 8004c16:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c18:	81c2      	strh	r2, [r0, #14]
 8004c1a:	6183      	str	r3, [r0, #24]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	2208      	movs	r2, #8
 8004c20:	305c      	adds	r0, #92	@ 0x5c
 8004c22:	f000 f914 	bl	8004e4e <memset>
 8004c26:	4b0d      	ldr	r3, [pc, #52]	@ (8004c5c <std+0x58>)
 8004c28:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c60 <std+0x5c>)
 8004c2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c64 <std+0x60>)
 8004c30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c32:	4b0d      	ldr	r3, [pc, #52]	@ (8004c68 <std+0x64>)
 8004c34:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c36:	4b0d      	ldr	r3, [pc, #52]	@ (8004c6c <std+0x68>)
 8004c38:	6224      	str	r4, [r4, #32]
 8004c3a:	429c      	cmp	r4, r3
 8004c3c:	d006      	beq.n	8004c4c <std+0x48>
 8004c3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c42:	4294      	cmp	r4, r2
 8004c44:	d002      	beq.n	8004c4c <std+0x48>
 8004c46:	33d0      	adds	r3, #208	@ 0xd0
 8004c48:	429c      	cmp	r4, r3
 8004c4a:	d105      	bne.n	8004c58 <std+0x54>
 8004c4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c54:	f000 b978 	b.w	8004f48 <__retarget_lock_init_recursive>
 8004c58:	bd10      	pop	{r4, pc}
 8004c5a:	bf00      	nop
 8004c5c:	08004dc9 	.word	0x08004dc9
 8004c60:	08004deb 	.word	0x08004deb
 8004c64:	08004e23 	.word	0x08004e23
 8004c68:	08004e47 	.word	0x08004e47
 8004c6c:	2000035c 	.word	0x2000035c

08004c70 <stdio_exit_handler>:
 8004c70:	4a02      	ldr	r2, [pc, #8]	@ (8004c7c <stdio_exit_handler+0xc>)
 8004c72:	4903      	ldr	r1, [pc, #12]	@ (8004c80 <stdio_exit_handler+0x10>)
 8004c74:	4803      	ldr	r0, [pc, #12]	@ (8004c84 <stdio_exit_handler+0x14>)
 8004c76:	f000 b869 	b.w	8004d4c <_fwalk_sglue>
 8004c7a:	bf00      	nop
 8004c7c:	20000010 	.word	0x20000010
 8004c80:	0800781d 	.word	0x0800781d
 8004c84:	20000020 	.word	0x20000020

08004c88 <cleanup_stdio>:
 8004c88:	6841      	ldr	r1, [r0, #4]
 8004c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cbc <cleanup_stdio+0x34>)
 8004c8c:	4299      	cmp	r1, r3
 8004c8e:	b510      	push	{r4, lr}
 8004c90:	4604      	mov	r4, r0
 8004c92:	d001      	beq.n	8004c98 <cleanup_stdio+0x10>
 8004c94:	f002 fdc2 	bl	800781c <_fflush_r>
 8004c98:	68a1      	ldr	r1, [r4, #8]
 8004c9a:	4b09      	ldr	r3, [pc, #36]	@ (8004cc0 <cleanup_stdio+0x38>)
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	d002      	beq.n	8004ca6 <cleanup_stdio+0x1e>
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f002 fdbb 	bl	800781c <_fflush_r>
 8004ca6:	68e1      	ldr	r1, [r4, #12]
 8004ca8:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <cleanup_stdio+0x3c>)
 8004caa:	4299      	cmp	r1, r3
 8004cac:	d004      	beq.n	8004cb8 <cleanup_stdio+0x30>
 8004cae:	4620      	mov	r0, r4
 8004cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb4:	f002 bdb2 	b.w	800781c <_fflush_r>
 8004cb8:	bd10      	pop	{r4, pc}
 8004cba:	bf00      	nop
 8004cbc:	2000035c 	.word	0x2000035c
 8004cc0:	200003c4 	.word	0x200003c4
 8004cc4:	2000042c 	.word	0x2000042c

08004cc8 <global_stdio_init.part.0>:
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf8 <global_stdio_init.part.0+0x30>)
 8004ccc:	4c0b      	ldr	r4, [pc, #44]	@ (8004cfc <global_stdio_init.part.0+0x34>)
 8004cce:	4a0c      	ldr	r2, [pc, #48]	@ (8004d00 <global_stdio_init.part.0+0x38>)
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2104      	movs	r1, #4
 8004cd8:	f7ff ff94 	bl	8004c04 <std>
 8004cdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	2109      	movs	r1, #9
 8004ce4:	f7ff ff8e 	bl	8004c04 <std>
 8004ce8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004cec:	2202      	movs	r2, #2
 8004cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf2:	2112      	movs	r1, #18
 8004cf4:	f7ff bf86 	b.w	8004c04 <std>
 8004cf8:	20000494 	.word	0x20000494
 8004cfc:	2000035c 	.word	0x2000035c
 8004d00:	08004c71 	.word	0x08004c71

08004d04 <__sfp_lock_acquire>:
 8004d04:	4801      	ldr	r0, [pc, #4]	@ (8004d0c <__sfp_lock_acquire+0x8>)
 8004d06:	f000 b920 	b.w	8004f4a <__retarget_lock_acquire_recursive>
 8004d0a:	bf00      	nop
 8004d0c:	2000049d 	.word	0x2000049d

08004d10 <__sfp_lock_release>:
 8004d10:	4801      	ldr	r0, [pc, #4]	@ (8004d18 <__sfp_lock_release+0x8>)
 8004d12:	f000 b91b 	b.w	8004f4c <__retarget_lock_release_recursive>
 8004d16:	bf00      	nop
 8004d18:	2000049d 	.word	0x2000049d

08004d1c <__sinit>:
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	4604      	mov	r4, r0
 8004d20:	f7ff fff0 	bl	8004d04 <__sfp_lock_acquire>
 8004d24:	6a23      	ldr	r3, [r4, #32]
 8004d26:	b11b      	cbz	r3, 8004d30 <__sinit+0x14>
 8004d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d2c:	f7ff bff0 	b.w	8004d10 <__sfp_lock_release>
 8004d30:	4b04      	ldr	r3, [pc, #16]	@ (8004d44 <__sinit+0x28>)
 8004d32:	6223      	str	r3, [r4, #32]
 8004d34:	4b04      	ldr	r3, [pc, #16]	@ (8004d48 <__sinit+0x2c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f5      	bne.n	8004d28 <__sinit+0xc>
 8004d3c:	f7ff ffc4 	bl	8004cc8 <global_stdio_init.part.0>
 8004d40:	e7f2      	b.n	8004d28 <__sinit+0xc>
 8004d42:	bf00      	nop
 8004d44:	08004c89 	.word	0x08004c89
 8004d48:	20000494 	.word	0x20000494

08004d4c <_fwalk_sglue>:
 8004d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d50:	4607      	mov	r7, r0
 8004d52:	4688      	mov	r8, r1
 8004d54:	4614      	mov	r4, r2
 8004d56:	2600      	movs	r6, #0
 8004d58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d5c:	f1b9 0901 	subs.w	r9, r9, #1
 8004d60:	d505      	bpl.n	8004d6e <_fwalk_sglue+0x22>
 8004d62:	6824      	ldr	r4, [r4, #0]
 8004d64:	2c00      	cmp	r4, #0
 8004d66:	d1f7      	bne.n	8004d58 <_fwalk_sglue+0xc>
 8004d68:	4630      	mov	r0, r6
 8004d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d6e:	89ab      	ldrh	r3, [r5, #12]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d907      	bls.n	8004d84 <_fwalk_sglue+0x38>
 8004d74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	d003      	beq.n	8004d84 <_fwalk_sglue+0x38>
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	4638      	mov	r0, r7
 8004d80:	47c0      	blx	r8
 8004d82:	4306      	orrs	r6, r0
 8004d84:	3568      	adds	r5, #104	@ 0x68
 8004d86:	e7e9      	b.n	8004d5c <_fwalk_sglue+0x10>

08004d88 <siprintf>:
 8004d88:	b40e      	push	{r1, r2, r3}
 8004d8a:	b500      	push	{lr}
 8004d8c:	b09c      	sub	sp, #112	@ 0x70
 8004d8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d90:	9002      	str	r0, [sp, #8]
 8004d92:	9006      	str	r0, [sp, #24]
 8004d94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d98:	4809      	ldr	r0, [pc, #36]	@ (8004dc0 <siprintf+0x38>)
 8004d9a:	9107      	str	r1, [sp, #28]
 8004d9c:	9104      	str	r1, [sp, #16]
 8004d9e:	4909      	ldr	r1, [pc, #36]	@ (8004dc4 <siprintf+0x3c>)
 8004da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004da4:	9105      	str	r1, [sp, #20]
 8004da6:	6800      	ldr	r0, [r0, #0]
 8004da8:	9301      	str	r3, [sp, #4]
 8004daa:	a902      	add	r1, sp, #8
 8004dac:	f002 fbb6 	bl	800751c <_svfiprintf_r>
 8004db0:	9b02      	ldr	r3, [sp, #8]
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	b01c      	add	sp, #112	@ 0x70
 8004db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dbc:	b003      	add	sp, #12
 8004dbe:	4770      	bx	lr
 8004dc0:	2000001c 	.word	0x2000001c
 8004dc4:	ffff0208 	.word	0xffff0208

08004dc8 <__sread>:
 8004dc8:	b510      	push	{r4, lr}
 8004dca:	460c      	mov	r4, r1
 8004dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd0:	f000 f86c 	bl	8004eac <_read_r>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	bfab      	itete	ge
 8004dd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004dda:	89a3      	ldrhlt	r3, [r4, #12]
 8004ddc:	181b      	addge	r3, r3, r0
 8004dde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004de2:	bfac      	ite	ge
 8004de4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004de6:	81a3      	strhlt	r3, [r4, #12]
 8004de8:	bd10      	pop	{r4, pc}

08004dea <__swrite>:
 8004dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dee:	461f      	mov	r7, r3
 8004df0:	898b      	ldrh	r3, [r1, #12]
 8004df2:	05db      	lsls	r3, r3, #23
 8004df4:	4605      	mov	r5, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	4616      	mov	r6, r2
 8004dfa:	d505      	bpl.n	8004e08 <__swrite+0x1e>
 8004dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e00:	2302      	movs	r3, #2
 8004e02:	2200      	movs	r2, #0
 8004e04:	f000 f840 	bl	8004e88 <_lseek_r>
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e12:	81a3      	strh	r3, [r4, #12]
 8004e14:	4632      	mov	r2, r6
 8004e16:	463b      	mov	r3, r7
 8004e18:	4628      	mov	r0, r5
 8004e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e1e:	f000 b857 	b.w	8004ed0 <_write_r>

08004e22 <__sseek>:
 8004e22:	b510      	push	{r4, lr}
 8004e24:	460c      	mov	r4, r1
 8004e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2a:	f000 f82d 	bl	8004e88 <_lseek_r>
 8004e2e:	1c43      	adds	r3, r0, #1
 8004e30:	89a3      	ldrh	r3, [r4, #12]
 8004e32:	bf15      	itete	ne
 8004e34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e3e:	81a3      	strheq	r3, [r4, #12]
 8004e40:	bf18      	it	ne
 8004e42:	81a3      	strhne	r3, [r4, #12]
 8004e44:	bd10      	pop	{r4, pc}

08004e46 <__sclose>:
 8004e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e4a:	f000 b80d 	b.w	8004e68 <_close_r>

08004e4e <memset>:
 8004e4e:	4402      	add	r2, r0
 8004e50:	4603      	mov	r3, r0
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d100      	bne.n	8004e58 <memset+0xa>
 8004e56:	4770      	bx	lr
 8004e58:	f803 1b01 	strb.w	r1, [r3], #1
 8004e5c:	e7f9      	b.n	8004e52 <memset+0x4>
	...

08004e60 <_localeconv_r>:
 8004e60:	4800      	ldr	r0, [pc, #0]	@ (8004e64 <_localeconv_r+0x4>)
 8004e62:	4770      	bx	lr
 8004e64:	2000015c 	.word	0x2000015c

08004e68 <_close_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	4d06      	ldr	r5, [pc, #24]	@ (8004e84 <_close_r+0x1c>)
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	4604      	mov	r4, r0
 8004e70:	4608      	mov	r0, r1
 8004e72:	602b      	str	r3, [r5, #0]
 8004e74:	f7fd f986 	bl	8002184 <_close>
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	d102      	bne.n	8004e82 <_close_r+0x1a>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	b103      	cbz	r3, 8004e82 <_close_r+0x1a>
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	20000498 	.word	0x20000498

08004e88 <_lseek_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4d07      	ldr	r5, [pc, #28]	@ (8004ea8 <_lseek_r+0x20>)
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	4608      	mov	r0, r1
 8004e90:	4611      	mov	r1, r2
 8004e92:	2200      	movs	r2, #0
 8004e94:	602a      	str	r2, [r5, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f7fd f99b 	bl	80021d2 <_lseek>
 8004e9c:	1c43      	adds	r3, r0, #1
 8004e9e:	d102      	bne.n	8004ea6 <_lseek_r+0x1e>
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	b103      	cbz	r3, 8004ea6 <_lseek_r+0x1e>
 8004ea4:	6023      	str	r3, [r4, #0]
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
 8004ea8:	20000498 	.word	0x20000498

08004eac <_read_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4d07      	ldr	r5, [pc, #28]	@ (8004ecc <_read_r+0x20>)
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	4608      	mov	r0, r1
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	602a      	str	r2, [r5, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f7fd f929 	bl	8002112 <_read>
 8004ec0:	1c43      	adds	r3, r0, #1
 8004ec2:	d102      	bne.n	8004eca <_read_r+0x1e>
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	b103      	cbz	r3, 8004eca <_read_r+0x1e>
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
 8004ecc:	20000498 	.word	0x20000498

08004ed0 <_write_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4d07      	ldr	r5, [pc, #28]	@ (8004ef0 <_write_r+0x20>)
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	4608      	mov	r0, r1
 8004ed8:	4611      	mov	r1, r2
 8004eda:	2200      	movs	r2, #0
 8004edc:	602a      	str	r2, [r5, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f7fd f934 	bl	800214c <_write>
 8004ee4:	1c43      	adds	r3, r0, #1
 8004ee6:	d102      	bne.n	8004eee <_write_r+0x1e>
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	b103      	cbz	r3, 8004eee <_write_r+0x1e>
 8004eec:	6023      	str	r3, [r4, #0]
 8004eee:	bd38      	pop	{r3, r4, r5, pc}
 8004ef0:	20000498 	.word	0x20000498

08004ef4 <__errno>:
 8004ef4:	4b01      	ldr	r3, [pc, #4]	@ (8004efc <__errno+0x8>)
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	2000001c 	.word	0x2000001c

08004f00 <__libc_init_array>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	4d0d      	ldr	r5, [pc, #52]	@ (8004f38 <__libc_init_array+0x38>)
 8004f04:	4c0d      	ldr	r4, [pc, #52]	@ (8004f3c <__libc_init_array+0x3c>)
 8004f06:	1b64      	subs	r4, r4, r5
 8004f08:	10a4      	asrs	r4, r4, #2
 8004f0a:	2600      	movs	r6, #0
 8004f0c:	42a6      	cmp	r6, r4
 8004f0e:	d109      	bne.n	8004f24 <__libc_init_array+0x24>
 8004f10:	4d0b      	ldr	r5, [pc, #44]	@ (8004f40 <__libc_init_array+0x40>)
 8004f12:	4c0c      	ldr	r4, [pc, #48]	@ (8004f44 <__libc_init_array+0x44>)
 8004f14:	f003 fbb8 	bl	8008688 <_init>
 8004f18:	1b64      	subs	r4, r4, r5
 8004f1a:	10a4      	asrs	r4, r4, #2
 8004f1c:	2600      	movs	r6, #0
 8004f1e:	42a6      	cmp	r6, r4
 8004f20:	d105      	bne.n	8004f2e <__libc_init_array+0x2e>
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
 8004f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f28:	4798      	blx	r3
 8004f2a:	3601      	adds	r6, #1
 8004f2c:	e7ee      	b.n	8004f0c <__libc_init_array+0xc>
 8004f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f32:	4798      	blx	r3
 8004f34:	3601      	adds	r6, #1
 8004f36:	e7f2      	b.n	8004f1e <__libc_init_array+0x1e>
 8004f38:	08008ae8 	.word	0x08008ae8
 8004f3c:	08008ae8 	.word	0x08008ae8
 8004f40:	08008ae8 	.word	0x08008ae8
 8004f44:	08008aec 	.word	0x08008aec

08004f48 <__retarget_lock_init_recursive>:
 8004f48:	4770      	bx	lr

08004f4a <__retarget_lock_acquire_recursive>:
 8004f4a:	4770      	bx	lr

08004f4c <__retarget_lock_release_recursive>:
 8004f4c:	4770      	bx	lr
	...

08004f50 <nanf>:
 8004f50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004f58 <nanf+0x8>
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	7fc00000 	.word	0x7fc00000

08004f5c <quorem>:
 8004f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f60:	6903      	ldr	r3, [r0, #16]
 8004f62:	690c      	ldr	r4, [r1, #16]
 8004f64:	42a3      	cmp	r3, r4
 8004f66:	4607      	mov	r7, r0
 8004f68:	db7e      	blt.n	8005068 <quorem+0x10c>
 8004f6a:	3c01      	subs	r4, #1
 8004f6c:	f101 0814 	add.w	r8, r1, #20
 8004f70:	00a3      	lsls	r3, r4, #2
 8004f72:	f100 0514 	add.w	r5, r0, #20
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f86:	3301      	adds	r3, #1
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f92:	d32e      	bcc.n	8004ff2 <quorem+0x96>
 8004f94:	f04f 0a00 	mov.w	sl, #0
 8004f98:	46c4      	mov	ip, r8
 8004f9a:	46ae      	mov	lr, r5
 8004f9c:	46d3      	mov	fp, sl
 8004f9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004fa2:	b298      	uxth	r0, r3
 8004fa4:	fb06 a000 	mla	r0, r6, r0, sl
 8004fa8:	0c02      	lsrs	r2, r0, #16
 8004faa:	0c1b      	lsrs	r3, r3, #16
 8004fac:	fb06 2303 	mla	r3, r6, r3, r2
 8004fb0:	f8de 2000 	ldr.w	r2, [lr]
 8004fb4:	b280      	uxth	r0, r0
 8004fb6:	b292      	uxth	r2, r2
 8004fb8:	1a12      	subs	r2, r2, r0
 8004fba:	445a      	add	r2, fp
 8004fbc:	f8de 0000 	ldr.w	r0, [lr]
 8004fc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004fca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004fce:	b292      	uxth	r2, r2
 8004fd0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004fd4:	45e1      	cmp	r9, ip
 8004fd6:	f84e 2b04 	str.w	r2, [lr], #4
 8004fda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004fde:	d2de      	bcs.n	8004f9e <quorem+0x42>
 8004fe0:	9b00      	ldr	r3, [sp, #0]
 8004fe2:	58eb      	ldr	r3, [r5, r3]
 8004fe4:	b92b      	cbnz	r3, 8004ff2 <quorem+0x96>
 8004fe6:	9b01      	ldr	r3, [sp, #4]
 8004fe8:	3b04      	subs	r3, #4
 8004fea:	429d      	cmp	r5, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	d32f      	bcc.n	8005050 <quorem+0xf4>
 8004ff0:	613c      	str	r4, [r7, #16]
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	f001 f9c4 	bl	8006380 <__mcmp>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	db25      	blt.n	8005048 <quorem+0xec>
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	2000      	movs	r0, #0
 8005000:	f858 2b04 	ldr.w	r2, [r8], #4
 8005004:	f8d1 c000 	ldr.w	ip, [r1]
 8005008:	fa1f fe82 	uxth.w	lr, r2
 800500c:	fa1f f38c 	uxth.w	r3, ip
 8005010:	eba3 030e 	sub.w	r3, r3, lr
 8005014:	4403      	add	r3, r0
 8005016:	0c12      	lsrs	r2, r2, #16
 8005018:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800501c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005020:	b29b      	uxth	r3, r3
 8005022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005026:	45c1      	cmp	r9, r8
 8005028:	f841 3b04 	str.w	r3, [r1], #4
 800502c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005030:	d2e6      	bcs.n	8005000 <quorem+0xa4>
 8005032:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800503a:	b922      	cbnz	r2, 8005046 <quorem+0xea>
 800503c:	3b04      	subs	r3, #4
 800503e:	429d      	cmp	r5, r3
 8005040:	461a      	mov	r2, r3
 8005042:	d30b      	bcc.n	800505c <quorem+0x100>
 8005044:	613c      	str	r4, [r7, #16]
 8005046:	3601      	adds	r6, #1
 8005048:	4630      	mov	r0, r6
 800504a:	b003      	add	sp, #12
 800504c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	3b04      	subs	r3, #4
 8005054:	2a00      	cmp	r2, #0
 8005056:	d1cb      	bne.n	8004ff0 <quorem+0x94>
 8005058:	3c01      	subs	r4, #1
 800505a:	e7c6      	b.n	8004fea <quorem+0x8e>
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	3b04      	subs	r3, #4
 8005060:	2a00      	cmp	r2, #0
 8005062:	d1ef      	bne.n	8005044 <quorem+0xe8>
 8005064:	3c01      	subs	r4, #1
 8005066:	e7ea      	b.n	800503e <quorem+0xe2>
 8005068:	2000      	movs	r0, #0
 800506a:	e7ee      	b.n	800504a <quorem+0xee>
 800506c:	0000      	movs	r0, r0
	...

08005070 <_dtoa_r>:
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	69c7      	ldr	r7, [r0, #28]
 8005076:	b099      	sub	sp, #100	@ 0x64
 8005078:	ed8d 0b02 	vstr	d0, [sp, #8]
 800507c:	ec55 4b10 	vmov	r4, r5, d0
 8005080:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005082:	9109      	str	r1, [sp, #36]	@ 0x24
 8005084:	4683      	mov	fp, r0
 8005086:	920e      	str	r2, [sp, #56]	@ 0x38
 8005088:	9313      	str	r3, [sp, #76]	@ 0x4c
 800508a:	b97f      	cbnz	r7, 80050ac <_dtoa_r+0x3c>
 800508c:	2010      	movs	r0, #16
 800508e:	f000 fdfd 	bl	8005c8c <malloc>
 8005092:	4602      	mov	r2, r0
 8005094:	f8cb 001c 	str.w	r0, [fp, #28]
 8005098:	b920      	cbnz	r0, 80050a4 <_dtoa_r+0x34>
 800509a:	4ba7      	ldr	r3, [pc, #668]	@ (8005338 <_dtoa_r+0x2c8>)
 800509c:	21ef      	movs	r1, #239	@ 0xef
 800509e:	48a7      	ldr	r0, [pc, #668]	@ (800533c <_dtoa_r+0x2cc>)
 80050a0:	f002 fc36 	bl	8007910 <__assert_func>
 80050a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80050a8:	6007      	str	r7, [r0, #0]
 80050aa:	60c7      	str	r7, [r0, #12]
 80050ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80050b0:	6819      	ldr	r1, [r3, #0]
 80050b2:	b159      	cbz	r1, 80050cc <_dtoa_r+0x5c>
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	604a      	str	r2, [r1, #4]
 80050b8:	2301      	movs	r3, #1
 80050ba:	4093      	lsls	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
 80050be:	4658      	mov	r0, fp
 80050c0:	f000 feda 	bl	8005e78 <_Bfree>
 80050c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	1e2b      	subs	r3, r5, #0
 80050ce:	bfb9      	ittee	lt
 80050d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80050d4:	9303      	strlt	r3, [sp, #12]
 80050d6:	2300      	movge	r3, #0
 80050d8:	6033      	strge	r3, [r6, #0]
 80050da:	9f03      	ldr	r7, [sp, #12]
 80050dc:	4b98      	ldr	r3, [pc, #608]	@ (8005340 <_dtoa_r+0x2d0>)
 80050de:	bfbc      	itt	lt
 80050e0:	2201      	movlt	r2, #1
 80050e2:	6032      	strlt	r2, [r6, #0]
 80050e4:	43bb      	bics	r3, r7
 80050e6:	d112      	bne.n	800510e <_dtoa_r+0x9e>
 80050e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80050ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80050f4:	4323      	orrs	r3, r4
 80050f6:	f000 854d 	beq.w	8005b94 <_dtoa_r+0xb24>
 80050fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80050fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005354 <_dtoa_r+0x2e4>
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 854f 	beq.w	8005ba4 <_dtoa_r+0xb34>
 8005106:	f10a 0303 	add.w	r3, sl, #3
 800510a:	f000 bd49 	b.w	8005ba0 <_dtoa_r+0xb30>
 800510e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	ec51 0b17 	vmov	r0, r1, d7
 8005118:	2300      	movs	r3, #0
 800511a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800511e:	f7fb fcdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005122:	4680      	mov	r8, r0
 8005124:	b158      	cbz	r0, 800513e <_dtoa_r+0xce>
 8005126:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005128:	2301      	movs	r3, #1
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800512e:	b113      	cbz	r3, 8005136 <_dtoa_r+0xc6>
 8005130:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005132:	4b84      	ldr	r3, [pc, #528]	@ (8005344 <_dtoa_r+0x2d4>)
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005358 <_dtoa_r+0x2e8>
 800513a:	f000 bd33 	b.w	8005ba4 <_dtoa_r+0xb34>
 800513e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005142:	aa16      	add	r2, sp, #88	@ 0x58
 8005144:	a917      	add	r1, sp, #92	@ 0x5c
 8005146:	4658      	mov	r0, fp
 8005148:	f001 fa3a 	bl	80065c0 <__d2b>
 800514c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005150:	4681      	mov	r9, r0
 8005152:	2e00      	cmp	r6, #0
 8005154:	d077      	beq.n	8005246 <_dtoa_r+0x1d6>
 8005156:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005158:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800515c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005164:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005168:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800516c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005170:	4619      	mov	r1, r3
 8005172:	2200      	movs	r2, #0
 8005174:	4b74      	ldr	r3, [pc, #464]	@ (8005348 <_dtoa_r+0x2d8>)
 8005176:	f7fb f88f 	bl	8000298 <__aeabi_dsub>
 800517a:	a369      	add	r3, pc, #420	@ (adr r3, 8005320 <_dtoa_r+0x2b0>)
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	f7fb fa42 	bl	8000608 <__aeabi_dmul>
 8005184:	a368      	add	r3, pc, #416	@ (adr r3, 8005328 <_dtoa_r+0x2b8>)
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	f7fb f887 	bl	800029c <__adddf3>
 800518e:	4604      	mov	r4, r0
 8005190:	4630      	mov	r0, r6
 8005192:	460d      	mov	r5, r1
 8005194:	f7fb f9ce 	bl	8000534 <__aeabi_i2d>
 8005198:	a365      	add	r3, pc, #404	@ (adr r3, 8005330 <_dtoa_r+0x2c0>)
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	f7fb fa33 	bl	8000608 <__aeabi_dmul>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4620      	mov	r0, r4
 80051a8:	4629      	mov	r1, r5
 80051aa:	f7fb f877 	bl	800029c <__adddf3>
 80051ae:	4604      	mov	r4, r0
 80051b0:	460d      	mov	r5, r1
 80051b2:	f7fb fcd9 	bl	8000b68 <__aeabi_d2iz>
 80051b6:	2200      	movs	r2, #0
 80051b8:	4607      	mov	r7, r0
 80051ba:	2300      	movs	r3, #0
 80051bc:	4620      	mov	r0, r4
 80051be:	4629      	mov	r1, r5
 80051c0:	f7fb fc94 	bl	8000aec <__aeabi_dcmplt>
 80051c4:	b140      	cbz	r0, 80051d8 <_dtoa_r+0x168>
 80051c6:	4638      	mov	r0, r7
 80051c8:	f7fb f9b4 	bl	8000534 <__aeabi_i2d>
 80051cc:	4622      	mov	r2, r4
 80051ce:	462b      	mov	r3, r5
 80051d0:	f7fb fc82 	bl	8000ad8 <__aeabi_dcmpeq>
 80051d4:	b900      	cbnz	r0, 80051d8 <_dtoa_r+0x168>
 80051d6:	3f01      	subs	r7, #1
 80051d8:	2f16      	cmp	r7, #22
 80051da:	d851      	bhi.n	8005280 <_dtoa_r+0x210>
 80051dc:	4b5b      	ldr	r3, [pc, #364]	@ (800534c <_dtoa_r+0x2dc>)
 80051de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80051ea:	f7fb fc7f 	bl	8000aec <__aeabi_dcmplt>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d048      	beq.n	8005284 <_dtoa_r+0x214>
 80051f2:	3f01      	subs	r7, #1
 80051f4:	2300      	movs	r3, #0
 80051f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80051f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80051fa:	1b9b      	subs	r3, r3, r6
 80051fc:	1e5a      	subs	r2, r3, #1
 80051fe:	bf44      	itt	mi
 8005200:	f1c3 0801 	rsbmi	r8, r3, #1
 8005204:	2300      	movmi	r3, #0
 8005206:	9208      	str	r2, [sp, #32]
 8005208:	bf54      	ite	pl
 800520a:	f04f 0800 	movpl.w	r8, #0
 800520e:	9308      	strmi	r3, [sp, #32]
 8005210:	2f00      	cmp	r7, #0
 8005212:	db39      	blt.n	8005288 <_dtoa_r+0x218>
 8005214:	9b08      	ldr	r3, [sp, #32]
 8005216:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005218:	443b      	add	r3, r7
 800521a:	9308      	str	r3, [sp, #32]
 800521c:	2300      	movs	r3, #0
 800521e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005222:	2b09      	cmp	r3, #9
 8005224:	d864      	bhi.n	80052f0 <_dtoa_r+0x280>
 8005226:	2b05      	cmp	r3, #5
 8005228:	bfc4      	itt	gt
 800522a:	3b04      	subgt	r3, #4
 800522c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800522e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005230:	f1a3 0302 	sub.w	r3, r3, #2
 8005234:	bfcc      	ite	gt
 8005236:	2400      	movgt	r4, #0
 8005238:	2401      	movle	r4, #1
 800523a:	2b03      	cmp	r3, #3
 800523c:	d863      	bhi.n	8005306 <_dtoa_r+0x296>
 800523e:	e8df f003 	tbb	[pc, r3]
 8005242:	372a      	.short	0x372a
 8005244:	5535      	.short	0x5535
 8005246:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800524a:	441e      	add	r6, r3
 800524c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005250:	2b20      	cmp	r3, #32
 8005252:	bfc1      	itttt	gt
 8005254:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005258:	409f      	lslgt	r7, r3
 800525a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800525e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005262:	bfd6      	itet	le
 8005264:	f1c3 0320 	rsble	r3, r3, #32
 8005268:	ea47 0003 	orrgt.w	r0, r7, r3
 800526c:	fa04 f003 	lslle.w	r0, r4, r3
 8005270:	f7fb f950 	bl	8000514 <__aeabi_ui2d>
 8005274:	2201      	movs	r2, #1
 8005276:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800527a:	3e01      	subs	r6, #1
 800527c:	9214      	str	r2, [sp, #80]	@ 0x50
 800527e:	e777      	b.n	8005170 <_dtoa_r+0x100>
 8005280:	2301      	movs	r3, #1
 8005282:	e7b8      	b.n	80051f6 <_dtoa_r+0x186>
 8005284:	9012      	str	r0, [sp, #72]	@ 0x48
 8005286:	e7b7      	b.n	80051f8 <_dtoa_r+0x188>
 8005288:	427b      	negs	r3, r7
 800528a:	930a      	str	r3, [sp, #40]	@ 0x28
 800528c:	2300      	movs	r3, #0
 800528e:	eba8 0807 	sub.w	r8, r8, r7
 8005292:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005294:	e7c4      	b.n	8005220 <_dtoa_r+0x1b0>
 8005296:	2300      	movs	r3, #0
 8005298:	930b      	str	r3, [sp, #44]	@ 0x2c
 800529a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800529c:	2b00      	cmp	r3, #0
 800529e:	dc35      	bgt.n	800530c <_dtoa_r+0x29c>
 80052a0:	2301      	movs	r3, #1
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	9307      	str	r3, [sp, #28]
 80052a6:	461a      	mov	r2, r3
 80052a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80052aa:	e00b      	b.n	80052c4 <_dtoa_r+0x254>
 80052ac:	2301      	movs	r3, #1
 80052ae:	e7f3      	b.n	8005298 <_dtoa_r+0x228>
 80052b0:	2300      	movs	r3, #0
 80052b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052b6:	18fb      	adds	r3, r7, r3
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	3301      	adds	r3, #1
 80052bc:	2b01      	cmp	r3, #1
 80052be:	9307      	str	r3, [sp, #28]
 80052c0:	bfb8      	it	lt
 80052c2:	2301      	movlt	r3, #1
 80052c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80052c8:	2100      	movs	r1, #0
 80052ca:	2204      	movs	r2, #4
 80052cc:	f102 0514 	add.w	r5, r2, #20
 80052d0:	429d      	cmp	r5, r3
 80052d2:	d91f      	bls.n	8005314 <_dtoa_r+0x2a4>
 80052d4:	6041      	str	r1, [r0, #4]
 80052d6:	4658      	mov	r0, fp
 80052d8:	f000 fd8e 	bl	8005df8 <_Balloc>
 80052dc:	4682      	mov	sl, r0
 80052de:	2800      	cmp	r0, #0
 80052e0:	d13c      	bne.n	800535c <_dtoa_r+0x2ec>
 80052e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005350 <_dtoa_r+0x2e0>)
 80052e4:	4602      	mov	r2, r0
 80052e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80052ea:	e6d8      	b.n	800509e <_dtoa_r+0x2e>
 80052ec:	2301      	movs	r3, #1
 80052ee:	e7e0      	b.n	80052b2 <_dtoa_r+0x242>
 80052f0:	2401      	movs	r4, #1
 80052f2:	2300      	movs	r3, #0
 80052f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80052f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80052f8:	f04f 33ff 	mov.w	r3, #4294967295
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	9307      	str	r3, [sp, #28]
 8005300:	2200      	movs	r2, #0
 8005302:	2312      	movs	r3, #18
 8005304:	e7d0      	b.n	80052a8 <_dtoa_r+0x238>
 8005306:	2301      	movs	r3, #1
 8005308:	930b      	str	r3, [sp, #44]	@ 0x2c
 800530a:	e7f5      	b.n	80052f8 <_dtoa_r+0x288>
 800530c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	9307      	str	r3, [sp, #28]
 8005312:	e7d7      	b.n	80052c4 <_dtoa_r+0x254>
 8005314:	3101      	adds	r1, #1
 8005316:	0052      	lsls	r2, r2, #1
 8005318:	e7d8      	b.n	80052cc <_dtoa_r+0x25c>
 800531a:	bf00      	nop
 800531c:	f3af 8000 	nop.w
 8005320:	636f4361 	.word	0x636f4361
 8005324:	3fd287a7 	.word	0x3fd287a7
 8005328:	8b60c8b3 	.word	0x8b60c8b3
 800532c:	3fc68a28 	.word	0x3fc68a28
 8005330:	509f79fb 	.word	0x509f79fb
 8005334:	3fd34413 	.word	0x3fd34413
 8005338:	080086f6 	.word	0x080086f6
 800533c:	0800870d 	.word	0x0800870d
 8005340:	7ff00000 	.word	0x7ff00000
 8005344:	080086c1 	.word	0x080086c1
 8005348:	3ff80000 	.word	0x3ff80000
 800534c:	08008808 	.word	0x08008808
 8005350:	08008765 	.word	0x08008765
 8005354:	080086f2 	.word	0x080086f2
 8005358:	080086c0 	.word	0x080086c0
 800535c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005360:	6018      	str	r0, [r3, #0]
 8005362:	9b07      	ldr	r3, [sp, #28]
 8005364:	2b0e      	cmp	r3, #14
 8005366:	f200 80a4 	bhi.w	80054b2 <_dtoa_r+0x442>
 800536a:	2c00      	cmp	r4, #0
 800536c:	f000 80a1 	beq.w	80054b2 <_dtoa_r+0x442>
 8005370:	2f00      	cmp	r7, #0
 8005372:	dd33      	ble.n	80053dc <_dtoa_r+0x36c>
 8005374:	4bad      	ldr	r3, [pc, #692]	@ (800562c <_dtoa_r+0x5bc>)
 8005376:	f007 020f 	and.w	r2, r7, #15
 800537a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800537e:	ed93 7b00 	vldr	d7, [r3]
 8005382:	05f8      	lsls	r0, r7, #23
 8005384:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005388:	ea4f 1427 	mov.w	r4, r7, asr #4
 800538c:	d516      	bpl.n	80053bc <_dtoa_r+0x34c>
 800538e:	4ba8      	ldr	r3, [pc, #672]	@ (8005630 <_dtoa_r+0x5c0>)
 8005390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005394:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005398:	f7fb fa60 	bl	800085c <__aeabi_ddiv>
 800539c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053a0:	f004 040f 	and.w	r4, r4, #15
 80053a4:	2603      	movs	r6, #3
 80053a6:	4da2      	ldr	r5, [pc, #648]	@ (8005630 <_dtoa_r+0x5c0>)
 80053a8:	b954      	cbnz	r4, 80053c0 <_dtoa_r+0x350>
 80053aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053b2:	f7fb fa53 	bl	800085c <__aeabi_ddiv>
 80053b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053ba:	e028      	b.n	800540e <_dtoa_r+0x39e>
 80053bc:	2602      	movs	r6, #2
 80053be:	e7f2      	b.n	80053a6 <_dtoa_r+0x336>
 80053c0:	07e1      	lsls	r1, r4, #31
 80053c2:	d508      	bpl.n	80053d6 <_dtoa_r+0x366>
 80053c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80053cc:	f7fb f91c 	bl	8000608 <__aeabi_dmul>
 80053d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053d4:	3601      	adds	r6, #1
 80053d6:	1064      	asrs	r4, r4, #1
 80053d8:	3508      	adds	r5, #8
 80053da:	e7e5      	b.n	80053a8 <_dtoa_r+0x338>
 80053dc:	f000 80d2 	beq.w	8005584 <_dtoa_r+0x514>
 80053e0:	427c      	negs	r4, r7
 80053e2:	4b92      	ldr	r3, [pc, #584]	@ (800562c <_dtoa_r+0x5bc>)
 80053e4:	4d92      	ldr	r5, [pc, #584]	@ (8005630 <_dtoa_r+0x5c0>)
 80053e6:	f004 020f 	and.w	r2, r4, #15
 80053ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053f6:	f7fb f907 	bl	8000608 <__aeabi_dmul>
 80053fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053fe:	1124      	asrs	r4, r4, #4
 8005400:	2300      	movs	r3, #0
 8005402:	2602      	movs	r6, #2
 8005404:	2c00      	cmp	r4, #0
 8005406:	f040 80b2 	bne.w	800556e <_dtoa_r+0x4fe>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1d3      	bne.n	80053b6 <_dtoa_r+0x346>
 800540e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005410:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 80b7 	beq.w	8005588 <_dtoa_r+0x518>
 800541a:	4b86      	ldr	r3, [pc, #536]	@ (8005634 <_dtoa_r+0x5c4>)
 800541c:	2200      	movs	r2, #0
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	f7fb fb63 	bl	8000aec <__aeabi_dcmplt>
 8005426:	2800      	cmp	r0, #0
 8005428:	f000 80ae 	beq.w	8005588 <_dtoa_r+0x518>
 800542c:	9b07      	ldr	r3, [sp, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 80aa 	beq.w	8005588 <_dtoa_r+0x518>
 8005434:	9b00      	ldr	r3, [sp, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	dd37      	ble.n	80054aa <_dtoa_r+0x43a>
 800543a:	1e7b      	subs	r3, r7, #1
 800543c:	9304      	str	r3, [sp, #16]
 800543e:	4620      	mov	r0, r4
 8005440:	4b7d      	ldr	r3, [pc, #500]	@ (8005638 <_dtoa_r+0x5c8>)
 8005442:	2200      	movs	r2, #0
 8005444:	4629      	mov	r1, r5
 8005446:	f7fb f8df 	bl	8000608 <__aeabi_dmul>
 800544a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800544e:	9c00      	ldr	r4, [sp, #0]
 8005450:	3601      	adds	r6, #1
 8005452:	4630      	mov	r0, r6
 8005454:	f7fb f86e 	bl	8000534 <__aeabi_i2d>
 8005458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800545c:	f7fb f8d4 	bl	8000608 <__aeabi_dmul>
 8005460:	4b76      	ldr	r3, [pc, #472]	@ (800563c <_dtoa_r+0x5cc>)
 8005462:	2200      	movs	r2, #0
 8005464:	f7fa ff1a 	bl	800029c <__adddf3>
 8005468:	4605      	mov	r5, r0
 800546a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800546e:	2c00      	cmp	r4, #0
 8005470:	f040 808d 	bne.w	800558e <_dtoa_r+0x51e>
 8005474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005478:	4b71      	ldr	r3, [pc, #452]	@ (8005640 <_dtoa_r+0x5d0>)
 800547a:	2200      	movs	r2, #0
 800547c:	f7fa ff0c 	bl	8000298 <__aeabi_dsub>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005488:	462a      	mov	r2, r5
 800548a:	4633      	mov	r3, r6
 800548c:	f7fb fb4c 	bl	8000b28 <__aeabi_dcmpgt>
 8005490:	2800      	cmp	r0, #0
 8005492:	f040 828b 	bne.w	80059ac <_dtoa_r+0x93c>
 8005496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800549a:	462a      	mov	r2, r5
 800549c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80054a0:	f7fb fb24 	bl	8000aec <__aeabi_dcmplt>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f040 8128 	bne.w	80056fa <_dtoa_r+0x68a>
 80054aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80054ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80054b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f2c0 815a 	blt.w	800576e <_dtoa_r+0x6fe>
 80054ba:	2f0e      	cmp	r7, #14
 80054bc:	f300 8157 	bgt.w	800576e <_dtoa_r+0x6fe>
 80054c0:	4b5a      	ldr	r3, [pc, #360]	@ (800562c <_dtoa_r+0x5bc>)
 80054c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80054c6:	ed93 7b00 	vldr	d7, [r3]
 80054ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	ed8d 7b00 	vstr	d7, [sp]
 80054d2:	da03      	bge.n	80054dc <_dtoa_r+0x46c>
 80054d4:	9b07      	ldr	r3, [sp, #28]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f340 8101 	ble.w	80056de <_dtoa_r+0x66e>
 80054dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80054e0:	4656      	mov	r6, sl
 80054e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054e6:	4620      	mov	r0, r4
 80054e8:	4629      	mov	r1, r5
 80054ea:	f7fb f9b7 	bl	800085c <__aeabi_ddiv>
 80054ee:	f7fb fb3b 	bl	8000b68 <__aeabi_d2iz>
 80054f2:	4680      	mov	r8, r0
 80054f4:	f7fb f81e 	bl	8000534 <__aeabi_i2d>
 80054f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054fc:	f7fb f884 	bl	8000608 <__aeabi_dmul>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4620      	mov	r0, r4
 8005506:	4629      	mov	r1, r5
 8005508:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800550c:	f7fa fec4 	bl	8000298 <__aeabi_dsub>
 8005510:	f806 4b01 	strb.w	r4, [r6], #1
 8005514:	9d07      	ldr	r5, [sp, #28]
 8005516:	eba6 040a 	sub.w	r4, r6, sl
 800551a:	42a5      	cmp	r5, r4
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	f040 8117 	bne.w	8005752 <_dtoa_r+0x6e2>
 8005524:	f7fa feba 	bl	800029c <__adddf3>
 8005528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800552c:	4604      	mov	r4, r0
 800552e:	460d      	mov	r5, r1
 8005530:	f7fb fafa 	bl	8000b28 <__aeabi_dcmpgt>
 8005534:	2800      	cmp	r0, #0
 8005536:	f040 80f9 	bne.w	800572c <_dtoa_r+0x6bc>
 800553a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800553e:	4620      	mov	r0, r4
 8005540:	4629      	mov	r1, r5
 8005542:	f7fb fac9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005546:	b118      	cbz	r0, 8005550 <_dtoa_r+0x4e0>
 8005548:	f018 0f01 	tst.w	r8, #1
 800554c:	f040 80ee 	bne.w	800572c <_dtoa_r+0x6bc>
 8005550:	4649      	mov	r1, r9
 8005552:	4658      	mov	r0, fp
 8005554:	f000 fc90 	bl	8005e78 <_Bfree>
 8005558:	2300      	movs	r3, #0
 800555a:	7033      	strb	r3, [r6, #0]
 800555c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800555e:	3701      	adds	r7, #1
 8005560:	601f      	str	r7, [r3, #0]
 8005562:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 831d 	beq.w	8005ba4 <_dtoa_r+0xb34>
 800556a:	601e      	str	r6, [r3, #0]
 800556c:	e31a      	b.n	8005ba4 <_dtoa_r+0xb34>
 800556e:	07e2      	lsls	r2, r4, #31
 8005570:	d505      	bpl.n	800557e <_dtoa_r+0x50e>
 8005572:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005576:	f7fb f847 	bl	8000608 <__aeabi_dmul>
 800557a:	3601      	adds	r6, #1
 800557c:	2301      	movs	r3, #1
 800557e:	1064      	asrs	r4, r4, #1
 8005580:	3508      	adds	r5, #8
 8005582:	e73f      	b.n	8005404 <_dtoa_r+0x394>
 8005584:	2602      	movs	r6, #2
 8005586:	e742      	b.n	800540e <_dtoa_r+0x39e>
 8005588:	9c07      	ldr	r4, [sp, #28]
 800558a:	9704      	str	r7, [sp, #16]
 800558c:	e761      	b.n	8005452 <_dtoa_r+0x3e2>
 800558e:	4b27      	ldr	r3, [pc, #156]	@ (800562c <_dtoa_r+0x5bc>)
 8005590:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005592:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005596:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800559a:	4454      	add	r4, sl
 800559c:	2900      	cmp	r1, #0
 800559e:	d053      	beq.n	8005648 <_dtoa_r+0x5d8>
 80055a0:	4928      	ldr	r1, [pc, #160]	@ (8005644 <_dtoa_r+0x5d4>)
 80055a2:	2000      	movs	r0, #0
 80055a4:	f7fb f95a 	bl	800085c <__aeabi_ddiv>
 80055a8:	4633      	mov	r3, r6
 80055aa:	462a      	mov	r2, r5
 80055ac:	f7fa fe74 	bl	8000298 <__aeabi_dsub>
 80055b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055b4:	4656      	mov	r6, sl
 80055b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055ba:	f7fb fad5 	bl	8000b68 <__aeabi_d2iz>
 80055be:	4605      	mov	r5, r0
 80055c0:	f7fa ffb8 	bl	8000534 <__aeabi_i2d>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055cc:	f7fa fe64 	bl	8000298 <__aeabi_dsub>
 80055d0:	3530      	adds	r5, #48	@ 0x30
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055da:	f806 5b01 	strb.w	r5, [r6], #1
 80055de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055e2:	f7fb fa83 	bl	8000aec <__aeabi_dcmplt>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d171      	bne.n	80056ce <_dtoa_r+0x65e>
 80055ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055ee:	4911      	ldr	r1, [pc, #68]	@ (8005634 <_dtoa_r+0x5c4>)
 80055f0:	2000      	movs	r0, #0
 80055f2:	f7fa fe51 	bl	8000298 <__aeabi_dsub>
 80055f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055fa:	f7fb fa77 	bl	8000aec <__aeabi_dcmplt>
 80055fe:	2800      	cmp	r0, #0
 8005600:	f040 8095 	bne.w	800572e <_dtoa_r+0x6be>
 8005604:	42a6      	cmp	r6, r4
 8005606:	f43f af50 	beq.w	80054aa <_dtoa_r+0x43a>
 800560a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800560e:	4b0a      	ldr	r3, [pc, #40]	@ (8005638 <_dtoa_r+0x5c8>)
 8005610:	2200      	movs	r2, #0
 8005612:	f7fa fff9 	bl	8000608 <__aeabi_dmul>
 8005616:	4b08      	ldr	r3, [pc, #32]	@ (8005638 <_dtoa_r+0x5c8>)
 8005618:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800561c:	2200      	movs	r2, #0
 800561e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005622:	f7fa fff1 	bl	8000608 <__aeabi_dmul>
 8005626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800562a:	e7c4      	b.n	80055b6 <_dtoa_r+0x546>
 800562c:	08008808 	.word	0x08008808
 8005630:	080087e0 	.word	0x080087e0
 8005634:	3ff00000 	.word	0x3ff00000
 8005638:	40240000 	.word	0x40240000
 800563c:	401c0000 	.word	0x401c0000
 8005640:	40140000 	.word	0x40140000
 8005644:	3fe00000 	.word	0x3fe00000
 8005648:	4631      	mov	r1, r6
 800564a:	4628      	mov	r0, r5
 800564c:	f7fa ffdc 	bl	8000608 <__aeabi_dmul>
 8005650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005654:	9415      	str	r4, [sp, #84]	@ 0x54
 8005656:	4656      	mov	r6, sl
 8005658:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800565c:	f7fb fa84 	bl	8000b68 <__aeabi_d2iz>
 8005660:	4605      	mov	r5, r0
 8005662:	f7fa ff67 	bl	8000534 <__aeabi_i2d>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800566e:	f7fa fe13 	bl	8000298 <__aeabi_dsub>
 8005672:	3530      	adds	r5, #48	@ 0x30
 8005674:	f806 5b01 	strb.w	r5, [r6], #1
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	42a6      	cmp	r6, r4
 800567e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	d124      	bne.n	80056d2 <_dtoa_r+0x662>
 8005688:	4bac      	ldr	r3, [pc, #688]	@ (800593c <_dtoa_r+0x8cc>)
 800568a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800568e:	f7fa fe05 	bl	800029c <__adddf3>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800569a:	f7fb fa45 	bl	8000b28 <__aeabi_dcmpgt>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d145      	bne.n	800572e <_dtoa_r+0x6be>
 80056a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056a6:	49a5      	ldr	r1, [pc, #660]	@ (800593c <_dtoa_r+0x8cc>)
 80056a8:	2000      	movs	r0, #0
 80056aa:	f7fa fdf5 	bl	8000298 <__aeabi_dsub>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056b6:	f7fb fa19 	bl	8000aec <__aeabi_dcmplt>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	f43f aef5 	beq.w	80054aa <_dtoa_r+0x43a>
 80056c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80056c2:	1e73      	subs	r3, r6, #1
 80056c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80056c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80056ca:	2b30      	cmp	r3, #48	@ 0x30
 80056cc:	d0f8      	beq.n	80056c0 <_dtoa_r+0x650>
 80056ce:	9f04      	ldr	r7, [sp, #16]
 80056d0:	e73e      	b.n	8005550 <_dtoa_r+0x4e0>
 80056d2:	4b9b      	ldr	r3, [pc, #620]	@ (8005940 <_dtoa_r+0x8d0>)
 80056d4:	f7fa ff98 	bl	8000608 <__aeabi_dmul>
 80056d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056dc:	e7bc      	b.n	8005658 <_dtoa_r+0x5e8>
 80056de:	d10c      	bne.n	80056fa <_dtoa_r+0x68a>
 80056e0:	4b98      	ldr	r3, [pc, #608]	@ (8005944 <_dtoa_r+0x8d4>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056e8:	f7fa ff8e 	bl	8000608 <__aeabi_dmul>
 80056ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056f0:	f7fb fa10 	bl	8000b14 <__aeabi_dcmpge>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	f000 8157 	beq.w	80059a8 <_dtoa_r+0x938>
 80056fa:	2400      	movs	r4, #0
 80056fc:	4625      	mov	r5, r4
 80056fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005700:	43db      	mvns	r3, r3
 8005702:	9304      	str	r3, [sp, #16]
 8005704:	4656      	mov	r6, sl
 8005706:	2700      	movs	r7, #0
 8005708:	4621      	mov	r1, r4
 800570a:	4658      	mov	r0, fp
 800570c:	f000 fbb4 	bl	8005e78 <_Bfree>
 8005710:	2d00      	cmp	r5, #0
 8005712:	d0dc      	beq.n	80056ce <_dtoa_r+0x65e>
 8005714:	b12f      	cbz	r7, 8005722 <_dtoa_r+0x6b2>
 8005716:	42af      	cmp	r7, r5
 8005718:	d003      	beq.n	8005722 <_dtoa_r+0x6b2>
 800571a:	4639      	mov	r1, r7
 800571c:	4658      	mov	r0, fp
 800571e:	f000 fbab 	bl	8005e78 <_Bfree>
 8005722:	4629      	mov	r1, r5
 8005724:	4658      	mov	r0, fp
 8005726:	f000 fba7 	bl	8005e78 <_Bfree>
 800572a:	e7d0      	b.n	80056ce <_dtoa_r+0x65e>
 800572c:	9704      	str	r7, [sp, #16]
 800572e:	4633      	mov	r3, r6
 8005730:	461e      	mov	r6, r3
 8005732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005736:	2a39      	cmp	r2, #57	@ 0x39
 8005738:	d107      	bne.n	800574a <_dtoa_r+0x6da>
 800573a:	459a      	cmp	sl, r3
 800573c:	d1f8      	bne.n	8005730 <_dtoa_r+0x6c0>
 800573e:	9a04      	ldr	r2, [sp, #16]
 8005740:	3201      	adds	r2, #1
 8005742:	9204      	str	r2, [sp, #16]
 8005744:	2230      	movs	r2, #48	@ 0x30
 8005746:	f88a 2000 	strb.w	r2, [sl]
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	3201      	adds	r2, #1
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	e7bd      	b.n	80056ce <_dtoa_r+0x65e>
 8005752:	4b7b      	ldr	r3, [pc, #492]	@ (8005940 <_dtoa_r+0x8d0>)
 8005754:	2200      	movs	r2, #0
 8005756:	f7fa ff57 	bl	8000608 <__aeabi_dmul>
 800575a:	2200      	movs	r2, #0
 800575c:	2300      	movs	r3, #0
 800575e:	4604      	mov	r4, r0
 8005760:	460d      	mov	r5, r1
 8005762:	f7fb f9b9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005766:	2800      	cmp	r0, #0
 8005768:	f43f aebb 	beq.w	80054e2 <_dtoa_r+0x472>
 800576c:	e6f0      	b.n	8005550 <_dtoa_r+0x4e0>
 800576e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005770:	2a00      	cmp	r2, #0
 8005772:	f000 80db 	beq.w	800592c <_dtoa_r+0x8bc>
 8005776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005778:	2a01      	cmp	r2, #1
 800577a:	f300 80bf 	bgt.w	80058fc <_dtoa_r+0x88c>
 800577e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005780:	2a00      	cmp	r2, #0
 8005782:	f000 80b7 	beq.w	80058f4 <_dtoa_r+0x884>
 8005786:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800578a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800578c:	4646      	mov	r6, r8
 800578e:	9a08      	ldr	r2, [sp, #32]
 8005790:	2101      	movs	r1, #1
 8005792:	441a      	add	r2, r3
 8005794:	4658      	mov	r0, fp
 8005796:	4498      	add	r8, r3
 8005798:	9208      	str	r2, [sp, #32]
 800579a:	f000 fc6b 	bl	8006074 <__i2b>
 800579e:	4605      	mov	r5, r0
 80057a0:	b15e      	cbz	r6, 80057ba <_dtoa_r+0x74a>
 80057a2:	9b08      	ldr	r3, [sp, #32]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	dd08      	ble.n	80057ba <_dtoa_r+0x74a>
 80057a8:	42b3      	cmp	r3, r6
 80057aa:	9a08      	ldr	r2, [sp, #32]
 80057ac:	bfa8      	it	ge
 80057ae:	4633      	movge	r3, r6
 80057b0:	eba8 0803 	sub.w	r8, r8, r3
 80057b4:	1af6      	subs	r6, r6, r3
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	9308      	str	r3, [sp, #32]
 80057ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057bc:	b1f3      	cbz	r3, 80057fc <_dtoa_r+0x78c>
 80057be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80b7 	beq.w	8005934 <_dtoa_r+0x8c4>
 80057c6:	b18c      	cbz	r4, 80057ec <_dtoa_r+0x77c>
 80057c8:	4629      	mov	r1, r5
 80057ca:	4622      	mov	r2, r4
 80057cc:	4658      	mov	r0, fp
 80057ce:	f000 fd11 	bl	80061f4 <__pow5mult>
 80057d2:	464a      	mov	r2, r9
 80057d4:	4601      	mov	r1, r0
 80057d6:	4605      	mov	r5, r0
 80057d8:	4658      	mov	r0, fp
 80057da:	f000 fc61 	bl	80060a0 <__multiply>
 80057de:	4649      	mov	r1, r9
 80057e0:	9004      	str	r0, [sp, #16]
 80057e2:	4658      	mov	r0, fp
 80057e4:	f000 fb48 	bl	8005e78 <_Bfree>
 80057e8:	9b04      	ldr	r3, [sp, #16]
 80057ea:	4699      	mov	r9, r3
 80057ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057ee:	1b1a      	subs	r2, r3, r4
 80057f0:	d004      	beq.n	80057fc <_dtoa_r+0x78c>
 80057f2:	4649      	mov	r1, r9
 80057f4:	4658      	mov	r0, fp
 80057f6:	f000 fcfd 	bl	80061f4 <__pow5mult>
 80057fa:	4681      	mov	r9, r0
 80057fc:	2101      	movs	r1, #1
 80057fe:	4658      	mov	r0, fp
 8005800:	f000 fc38 	bl	8006074 <__i2b>
 8005804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005806:	4604      	mov	r4, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 81cf 	beq.w	8005bac <_dtoa_r+0xb3c>
 800580e:	461a      	mov	r2, r3
 8005810:	4601      	mov	r1, r0
 8005812:	4658      	mov	r0, fp
 8005814:	f000 fcee 	bl	80061f4 <__pow5mult>
 8005818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800581a:	2b01      	cmp	r3, #1
 800581c:	4604      	mov	r4, r0
 800581e:	f300 8095 	bgt.w	800594c <_dtoa_r+0x8dc>
 8005822:	9b02      	ldr	r3, [sp, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f040 8087 	bne.w	8005938 <_dtoa_r+0x8c8>
 800582a:	9b03      	ldr	r3, [sp, #12]
 800582c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005830:	2b00      	cmp	r3, #0
 8005832:	f040 8089 	bne.w	8005948 <_dtoa_r+0x8d8>
 8005836:	9b03      	ldr	r3, [sp, #12]
 8005838:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800583c:	0d1b      	lsrs	r3, r3, #20
 800583e:	051b      	lsls	r3, r3, #20
 8005840:	b12b      	cbz	r3, 800584e <_dtoa_r+0x7de>
 8005842:	9b08      	ldr	r3, [sp, #32]
 8005844:	3301      	adds	r3, #1
 8005846:	9308      	str	r3, [sp, #32]
 8005848:	f108 0801 	add.w	r8, r8, #1
 800584c:	2301      	movs	r3, #1
 800584e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 81b0 	beq.w	8005bb8 <_dtoa_r+0xb48>
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800585e:	6918      	ldr	r0, [r3, #16]
 8005860:	f000 fbbc 	bl	8005fdc <__hi0bits>
 8005864:	f1c0 0020 	rsb	r0, r0, #32
 8005868:	9b08      	ldr	r3, [sp, #32]
 800586a:	4418      	add	r0, r3
 800586c:	f010 001f 	ands.w	r0, r0, #31
 8005870:	d077      	beq.n	8005962 <_dtoa_r+0x8f2>
 8005872:	f1c0 0320 	rsb	r3, r0, #32
 8005876:	2b04      	cmp	r3, #4
 8005878:	dd6b      	ble.n	8005952 <_dtoa_r+0x8e2>
 800587a:	9b08      	ldr	r3, [sp, #32]
 800587c:	f1c0 001c 	rsb	r0, r0, #28
 8005880:	4403      	add	r3, r0
 8005882:	4480      	add	r8, r0
 8005884:	4406      	add	r6, r0
 8005886:	9308      	str	r3, [sp, #32]
 8005888:	f1b8 0f00 	cmp.w	r8, #0
 800588c:	dd05      	ble.n	800589a <_dtoa_r+0x82a>
 800588e:	4649      	mov	r1, r9
 8005890:	4642      	mov	r2, r8
 8005892:	4658      	mov	r0, fp
 8005894:	f000 fd08 	bl	80062a8 <__lshift>
 8005898:	4681      	mov	r9, r0
 800589a:	9b08      	ldr	r3, [sp, #32]
 800589c:	2b00      	cmp	r3, #0
 800589e:	dd05      	ble.n	80058ac <_dtoa_r+0x83c>
 80058a0:	4621      	mov	r1, r4
 80058a2:	461a      	mov	r2, r3
 80058a4:	4658      	mov	r0, fp
 80058a6:	f000 fcff 	bl	80062a8 <__lshift>
 80058aa:	4604      	mov	r4, r0
 80058ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d059      	beq.n	8005966 <_dtoa_r+0x8f6>
 80058b2:	4621      	mov	r1, r4
 80058b4:	4648      	mov	r0, r9
 80058b6:	f000 fd63 	bl	8006380 <__mcmp>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	da53      	bge.n	8005966 <_dtoa_r+0x8f6>
 80058be:	1e7b      	subs	r3, r7, #1
 80058c0:	9304      	str	r3, [sp, #16]
 80058c2:	4649      	mov	r1, r9
 80058c4:	2300      	movs	r3, #0
 80058c6:	220a      	movs	r2, #10
 80058c8:	4658      	mov	r0, fp
 80058ca:	f000 faf7 	bl	8005ebc <__multadd>
 80058ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058d0:	4681      	mov	r9, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 8172 	beq.w	8005bbc <_dtoa_r+0xb4c>
 80058d8:	2300      	movs	r3, #0
 80058da:	4629      	mov	r1, r5
 80058dc:	220a      	movs	r2, #10
 80058de:	4658      	mov	r0, fp
 80058e0:	f000 faec 	bl	8005ebc <__multadd>
 80058e4:	9b00      	ldr	r3, [sp, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	4605      	mov	r5, r0
 80058ea:	dc67      	bgt.n	80059bc <_dtoa_r+0x94c>
 80058ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	dc41      	bgt.n	8005976 <_dtoa_r+0x906>
 80058f2:	e063      	b.n	80059bc <_dtoa_r+0x94c>
 80058f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80058f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80058fa:	e746      	b.n	800578a <_dtoa_r+0x71a>
 80058fc:	9b07      	ldr	r3, [sp, #28]
 80058fe:	1e5c      	subs	r4, r3, #1
 8005900:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005902:	42a3      	cmp	r3, r4
 8005904:	bfbf      	itttt	lt
 8005906:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005908:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800590a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800590c:	1ae3      	sublt	r3, r4, r3
 800590e:	bfb4      	ite	lt
 8005910:	18d2      	addlt	r2, r2, r3
 8005912:	1b1c      	subge	r4, r3, r4
 8005914:	9b07      	ldr	r3, [sp, #28]
 8005916:	bfbc      	itt	lt
 8005918:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800591a:	2400      	movlt	r4, #0
 800591c:	2b00      	cmp	r3, #0
 800591e:	bfb5      	itete	lt
 8005920:	eba8 0603 	sublt.w	r6, r8, r3
 8005924:	9b07      	ldrge	r3, [sp, #28]
 8005926:	2300      	movlt	r3, #0
 8005928:	4646      	movge	r6, r8
 800592a:	e730      	b.n	800578e <_dtoa_r+0x71e>
 800592c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800592e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005930:	4646      	mov	r6, r8
 8005932:	e735      	b.n	80057a0 <_dtoa_r+0x730>
 8005934:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005936:	e75c      	b.n	80057f2 <_dtoa_r+0x782>
 8005938:	2300      	movs	r3, #0
 800593a:	e788      	b.n	800584e <_dtoa_r+0x7de>
 800593c:	3fe00000 	.word	0x3fe00000
 8005940:	40240000 	.word	0x40240000
 8005944:	40140000 	.word	0x40140000
 8005948:	9b02      	ldr	r3, [sp, #8]
 800594a:	e780      	b.n	800584e <_dtoa_r+0x7de>
 800594c:	2300      	movs	r3, #0
 800594e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005950:	e782      	b.n	8005858 <_dtoa_r+0x7e8>
 8005952:	d099      	beq.n	8005888 <_dtoa_r+0x818>
 8005954:	9a08      	ldr	r2, [sp, #32]
 8005956:	331c      	adds	r3, #28
 8005958:	441a      	add	r2, r3
 800595a:	4498      	add	r8, r3
 800595c:	441e      	add	r6, r3
 800595e:	9208      	str	r2, [sp, #32]
 8005960:	e792      	b.n	8005888 <_dtoa_r+0x818>
 8005962:	4603      	mov	r3, r0
 8005964:	e7f6      	b.n	8005954 <_dtoa_r+0x8e4>
 8005966:	9b07      	ldr	r3, [sp, #28]
 8005968:	9704      	str	r7, [sp, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	dc20      	bgt.n	80059b0 <_dtoa_r+0x940>
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005972:	2b02      	cmp	r3, #2
 8005974:	dd1e      	ble.n	80059b4 <_dtoa_r+0x944>
 8005976:	9b00      	ldr	r3, [sp, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	f47f aec0 	bne.w	80056fe <_dtoa_r+0x68e>
 800597e:	4621      	mov	r1, r4
 8005980:	2205      	movs	r2, #5
 8005982:	4658      	mov	r0, fp
 8005984:	f000 fa9a 	bl	8005ebc <__multadd>
 8005988:	4601      	mov	r1, r0
 800598a:	4604      	mov	r4, r0
 800598c:	4648      	mov	r0, r9
 800598e:	f000 fcf7 	bl	8006380 <__mcmp>
 8005992:	2800      	cmp	r0, #0
 8005994:	f77f aeb3 	ble.w	80056fe <_dtoa_r+0x68e>
 8005998:	4656      	mov	r6, sl
 800599a:	2331      	movs	r3, #49	@ 0x31
 800599c:	f806 3b01 	strb.w	r3, [r6], #1
 80059a0:	9b04      	ldr	r3, [sp, #16]
 80059a2:	3301      	adds	r3, #1
 80059a4:	9304      	str	r3, [sp, #16]
 80059a6:	e6ae      	b.n	8005706 <_dtoa_r+0x696>
 80059a8:	9c07      	ldr	r4, [sp, #28]
 80059aa:	9704      	str	r7, [sp, #16]
 80059ac:	4625      	mov	r5, r4
 80059ae:	e7f3      	b.n	8005998 <_dtoa_r+0x928>
 80059b0:	9b07      	ldr	r3, [sp, #28]
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 8104 	beq.w	8005bc4 <_dtoa_r+0xb54>
 80059bc:	2e00      	cmp	r6, #0
 80059be:	dd05      	ble.n	80059cc <_dtoa_r+0x95c>
 80059c0:	4629      	mov	r1, r5
 80059c2:	4632      	mov	r2, r6
 80059c4:	4658      	mov	r0, fp
 80059c6:	f000 fc6f 	bl	80062a8 <__lshift>
 80059ca:	4605      	mov	r5, r0
 80059cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d05a      	beq.n	8005a88 <_dtoa_r+0xa18>
 80059d2:	6869      	ldr	r1, [r5, #4]
 80059d4:	4658      	mov	r0, fp
 80059d6:	f000 fa0f 	bl	8005df8 <_Balloc>
 80059da:	4606      	mov	r6, r0
 80059dc:	b928      	cbnz	r0, 80059ea <_dtoa_r+0x97a>
 80059de:	4b84      	ldr	r3, [pc, #528]	@ (8005bf0 <_dtoa_r+0xb80>)
 80059e0:	4602      	mov	r2, r0
 80059e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80059e6:	f7ff bb5a 	b.w	800509e <_dtoa_r+0x2e>
 80059ea:	692a      	ldr	r2, [r5, #16]
 80059ec:	3202      	adds	r2, #2
 80059ee:	0092      	lsls	r2, r2, #2
 80059f0:	f105 010c 	add.w	r1, r5, #12
 80059f4:	300c      	adds	r0, #12
 80059f6:	f001 ff75 	bl	80078e4 <memcpy>
 80059fa:	2201      	movs	r2, #1
 80059fc:	4631      	mov	r1, r6
 80059fe:	4658      	mov	r0, fp
 8005a00:	f000 fc52 	bl	80062a8 <__lshift>
 8005a04:	f10a 0301 	add.w	r3, sl, #1
 8005a08:	9307      	str	r3, [sp, #28]
 8005a0a:	9b00      	ldr	r3, [sp, #0]
 8005a0c:	4453      	add	r3, sl
 8005a0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a10:	9b02      	ldr	r3, [sp, #8]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	462f      	mov	r7, r5
 8005a18:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	9b07      	ldr	r3, [sp, #28]
 8005a1e:	4621      	mov	r1, r4
 8005a20:	3b01      	subs	r3, #1
 8005a22:	4648      	mov	r0, r9
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	f7ff fa99 	bl	8004f5c <quorem>
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	9002      	str	r0, [sp, #8]
 8005a2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005a32:	4648      	mov	r0, r9
 8005a34:	f000 fca4 	bl	8006380 <__mcmp>
 8005a38:	462a      	mov	r2, r5
 8005a3a:	9008      	str	r0, [sp, #32]
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4658      	mov	r0, fp
 8005a40:	f000 fcba 	bl	80063b8 <__mdiff>
 8005a44:	68c2      	ldr	r2, [r0, #12]
 8005a46:	4606      	mov	r6, r0
 8005a48:	bb02      	cbnz	r2, 8005a8c <_dtoa_r+0xa1c>
 8005a4a:	4601      	mov	r1, r0
 8005a4c:	4648      	mov	r0, r9
 8005a4e:	f000 fc97 	bl	8006380 <__mcmp>
 8005a52:	4602      	mov	r2, r0
 8005a54:	4631      	mov	r1, r6
 8005a56:	4658      	mov	r0, fp
 8005a58:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a5a:	f000 fa0d 	bl	8005e78 <_Bfree>
 8005a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a62:	9e07      	ldr	r6, [sp, #28]
 8005a64:	ea43 0102 	orr.w	r1, r3, r2
 8005a68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a6a:	4319      	orrs	r1, r3
 8005a6c:	d110      	bne.n	8005a90 <_dtoa_r+0xa20>
 8005a6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a72:	d029      	beq.n	8005ac8 <_dtoa_r+0xa58>
 8005a74:	9b08      	ldr	r3, [sp, #32]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	dd02      	ble.n	8005a80 <_dtoa_r+0xa10>
 8005a7a:	9b02      	ldr	r3, [sp, #8]
 8005a7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005a80:	9b00      	ldr	r3, [sp, #0]
 8005a82:	f883 8000 	strb.w	r8, [r3]
 8005a86:	e63f      	b.n	8005708 <_dtoa_r+0x698>
 8005a88:	4628      	mov	r0, r5
 8005a8a:	e7bb      	b.n	8005a04 <_dtoa_r+0x994>
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	e7e1      	b.n	8005a54 <_dtoa_r+0x9e4>
 8005a90:	9b08      	ldr	r3, [sp, #32]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	db04      	blt.n	8005aa0 <_dtoa_r+0xa30>
 8005a96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a98:	430b      	orrs	r3, r1
 8005a9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	d120      	bne.n	8005ae2 <_dtoa_r+0xa72>
 8005aa0:	2a00      	cmp	r2, #0
 8005aa2:	dded      	ble.n	8005a80 <_dtoa_r+0xa10>
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	4658      	mov	r0, fp
 8005aaa:	f000 fbfd 	bl	80062a8 <__lshift>
 8005aae:	4621      	mov	r1, r4
 8005ab0:	4681      	mov	r9, r0
 8005ab2:	f000 fc65 	bl	8006380 <__mcmp>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	dc03      	bgt.n	8005ac2 <_dtoa_r+0xa52>
 8005aba:	d1e1      	bne.n	8005a80 <_dtoa_r+0xa10>
 8005abc:	f018 0f01 	tst.w	r8, #1
 8005ac0:	d0de      	beq.n	8005a80 <_dtoa_r+0xa10>
 8005ac2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005ac6:	d1d8      	bne.n	8005a7a <_dtoa_r+0xa0a>
 8005ac8:	9a00      	ldr	r2, [sp, #0]
 8005aca:	2339      	movs	r3, #57	@ 0x39
 8005acc:	7013      	strb	r3, [r2, #0]
 8005ace:	4633      	mov	r3, r6
 8005ad0:	461e      	mov	r6, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005ad8:	2a39      	cmp	r2, #57	@ 0x39
 8005ada:	d052      	beq.n	8005b82 <_dtoa_r+0xb12>
 8005adc:	3201      	adds	r2, #1
 8005ade:	701a      	strb	r2, [r3, #0]
 8005ae0:	e612      	b.n	8005708 <_dtoa_r+0x698>
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	dd07      	ble.n	8005af6 <_dtoa_r+0xa86>
 8005ae6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005aea:	d0ed      	beq.n	8005ac8 <_dtoa_r+0xa58>
 8005aec:	9a00      	ldr	r2, [sp, #0]
 8005aee:	f108 0301 	add.w	r3, r8, #1
 8005af2:	7013      	strb	r3, [r2, #0]
 8005af4:	e608      	b.n	8005708 <_dtoa_r+0x698>
 8005af6:	9b07      	ldr	r3, [sp, #28]
 8005af8:	9a07      	ldr	r2, [sp, #28]
 8005afa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005afe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d028      	beq.n	8005b56 <_dtoa_r+0xae6>
 8005b04:	4649      	mov	r1, r9
 8005b06:	2300      	movs	r3, #0
 8005b08:	220a      	movs	r2, #10
 8005b0a:	4658      	mov	r0, fp
 8005b0c:	f000 f9d6 	bl	8005ebc <__multadd>
 8005b10:	42af      	cmp	r7, r5
 8005b12:	4681      	mov	r9, r0
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	f04f 020a 	mov.w	r2, #10
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	4658      	mov	r0, fp
 8005b20:	d107      	bne.n	8005b32 <_dtoa_r+0xac2>
 8005b22:	f000 f9cb 	bl	8005ebc <__multadd>
 8005b26:	4607      	mov	r7, r0
 8005b28:	4605      	mov	r5, r0
 8005b2a:	9b07      	ldr	r3, [sp, #28]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	9307      	str	r3, [sp, #28]
 8005b30:	e774      	b.n	8005a1c <_dtoa_r+0x9ac>
 8005b32:	f000 f9c3 	bl	8005ebc <__multadd>
 8005b36:	4629      	mov	r1, r5
 8005b38:	4607      	mov	r7, r0
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	220a      	movs	r2, #10
 8005b3e:	4658      	mov	r0, fp
 8005b40:	f000 f9bc 	bl	8005ebc <__multadd>
 8005b44:	4605      	mov	r5, r0
 8005b46:	e7f0      	b.n	8005b2a <_dtoa_r+0xaba>
 8005b48:	9b00      	ldr	r3, [sp, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	bfcc      	ite	gt
 8005b4e:	461e      	movgt	r6, r3
 8005b50:	2601      	movle	r6, #1
 8005b52:	4456      	add	r6, sl
 8005b54:	2700      	movs	r7, #0
 8005b56:	4649      	mov	r1, r9
 8005b58:	2201      	movs	r2, #1
 8005b5a:	4658      	mov	r0, fp
 8005b5c:	f000 fba4 	bl	80062a8 <__lshift>
 8005b60:	4621      	mov	r1, r4
 8005b62:	4681      	mov	r9, r0
 8005b64:	f000 fc0c 	bl	8006380 <__mcmp>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	dcb0      	bgt.n	8005ace <_dtoa_r+0xa5e>
 8005b6c:	d102      	bne.n	8005b74 <_dtoa_r+0xb04>
 8005b6e:	f018 0f01 	tst.w	r8, #1
 8005b72:	d1ac      	bne.n	8005ace <_dtoa_r+0xa5e>
 8005b74:	4633      	mov	r3, r6
 8005b76:	461e      	mov	r6, r3
 8005b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b7c:	2a30      	cmp	r2, #48	@ 0x30
 8005b7e:	d0fa      	beq.n	8005b76 <_dtoa_r+0xb06>
 8005b80:	e5c2      	b.n	8005708 <_dtoa_r+0x698>
 8005b82:	459a      	cmp	sl, r3
 8005b84:	d1a4      	bne.n	8005ad0 <_dtoa_r+0xa60>
 8005b86:	9b04      	ldr	r3, [sp, #16]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	9304      	str	r3, [sp, #16]
 8005b8c:	2331      	movs	r3, #49	@ 0x31
 8005b8e:	f88a 3000 	strb.w	r3, [sl]
 8005b92:	e5b9      	b.n	8005708 <_dtoa_r+0x698>
 8005b94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005bf4 <_dtoa_r+0xb84>
 8005b9a:	b11b      	cbz	r3, 8005ba4 <_dtoa_r+0xb34>
 8005b9c:	f10a 0308 	add.w	r3, sl, #8
 8005ba0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	4650      	mov	r0, sl
 8005ba6:	b019      	add	sp, #100	@ 0x64
 8005ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	f77f ae37 	ble.w	8005822 <_dtoa_r+0x7b2>
 8005bb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bb8:	2001      	movs	r0, #1
 8005bba:	e655      	b.n	8005868 <_dtoa_r+0x7f8>
 8005bbc:	9b00      	ldr	r3, [sp, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f77f aed6 	ble.w	8005970 <_dtoa_r+0x900>
 8005bc4:	4656      	mov	r6, sl
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4648      	mov	r0, r9
 8005bca:	f7ff f9c7 	bl	8004f5c <quorem>
 8005bce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005bd2:	f806 8b01 	strb.w	r8, [r6], #1
 8005bd6:	9b00      	ldr	r3, [sp, #0]
 8005bd8:	eba6 020a 	sub.w	r2, r6, sl
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	ddb3      	ble.n	8005b48 <_dtoa_r+0xad8>
 8005be0:	4649      	mov	r1, r9
 8005be2:	2300      	movs	r3, #0
 8005be4:	220a      	movs	r2, #10
 8005be6:	4658      	mov	r0, fp
 8005be8:	f000 f968 	bl	8005ebc <__multadd>
 8005bec:	4681      	mov	r9, r0
 8005bee:	e7ea      	b.n	8005bc6 <_dtoa_r+0xb56>
 8005bf0:	08008765 	.word	0x08008765
 8005bf4:	080086e9 	.word	0x080086e9

08005bf8 <_free_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	2900      	cmp	r1, #0
 8005bfe:	d041      	beq.n	8005c84 <_free_r+0x8c>
 8005c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c04:	1f0c      	subs	r4, r1, #4
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	bfb8      	it	lt
 8005c0a:	18e4      	addlt	r4, r4, r3
 8005c0c:	f000 f8e8 	bl	8005de0 <__malloc_lock>
 8005c10:	4a1d      	ldr	r2, [pc, #116]	@ (8005c88 <_free_r+0x90>)
 8005c12:	6813      	ldr	r3, [r2, #0]
 8005c14:	b933      	cbnz	r3, 8005c24 <_free_r+0x2c>
 8005c16:	6063      	str	r3, [r4, #4]
 8005c18:	6014      	str	r4, [r2, #0]
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c20:	f000 b8e4 	b.w	8005dec <__malloc_unlock>
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	d908      	bls.n	8005c3a <_free_r+0x42>
 8005c28:	6820      	ldr	r0, [r4, #0]
 8005c2a:	1821      	adds	r1, r4, r0
 8005c2c:	428b      	cmp	r3, r1
 8005c2e:	bf01      	itttt	eq
 8005c30:	6819      	ldreq	r1, [r3, #0]
 8005c32:	685b      	ldreq	r3, [r3, #4]
 8005c34:	1809      	addeq	r1, r1, r0
 8005c36:	6021      	streq	r1, [r4, #0]
 8005c38:	e7ed      	b.n	8005c16 <_free_r+0x1e>
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	b10b      	cbz	r3, 8005c44 <_free_r+0x4c>
 8005c40:	42a3      	cmp	r3, r4
 8005c42:	d9fa      	bls.n	8005c3a <_free_r+0x42>
 8005c44:	6811      	ldr	r1, [r2, #0]
 8005c46:	1850      	adds	r0, r2, r1
 8005c48:	42a0      	cmp	r0, r4
 8005c4a:	d10b      	bne.n	8005c64 <_free_r+0x6c>
 8005c4c:	6820      	ldr	r0, [r4, #0]
 8005c4e:	4401      	add	r1, r0
 8005c50:	1850      	adds	r0, r2, r1
 8005c52:	4283      	cmp	r3, r0
 8005c54:	6011      	str	r1, [r2, #0]
 8005c56:	d1e0      	bne.n	8005c1a <_free_r+0x22>
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	6053      	str	r3, [r2, #4]
 8005c5e:	4408      	add	r0, r1
 8005c60:	6010      	str	r0, [r2, #0]
 8005c62:	e7da      	b.n	8005c1a <_free_r+0x22>
 8005c64:	d902      	bls.n	8005c6c <_free_r+0x74>
 8005c66:	230c      	movs	r3, #12
 8005c68:	602b      	str	r3, [r5, #0]
 8005c6a:	e7d6      	b.n	8005c1a <_free_r+0x22>
 8005c6c:	6820      	ldr	r0, [r4, #0]
 8005c6e:	1821      	adds	r1, r4, r0
 8005c70:	428b      	cmp	r3, r1
 8005c72:	bf04      	itt	eq
 8005c74:	6819      	ldreq	r1, [r3, #0]
 8005c76:	685b      	ldreq	r3, [r3, #4]
 8005c78:	6063      	str	r3, [r4, #4]
 8005c7a:	bf04      	itt	eq
 8005c7c:	1809      	addeq	r1, r1, r0
 8005c7e:	6021      	streq	r1, [r4, #0]
 8005c80:	6054      	str	r4, [r2, #4]
 8005c82:	e7ca      	b.n	8005c1a <_free_r+0x22>
 8005c84:	bd38      	pop	{r3, r4, r5, pc}
 8005c86:	bf00      	nop
 8005c88:	200004a4 	.word	0x200004a4

08005c8c <malloc>:
 8005c8c:	4b02      	ldr	r3, [pc, #8]	@ (8005c98 <malloc+0xc>)
 8005c8e:	4601      	mov	r1, r0
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	f000 b825 	b.w	8005ce0 <_malloc_r>
 8005c96:	bf00      	nop
 8005c98:	2000001c 	.word	0x2000001c

08005c9c <sbrk_aligned>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4e0f      	ldr	r6, [pc, #60]	@ (8005cdc <sbrk_aligned+0x40>)
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	6831      	ldr	r1, [r6, #0]
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	b911      	cbnz	r1, 8005cae <sbrk_aligned+0x12>
 8005ca8:	f001 fe0c 	bl	80078c4 <_sbrk_r>
 8005cac:	6030      	str	r0, [r6, #0]
 8005cae:	4621      	mov	r1, r4
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f001 fe07 	bl	80078c4 <_sbrk_r>
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	d103      	bne.n	8005cc2 <sbrk_aligned+0x26>
 8005cba:	f04f 34ff 	mov.w	r4, #4294967295
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	bd70      	pop	{r4, r5, r6, pc}
 8005cc2:	1cc4      	adds	r4, r0, #3
 8005cc4:	f024 0403 	bic.w	r4, r4, #3
 8005cc8:	42a0      	cmp	r0, r4
 8005cca:	d0f8      	beq.n	8005cbe <sbrk_aligned+0x22>
 8005ccc:	1a21      	subs	r1, r4, r0
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f001 fdf8 	bl	80078c4 <_sbrk_r>
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d1f2      	bne.n	8005cbe <sbrk_aligned+0x22>
 8005cd8:	e7ef      	b.n	8005cba <sbrk_aligned+0x1e>
 8005cda:	bf00      	nop
 8005cdc:	200004a0 	.word	0x200004a0

08005ce0 <_malloc_r>:
 8005ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce4:	1ccd      	adds	r5, r1, #3
 8005ce6:	f025 0503 	bic.w	r5, r5, #3
 8005cea:	3508      	adds	r5, #8
 8005cec:	2d0c      	cmp	r5, #12
 8005cee:	bf38      	it	cc
 8005cf0:	250c      	movcc	r5, #12
 8005cf2:	2d00      	cmp	r5, #0
 8005cf4:	4606      	mov	r6, r0
 8005cf6:	db01      	blt.n	8005cfc <_malloc_r+0x1c>
 8005cf8:	42a9      	cmp	r1, r5
 8005cfa:	d904      	bls.n	8005d06 <_malloc_r+0x26>
 8005cfc:	230c      	movs	r3, #12
 8005cfe:	6033      	str	r3, [r6, #0]
 8005d00:	2000      	movs	r0, #0
 8005d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ddc <_malloc_r+0xfc>
 8005d0a:	f000 f869 	bl	8005de0 <__malloc_lock>
 8005d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d12:	461c      	mov	r4, r3
 8005d14:	bb44      	cbnz	r4, 8005d68 <_malloc_r+0x88>
 8005d16:	4629      	mov	r1, r5
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f7ff ffbf 	bl	8005c9c <sbrk_aligned>
 8005d1e:	1c43      	adds	r3, r0, #1
 8005d20:	4604      	mov	r4, r0
 8005d22:	d158      	bne.n	8005dd6 <_malloc_r+0xf6>
 8005d24:	f8d8 4000 	ldr.w	r4, [r8]
 8005d28:	4627      	mov	r7, r4
 8005d2a:	2f00      	cmp	r7, #0
 8005d2c:	d143      	bne.n	8005db6 <_malloc_r+0xd6>
 8005d2e:	2c00      	cmp	r4, #0
 8005d30:	d04b      	beq.n	8005dca <_malloc_r+0xea>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	4639      	mov	r1, r7
 8005d36:	4630      	mov	r0, r6
 8005d38:	eb04 0903 	add.w	r9, r4, r3
 8005d3c:	f001 fdc2 	bl	80078c4 <_sbrk_r>
 8005d40:	4581      	cmp	r9, r0
 8005d42:	d142      	bne.n	8005dca <_malloc_r+0xea>
 8005d44:	6821      	ldr	r1, [r4, #0]
 8005d46:	1a6d      	subs	r5, r5, r1
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f7ff ffa6 	bl	8005c9c <sbrk_aligned>
 8005d50:	3001      	adds	r0, #1
 8005d52:	d03a      	beq.n	8005dca <_malloc_r+0xea>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	442b      	add	r3, r5
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	bb62      	cbnz	r2, 8005dbc <_malloc_r+0xdc>
 8005d62:	f8c8 7000 	str.w	r7, [r8]
 8005d66:	e00f      	b.n	8005d88 <_malloc_r+0xa8>
 8005d68:	6822      	ldr	r2, [r4, #0]
 8005d6a:	1b52      	subs	r2, r2, r5
 8005d6c:	d420      	bmi.n	8005db0 <_malloc_r+0xd0>
 8005d6e:	2a0b      	cmp	r2, #11
 8005d70:	d917      	bls.n	8005da2 <_malloc_r+0xc2>
 8005d72:	1961      	adds	r1, r4, r5
 8005d74:	42a3      	cmp	r3, r4
 8005d76:	6025      	str	r5, [r4, #0]
 8005d78:	bf18      	it	ne
 8005d7a:	6059      	strne	r1, [r3, #4]
 8005d7c:	6863      	ldr	r3, [r4, #4]
 8005d7e:	bf08      	it	eq
 8005d80:	f8c8 1000 	streq.w	r1, [r8]
 8005d84:	5162      	str	r2, [r4, r5]
 8005d86:	604b      	str	r3, [r1, #4]
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f000 f82f 	bl	8005dec <__malloc_unlock>
 8005d8e:	f104 000b 	add.w	r0, r4, #11
 8005d92:	1d23      	adds	r3, r4, #4
 8005d94:	f020 0007 	bic.w	r0, r0, #7
 8005d98:	1ac2      	subs	r2, r0, r3
 8005d9a:	bf1c      	itt	ne
 8005d9c:	1a1b      	subne	r3, r3, r0
 8005d9e:	50a3      	strne	r3, [r4, r2]
 8005da0:	e7af      	b.n	8005d02 <_malloc_r+0x22>
 8005da2:	6862      	ldr	r2, [r4, #4]
 8005da4:	42a3      	cmp	r3, r4
 8005da6:	bf0c      	ite	eq
 8005da8:	f8c8 2000 	streq.w	r2, [r8]
 8005dac:	605a      	strne	r2, [r3, #4]
 8005dae:	e7eb      	b.n	8005d88 <_malloc_r+0xa8>
 8005db0:	4623      	mov	r3, r4
 8005db2:	6864      	ldr	r4, [r4, #4]
 8005db4:	e7ae      	b.n	8005d14 <_malloc_r+0x34>
 8005db6:	463c      	mov	r4, r7
 8005db8:	687f      	ldr	r7, [r7, #4]
 8005dba:	e7b6      	b.n	8005d2a <_malloc_r+0x4a>
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	42a3      	cmp	r3, r4
 8005dc2:	d1fb      	bne.n	8005dbc <_malloc_r+0xdc>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	6053      	str	r3, [r2, #4]
 8005dc8:	e7de      	b.n	8005d88 <_malloc_r+0xa8>
 8005dca:	230c      	movs	r3, #12
 8005dcc:	6033      	str	r3, [r6, #0]
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f000 f80c 	bl	8005dec <__malloc_unlock>
 8005dd4:	e794      	b.n	8005d00 <_malloc_r+0x20>
 8005dd6:	6005      	str	r5, [r0, #0]
 8005dd8:	e7d6      	b.n	8005d88 <_malloc_r+0xa8>
 8005dda:	bf00      	nop
 8005ddc:	200004a4 	.word	0x200004a4

08005de0 <__malloc_lock>:
 8005de0:	4801      	ldr	r0, [pc, #4]	@ (8005de8 <__malloc_lock+0x8>)
 8005de2:	f7ff b8b2 	b.w	8004f4a <__retarget_lock_acquire_recursive>
 8005de6:	bf00      	nop
 8005de8:	2000049c 	.word	0x2000049c

08005dec <__malloc_unlock>:
 8005dec:	4801      	ldr	r0, [pc, #4]	@ (8005df4 <__malloc_unlock+0x8>)
 8005dee:	f7ff b8ad 	b.w	8004f4c <__retarget_lock_release_recursive>
 8005df2:	bf00      	nop
 8005df4:	2000049c 	.word	0x2000049c

08005df8 <_Balloc>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	69c6      	ldr	r6, [r0, #28]
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	460d      	mov	r5, r1
 8005e00:	b976      	cbnz	r6, 8005e20 <_Balloc+0x28>
 8005e02:	2010      	movs	r0, #16
 8005e04:	f7ff ff42 	bl	8005c8c <malloc>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	61e0      	str	r0, [r4, #28]
 8005e0c:	b920      	cbnz	r0, 8005e18 <_Balloc+0x20>
 8005e0e:	4b18      	ldr	r3, [pc, #96]	@ (8005e70 <_Balloc+0x78>)
 8005e10:	4818      	ldr	r0, [pc, #96]	@ (8005e74 <_Balloc+0x7c>)
 8005e12:	216b      	movs	r1, #107	@ 0x6b
 8005e14:	f001 fd7c 	bl	8007910 <__assert_func>
 8005e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e1c:	6006      	str	r6, [r0, #0]
 8005e1e:	60c6      	str	r6, [r0, #12]
 8005e20:	69e6      	ldr	r6, [r4, #28]
 8005e22:	68f3      	ldr	r3, [r6, #12]
 8005e24:	b183      	cbz	r3, 8005e48 <_Balloc+0x50>
 8005e26:	69e3      	ldr	r3, [r4, #28]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e2e:	b9b8      	cbnz	r0, 8005e60 <_Balloc+0x68>
 8005e30:	2101      	movs	r1, #1
 8005e32:	fa01 f605 	lsl.w	r6, r1, r5
 8005e36:	1d72      	adds	r2, r6, #5
 8005e38:	0092      	lsls	r2, r2, #2
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f001 fd86 	bl	800794c <_calloc_r>
 8005e40:	b160      	cbz	r0, 8005e5c <_Balloc+0x64>
 8005e42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e46:	e00e      	b.n	8005e66 <_Balloc+0x6e>
 8005e48:	2221      	movs	r2, #33	@ 0x21
 8005e4a:	2104      	movs	r1, #4
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f001 fd7d 	bl	800794c <_calloc_r>
 8005e52:	69e3      	ldr	r3, [r4, #28]
 8005e54:	60f0      	str	r0, [r6, #12]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e4      	bne.n	8005e26 <_Balloc+0x2e>
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	6802      	ldr	r2, [r0, #0]
 8005e62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e66:	2300      	movs	r3, #0
 8005e68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e6c:	e7f7      	b.n	8005e5e <_Balloc+0x66>
 8005e6e:	bf00      	nop
 8005e70:	080086f6 	.word	0x080086f6
 8005e74:	08008776 	.word	0x08008776

08005e78 <_Bfree>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	69c6      	ldr	r6, [r0, #28]
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	b976      	cbnz	r6, 8005ea0 <_Bfree+0x28>
 8005e82:	2010      	movs	r0, #16
 8005e84:	f7ff ff02 	bl	8005c8c <malloc>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	61e8      	str	r0, [r5, #28]
 8005e8c:	b920      	cbnz	r0, 8005e98 <_Bfree+0x20>
 8005e8e:	4b09      	ldr	r3, [pc, #36]	@ (8005eb4 <_Bfree+0x3c>)
 8005e90:	4809      	ldr	r0, [pc, #36]	@ (8005eb8 <_Bfree+0x40>)
 8005e92:	218f      	movs	r1, #143	@ 0x8f
 8005e94:	f001 fd3c 	bl	8007910 <__assert_func>
 8005e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e9c:	6006      	str	r6, [r0, #0]
 8005e9e:	60c6      	str	r6, [r0, #12]
 8005ea0:	b13c      	cbz	r4, 8005eb2 <_Bfree+0x3a>
 8005ea2:	69eb      	ldr	r3, [r5, #28]
 8005ea4:	6862      	ldr	r2, [r4, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005eac:	6021      	str	r1, [r4, #0]
 8005eae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005eb2:	bd70      	pop	{r4, r5, r6, pc}
 8005eb4:	080086f6 	.word	0x080086f6
 8005eb8:	08008776 	.word	0x08008776

08005ebc <__multadd>:
 8005ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec0:	690d      	ldr	r5, [r1, #16]
 8005ec2:	4607      	mov	r7, r0
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	461e      	mov	r6, r3
 8005ec8:	f101 0c14 	add.w	ip, r1, #20
 8005ecc:	2000      	movs	r0, #0
 8005ece:	f8dc 3000 	ldr.w	r3, [ip]
 8005ed2:	b299      	uxth	r1, r3
 8005ed4:	fb02 6101 	mla	r1, r2, r1, r6
 8005ed8:	0c1e      	lsrs	r6, r3, #16
 8005eda:	0c0b      	lsrs	r3, r1, #16
 8005edc:	fb02 3306 	mla	r3, r2, r6, r3
 8005ee0:	b289      	uxth	r1, r1
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ee8:	4285      	cmp	r5, r0
 8005eea:	f84c 1b04 	str.w	r1, [ip], #4
 8005eee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ef2:	dcec      	bgt.n	8005ece <__multadd+0x12>
 8005ef4:	b30e      	cbz	r6, 8005f3a <__multadd+0x7e>
 8005ef6:	68a3      	ldr	r3, [r4, #8]
 8005ef8:	42ab      	cmp	r3, r5
 8005efa:	dc19      	bgt.n	8005f30 <__multadd+0x74>
 8005efc:	6861      	ldr	r1, [r4, #4]
 8005efe:	4638      	mov	r0, r7
 8005f00:	3101      	adds	r1, #1
 8005f02:	f7ff ff79 	bl	8005df8 <_Balloc>
 8005f06:	4680      	mov	r8, r0
 8005f08:	b928      	cbnz	r0, 8005f16 <__multadd+0x5a>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f40 <__multadd+0x84>)
 8005f0e:	480d      	ldr	r0, [pc, #52]	@ (8005f44 <__multadd+0x88>)
 8005f10:	21ba      	movs	r1, #186	@ 0xba
 8005f12:	f001 fcfd 	bl	8007910 <__assert_func>
 8005f16:	6922      	ldr	r2, [r4, #16]
 8005f18:	3202      	adds	r2, #2
 8005f1a:	f104 010c 	add.w	r1, r4, #12
 8005f1e:	0092      	lsls	r2, r2, #2
 8005f20:	300c      	adds	r0, #12
 8005f22:	f001 fcdf 	bl	80078e4 <memcpy>
 8005f26:	4621      	mov	r1, r4
 8005f28:	4638      	mov	r0, r7
 8005f2a:	f7ff ffa5 	bl	8005e78 <_Bfree>
 8005f2e:	4644      	mov	r4, r8
 8005f30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f34:	3501      	adds	r5, #1
 8005f36:	615e      	str	r6, [r3, #20]
 8005f38:	6125      	str	r5, [r4, #16]
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f40:	08008765 	.word	0x08008765
 8005f44:	08008776 	.word	0x08008776

08005f48 <__s2b>:
 8005f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	4615      	mov	r5, r2
 8005f50:	461f      	mov	r7, r3
 8005f52:	2209      	movs	r2, #9
 8005f54:	3308      	adds	r3, #8
 8005f56:	4606      	mov	r6, r0
 8005f58:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	2201      	movs	r2, #1
 8005f60:	429a      	cmp	r2, r3
 8005f62:	db09      	blt.n	8005f78 <__s2b+0x30>
 8005f64:	4630      	mov	r0, r6
 8005f66:	f7ff ff47 	bl	8005df8 <_Balloc>
 8005f6a:	b940      	cbnz	r0, 8005f7e <__s2b+0x36>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	4b19      	ldr	r3, [pc, #100]	@ (8005fd4 <__s2b+0x8c>)
 8005f70:	4819      	ldr	r0, [pc, #100]	@ (8005fd8 <__s2b+0x90>)
 8005f72:	21d3      	movs	r1, #211	@ 0xd3
 8005f74:	f001 fccc 	bl	8007910 <__assert_func>
 8005f78:	0052      	lsls	r2, r2, #1
 8005f7a:	3101      	adds	r1, #1
 8005f7c:	e7f0      	b.n	8005f60 <__s2b+0x18>
 8005f7e:	9b08      	ldr	r3, [sp, #32]
 8005f80:	6143      	str	r3, [r0, #20]
 8005f82:	2d09      	cmp	r5, #9
 8005f84:	f04f 0301 	mov.w	r3, #1
 8005f88:	6103      	str	r3, [r0, #16]
 8005f8a:	dd16      	ble.n	8005fba <__s2b+0x72>
 8005f8c:	f104 0909 	add.w	r9, r4, #9
 8005f90:	46c8      	mov	r8, r9
 8005f92:	442c      	add	r4, r5
 8005f94:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005f98:	4601      	mov	r1, r0
 8005f9a:	3b30      	subs	r3, #48	@ 0x30
 8005f9c:	220a      	movs	r2, #10
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f7ff ff8c 	bl	8005ebc <__multadd>
 8005fa4:	45a0      	cmp	r8, r4
 8005fa6:	d1f5      	bne.n	8005f94 <__s2b+0x4c>
 8005fa8:	f1a5 0408 	sub.w	r4, r5, #8
 8005fac:	444c      	add	r4, r9
 8005fae:	1b2d      	subs	r5, r5, r4
 8005fb0:	1963      	adds	r3, r4, r5
 8005fb2:	42bb      	cmp	r3, r7
 8005fb4:	db04      	blt.n	8005fc0 <__s2b+0x78>
 8005fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fba:	340a      	adds	r4, #10
 8005fbc:	2509      	movs	r5, #9
 8005fbe:	e7f6      	b.n	8005fae <__s2b+0x66>
 8005fc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005fc4:	4601      	mov	r1, r0
 8005fc6:	3b30      	subs	r3, #48	@ 0x30
 8005fc8:	220a      	movs	r2, #10
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7ff ff76 	bl	8005ebc <__multadd>
 8005fd0:	e7ee      	b.n	8005fb0 <__s2b+0x68>
 8005fd2:	bf00      	nop
 8005fd4:	08008765 	.word	0x08008765
 8005fd8:	08008776 	.word	0x08008776

08005fdc <__hi0bits>:
 8005fdc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	bf36      	itet	cc
 8005fe4:	0403      	lslcc	r3, r0, #16
 8005fe6:	2000      	movcs	r0, #0
 8005fe8:	2010      	movcc	r0, #16
 8005fea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fee:	bf3c      	itt	cc
 8005ff0:	021b      	lslcc	r3, r3, #8
 8005ff2:	3008      	addcc	r0, #8
 8005ff4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ff8:	bf3c      	itt	cc
 8005ffa:	011b      	lslcc	r3, r3, #4
 8005ffc:	3004      	addcc	r0, #4
 8005ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006002:	bf3c      	itt	cc
 8006004:	009b      	lslcc	r3, r3, #2
 8006006:	3002      	addcc	r0, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	db05      	blt.n	8006018 <__hi0bits+0x3c>
 800600c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006010:	f100 0001 	add.w	r0, r0, #1
 8006014:	bf08      	it	eq
 8006016:	2020      	moveq	r0, #32
 8006018:	4770      	bx	lr

0800601a <__lo0bits>:
 800601a:	6803      	ldr	r3, [r0, #0]
 800601c:	4602      	mov	r2, r0
 800601e:	f013 0007 	ands.w	r0, r3, #7
 8006022:	d00b      	beq.n	800603c <__lo0bits+0x22>
 8006024:	07d9      	lsls	r1, r3, #31
 8006026:	d421      	bmi.n	800606c <__lo0bits+0x52>
 8006028:	0798      	lsls	r0, r3, #30
 800602a:	bf49      	itett	mi
 800602c:	085b      	lsrmi	r3, r3, #1
 800602e:	089b      	lsrpl	r3, r3, #2
 8006030:	2001      	movmi	r0, #1
 8006032:	6013      	strmi	r3, [r2, #0]
 8006034:	bf5c      	itt	pl
 8006036:	6013      	strpl	r3, [r2, #0]
 8006038:	2002      	movpl	r0, #2
 800603a:	4770      	bx	lr
 800603c:	b299      	uxth	r1, r3
 800603e:	b909      	cbnz	r1, 8006044 <__lo0bits+0x2a>
 8006040:	0c1b      	lsrs	r3, r3, #16
 8006042:	2010      	movs	r0, #16
 8006044:	b2d9      	uxtb	r1, r3
 8006046:	b909      	cbnz	r1, 800604c <__lo0bits+0x32>
 8006048:	3008      	adds	r0, #8
 800604a:	0a1b      	lsrs	r3, r3, #8
 800604c:	0719      	lsls	r1, r3, #28
 800604e:	bf04      	itt	eq
 8006050:	091b      	lsreq	r3, r3, #4
 8006052:	3004      	addeq	r0, #4
 8006054:	0799      	lsls	r1, r3, #30
 8006056:	bf04      	itt	eq
 8006058:	089b      	lsreq	r3, r3, #2
 800605a:	3002      	addeq	r0, #2
 800605c:	07d9      	lsls	r1, r3, #31
 800605e:	d403      	bmi.n	8006068 <__lo0bits+0x4e>
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	f100 0001 	add.w	r0, r0, #1
 8006066:	d003      	beq.n	8006070 <__lo0bits+0x56>
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	4770      	bx	lr
 800606c:	2000      	movs	r0, #0
 800606e:	4770      	bx	lr
 8006070:	2020      	movs	r0, #32
 8006072:	4770      	bx	lr

08006074 <__i2b>:
 8006074:	b510      	push	{r4, lr}
 8006076:	460c      	mov	r4, r1
 8006078:	2101      	movs	r1, #1
 800607a:	f7ff febd 	bl	8005df8 <_Balloc>
 800607e:	4602      	mov	r2, r0
 8006080:	b928      	cbnz	r0, 800608e <__i2b+0x1a>
 8006082:	4b05      	ldr	r3, [pc, #20]	@ (8006098 <__i2b+0x24>)
 8006084:	4805      	ldr	r0, [pc, #20]	@ (800609c <__i2b+0x28>)
 8006086:	f240 1145 	movw	r1, #325	@ 0x145
 800608a:	f001 fc41 	bl	8007910 <__assert_func>
 800608e:	2301      	movs	r3, #1
 8006090:	6144      	str	r4, [r0, #20]
 8006092:	6103      	str	r3, [r0, #16]
 8006094:	bd10      	pop	{r4, pc}
 8006096:	bf00      	nop
 8006098:	08008765 	.word	0x08008765
 800609c:	08008776 	.word	0x08008776

080060a0 <__multiply>:
 80060a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a4:	4614      	mov	r4, r2
 80060a6:	690a      	ldr	r2, [r1, #16]
 80060a8:	6923      	ldr	r3, [r4, #16]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	bfa8      	it	ge
 80060ae:	4623      	movge	r3, r4
 80060b0:	460f      	mov	r7, r1
 80060b2:	bfa4      	itt	ge
 80060b4:	460c      	movge	r4, r1
 80060b6:	461f      	movge	r7, r3
 80060b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80060bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80060c0:	68a3      	ldr	r3, [r4, #8]
 80060c2:	6861      	ldr	r1, [r4, #4]
 80060c4:	eb0a 0609 	add.w	r6, sl, r9
 80060c8:	42b3      	cmp	r3, r6
 80060ca:	b085      	sub	sp, #20
 80060cc:	bfb8      	it	lt
 80060ce:	3101      	addlt	r1, #1
 80060d0:	f7ff fe92 	bl	8005df8 <_Balloc>
 80060d4:	b930      	cbnz	r0, 80060e4 <__multiply+0x44>
 80060d6:	4602      	mov	r2, r0
 80060d8:	4b44      	ldr	r3, [pc, #272]	@ (80061ec <__multiply+0x14c>)
 80060da:	4845      	ldr	r0, [pc, #276]	@ (80061f0 <__multiply+0x150>)
 80060dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80060e0:	f001 fc16 	bl	8007910 <__assert_func>
 80060e4:	f100 0514 	add.w	r5, r0, #20
 80060e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80060ec:	462b      	mov	r3, r5
 80060ee:	2200      	movs	r2, #0
 80060f0:	4543      	cmp	r3, r8
 80060f2:	d321      	bcc.n	8006138 <__multiply+0x98>
 80060f4:	f107 0114 	add.w	r1, r7, #20
 80060f8:	f104 0214 	add.w	r2, r4, #20
 80060fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006100:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006104:	9302      	str	r3, [sp, #8]
 8006106:	1b13      	subs	r3, r2, r4
 8006108:	3b15      	subs	r3, #21
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	3304      	adds	r3, #4
 8006110:	f104 0715 	add.w	r7, r4, #21
 8006114:	42ba      	cmp	r2, r7
 8006116:	bf38      	it	cc
 8006118:	2304      	movcc	r3, #4
 800611a:	9301      	str	r3, [sp, #4]
 800611c:	9b02      	ldr	r3, [sp, #8]
 800611e:	9103      	str	r1, [sp, #12]
 8006120:	428b      	cmp	r3, r1
 8006122:	d80c      	bhi.n	800613e <__multiply+0x9e>
 8006124:	2e00      	cmp	r6, #0
 8006126:	dd03      	ble.n	8006130 <__multiply+0x90>
 8006128:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800612c:	2b00      	cmp	r3, #0
 800612e:	d05b      	beq.n	80061e8 <__multiply+0x148>
 8006130:	6106      	str	r6, [r0, #16]
 8006132:	b005      	add	sp, #20
 8006134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006138:	f843 2b04 	str.w	r2, [r3], #4
 800613c:	e7d8      	b.n	80060f0 <__multiply+0x50>
 800613e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006142:	f1ba 0f00 	cmp.w	sl, #0
 8006146:	d024      	beq.n	8006192 <__multiply+0xf2>
 8006148:	f104 0e14 	add.w	lr, r4, #20
 800614c:	46a9      	mov	r9, r5
 800614e:	f04f 0c00 	mov.w	ip, #0
 8006152:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006156:	f8d9 3000 	ldr.w	r3, [r9]
 800615a:	fa1f fb87 	uxth.w	fp, r7
 800615e:	b29b      	uxth	r3, r3
 8006160:	fb0a 330b 	mla	r3, sl, fp, r3
 8006164:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006168:	f8d9 7000 	ldr.w	r7, [r9]
 800616c:	4463      	add	r3, ip
 800616e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006172:	fb0a c70b 	mla	r7, sl, fp, ip
 8006176:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800617a:	b29b      	uxth	r3, r3
 800617c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006180:	4572      	cmp	r2, lr
 8006182:	f849 3b04 	str.w	r3, [r9], #4
 8006186:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800618a:	d8e2      	bhi.n	8006152 <__multiply+0xb2>
 800618c:	9b01      	ldr	r3, [sp, #4]
 800618e:	f845 c003 	str.w	ip, [r5, r3]
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006198:	3104      	adds	r1, #4
 800619a:	f1b9 0f00 	cmp.w	r9, #0
 800619e:	d021      	beq.n	80061e4 <__multiply+0x144>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	f104 0c14 	add.w	ip, r4, #20
 80061a6:	46ae      	mov	lr, r5
 80061a8:	f04f 0a00 	mov.w	sl, #0
 80061ac:	f8bc b000 	ldrh.w	fp, [ip]
 80061b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80061b4:	fb09 770b 	mla	r7, r9, fp, r7
 80061b8:	4457      	add	r7, sl
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80061c0:	f84e 3b04 	str.w	r3, [lr], #4
 80061c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80061c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80061cc:	f8be 3000 	ldrh.w	r3, [lr]
 80061d0:	fb09 330a 	mla	r3, r9, sl, r3
 80061d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80061d8:	4562      	cmp	r2, ip
 80061da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80061de:	d8e5      	bhi.n	80061ac <__multiply+0x10c>
 80061e0:	9f01      	ldr	r7, [sp, #4]
 80061e2:	51eb      	str	r3, [r5, r7]
 80061e4:	3504      	adds	r5, #4
 80061e6:	e799      	b.n	800611c <__multiply+0x7c>
 80061e8:	3e01      	subs	r6, #1
 80061ea:	e79b      	b.n	8006124 <__multiply+0x84>
 80061ec:	08008765 	.word	0x08008765
 80061f0:	08008776 	.word	0x08008776

080061f4 <__pow5mult>:
 80061f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f8:	4615      	mov	r5, r2
 80061fa:	f012 0203 	ands.w	r2, r2, #3
 80061fe:	4607      	mov	r7, r0
 8006200:	460e      	mov	r6, r1
 8006202:	d007      	beq.n	8006214 <__pow5mult+0x20>
 8006204:	4c25      	ldr	r4, [pc, #148]	@ (800629c <__pow5mult+0xa8>)
 8006206:	3a01      	subs	r2, #1
 8006208:	2300      	movs	r3, #0
 800620a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800620e:	f7ff fe55 	bl	8005ebc <__multadd>
 8006212:	4606      	mov	r6, r0
 8006214:	10ad      	asrs	r5, r5, #2
 8006216:	d03d      	beq.n	8006294 <__pow5mult+0xa0>
 8006218:	69fc      	ldr	r4, [r7, #28]
 800621a:	b97c      	cbnz	r4, 800623c <__pow5mult+0x48>
 800621c:	2010      	movs	r0, #16
 800621e:	f7ff fd35 	bl	8005c8c <malloc>
 8006222:	4602      	mov	r2, r0
 8006224:	61f8      	str	r0, [r7, #28]
 8006226:	b928      	cbnz	r0, 8006234 <__pow5mult+0x40>
 8006228:	4b1d      	ldr	r3, [pc, #116]	@ (80062a0 <__pow5mult+0xac>)
 800622a:	481e      	ldr	r0, [pc, #120]	@ (80062a4 <__pow5mult+0xb0>)
 800622c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006230:	f001 fb6e 	bl	8007910 <__assert_func>
 8006234:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006238:	6004      	str	r4, [r0, #0]
 800623a:	60c4      	str	r4, [r0, #12]
 800623c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006240:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006244:	b94c      	cbnz	r4, 800625a <__pow5mult+0x66>
 8006246:	f240 2171 	movw	r1, #625	@ 0x271
 800624a:	4638      	mov	r0, r7
 800624c:	f7ff ff12 	bl	8006074 <__i2b>
 8006250:	2300      	movs	r3, #0
 8006252:	f8c8 0008 	str.w	r0, [r8, #8]
 8006256:	4604      	mov	r4, r0
 8006258:	6003      	str	r3, [r0, #0]
 800625a:	f04f 0900 	mov.w	r9, #0
 800625e:	07eb      	lsls	r3, r5, #31
 8006260:	d50a      	bpl.n	8006278 <__pow5mult+0x84>
 8006262:	4631      	mov	r1, r6
 8006264:	4622      	mov	r2, r4
 8006266:	4638      	mov	r0, r7
 8006268:	f7ff ff1a 	bl	80060a0 <__multiply>
 800626c:	4631      	mov	r1, r6
 800626e:	4680      	mov	r8, r0
 8006270:	4638      	mov	r0, r7
 8006272:	f7ff fe01 	bl	8005e78 <_Bfree>
 8006276:	4646      	mov	r6, r8
 8006278:	106d      	asrs	r5, r5, #1
 800627a:	d00b      	beq.n	8006294 <__pow5mult+0xa0>
 800627c:	6820      	ldr	r0, [r4, #0]
 800627e:	b938      	cbnz	r0, 8006290 <__pow5mult+0x9c>
 8006280:	4622      	mov	r2, r4
 8006282:	4621      	mov	r1, r4
 8006284:	4638      	mov	r0, r7
 8006286:	f7ff ff0b 	bl	80060a0 <__multiply>
 800628a:	6020      	str	r0, [r4, #0]
 800628c:	f8c0 9000 	str.w	r9, [r0]
 8006290:	4604      	mov	r4, r0
 8006292:	e7e4      	b.n	800625e <__pow5mult+0x6a>
 8006294:	4630      	mov	r0, r6
 8006296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800629a:	bf00      	nop
 800629c:	080087d0 	.word	0x080087d0
 80062a0:	080086f6 	.word	0x080086f6
 80062a4:	08008776 	.word	0x08008776

080062a8 <__lshift>:
 80062a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ac:	460c      	mov	r4, r1
 80062ae:	6849      	ldr	r1, [r1, #4]
 80062b0:	6923      	ldr	r3, [r4, #16]
 80062b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062b6:	68a3      	ldr	r3, [r4, #8]
 80062b8:	4607      	mov	r7, r0
 80062ba:	4691      	mov	r9, r2
 80062bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062c0:	f108 0601 	add.w	r6, r8, #1
 80062c4:	42b3      	cmp	r3, r6
 80062c6:	db0b      	blt.n	80062e0 <__lshift+0x38>
 80062c8:	4638      	mov	r0, r7
 80062ca:	f7ff fd95 	bl	8005df8 <_Balloc>
 80062ce:	4605      	mov	r5, r0
 80062d0:	b948      	cbnz	r0, 80062e6 <__lshift+0x3e>
 80062d2:	4602      	mov	r2, r0
 80062d4:	4b28      	ldr	r3, [pc, #160]	@ (8006378 <__lshift+0xd0>)
 80062d6:	4829      	ldr	r0, [pc, #164]	@ (800637c <__lshift+0xd4>)
 80062d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80062dc:	f001 fb18 	bl	8007910 <__assert_func>
 80062e0:	3101      	adds	r1, #1
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	e7ee      	b.n	80062c4 <__lshift+0x1c>
 80062e6:	2300      	movs	r3, #0
 80062e8:	f100 0114 	add.w	r1, r0, #20
 80062ec:	f100 0210 	add.w	r2, r0, #16
 80062f0:	4618      	mov	r0, r3
 80062f2:	4553      	cmp	r3, sl
 80062f4:	db33      	blt.n	800635e <__lshift+0xb6>
 80062f6:	6920      	ldr	r0, [r4, #16]
 80062f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062fc:	f104 0314 	add.w	r3, r4, #20
 8006300:	f019 091f 	ands.w	r9, r9, #31
 8006304:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006308:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800630c:	d02b      	beq.n	8006366 <__lshift+0xbe>
 800630e:	f1c9 0e20 	rsb	lr, r9, #32
 8006312:	468a      	mov	sl, r1
 8006314:	2200      	movs	r2, #0
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	fa00 f009 	lsl.w	r0, r0, r9
 800631c:	4310      	orrs	r0, r2
 800631e:	f84a 0b04 	str.w	r0, [sl], #4
 8006322:	f853 2b04 	ldr.w	r2, [r3], #4
 8006326:	459c      	cmp	ip, r3
 8006328:	fa22 f20e 	lsr.w	r2, r2, lr
 800632c:	d8f3      	bhi.n	8006316 <__lshift+0x6e>
 800632e:	ebac 0304 	sub.w	r3, ip, r4
 8006332:	3b15      	subs	r3, #21
 8006334:	f023 0303 	bic.w	r3, r3, #3
 8006338:	3304      	adds	r3, #4
 800633a:	f104 0015 	add.w	r0, r4, #21
 800633e:	4584      	cmp	ip, r0
 8006340:	bf38      	it	cc
 8006342:	2304      	movcc	r3, #4
 8006344:	50ca      	str	r2, [r1, r3]
 8006346:	b10a      	cbz	r2, 800634c <__lshift+0xa4>
 8006348:	f108 0602 	add.w	r6, r8, #2
 800634c:	3e01      	subs	r6, #1
 800634e:	4638      	mov	r0, r7
 8006350:	612e      	str	r6, [r5, #16]
 8006352:	4621      	mov	r1, r4
 8006354:	f7ff fd90 	bl	8005e78 <_Bfree>
 8006358:	4628      	mov	r0, r5
 800635a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006362:	3301      	adds	r3, #1
 8006364:	e7c5      	b.n	80062f2 <__lshift+0x4a>
 8006366:	3904      	subs	r1, #4
 8006368:	f853 2b04 	ldr.w	r2, [r3], #4
 800636c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006370:	459c      	cmp	ip, r3
 8006372:	d8f9      	bhi.n	8006368 <__lshift+0xc0>
 8006374:	e7ea      	b.n	800634c <__lshift+0xa4>
 8006376:	bf00      	nop
 8006378:	08008765 	.word	0x08008765
 800637c:	08008776 	.word	0x08008776

08006380 <__mcmp>:
 8006380:	690a      	ldr	r2, [r1, #16]
 8006382:	4603      	mov	r3, r0
 8006384:	6900      	ldr	r0, [r0, #16]
 8006386:	1a80      	subs	r0, r0, r2
 8006388:	b530      	push	{r4, r5, lr}
 800638a:	d10e      	bne.n	80063aa <__mcmp+0x2a>
 800638c:	3314      	adds	r3, #20
 800638e:	3114      	adds	r1, #20
 8006390:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006394:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006398:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800639c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80063a0:	4295      	cmp	r5, r2
 80063a2:	d003      	beq.n	80063ac <__mcmp+0x2c>
 80063a4:	d205      	bcs.n	80063b2 <__mcmp+0x32>
 80063a6:	f04f 30ff 	mov.w	r0, #4294967295
 80063aa:	bd30      	pop	{r4, r5, pc}
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	d3f3      	bcc.n	8006398 <__mcmp+0x18>
 80063b0:	e7fb      	b.n	80063aa <__mcmp+0x2a>
 80063b2:	2001      	movs	r0, #1
 80063b4:	e7f9      	b.n	80063aa <__mcmp+0x2a>
	...

080063b8 <__mdiff>:
 80063b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	4689      	mov	r9, r1
 80063be:	4606      	mov	r6, r0
 80063c0:	4611      	mov	r1, r2
 80063c2:	4648      	mov	r0, r9
 80063c4:	4614      	mov	r4, r2
 80063c6:	f7ff ffdb 	bl	8006380 <__mcmp>
 80063ca:	1e05      	subs	r5, r0, #0
 80063cc:	d112      	bne.n	80063f4 <__mdiff+0x3c>
 80063ce:	4629      	mov	r1, r5
 80063d0:	4630      	mov	r0, r6
 80063d2:	f7ff fd11 	bl	8005df8 <_Balloc>
 80063d6:	4602      	mov	r2, r0
 80063d8:	b928      	cbnz	r0, 80063e6 <__mdiff+0x2e>
 80063da:	4b3f      	ldr	r3, [pc, #252]	@ (80064d8 <__mdiff+0x120>)
 80063dc:	f240 2137 	movw	r1, #567	@ 0x237
 80063e0:	483e      	ldr	r0, [pc, #248]	@ (80064dc <__mdiff+0x124>)
 80063e2:	f001 fa95 	bl	8007910 <__assert_func>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80063ec:	4610      	mov	r0, r2
 80063ee:	b003      	add	sp, #12
 80063f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f4:	bfbc      	itt	lt
 80063f6:	464b      	movlt	r3, r9
 80063f8:	46a1      	movlt	r9, r4
 80063fa:	4630      	mov	r0, r6
 80063fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006400:	bfba      	itte	lt
 8006402:	461c      	movlt	r4, r3
 8006404:	2501      	movlt	r5, #1
 8006406:	2500      	movge	r5, #0
 8006408:	f7ff fcf6 	bl	8005df8 <_Balloc>
 800640c:	4602      	mov	r2, r0
 800640e:	b918      	cbnz	r0, 8006418 <__mdiff+0x60>
 8006410:	4b31      	ldr	r3, [pc, #196]	@ (80064d8 <__mdiff+0x120>)
 8006412:	f240 2145 	movw	r1, #581	@ 0x245
 8006416:	e7e3      	b.n	80063e0 <__mdiff+0x28>
 8006418:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800641c:	6926      	ldr	r6, [r4, #16]
 800641e:	60c5      	str	r5, [r0, #12]
 8006420:	f109 0310 	add.w	r3, r9, #16
 8006424:	f109 0514 	add.w	r5, r9, #20
 8006428:	f104 0e14 	add.w	lr, r4, #20
 800642c:	f100 0b14 	add.w	fp, r0, #20
 8006430:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006434:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	46d9      	mov	r9, fp
 800643c:	f04f 0c00 	mov.w	ip, #0
 8006440:	9b01      	ldr	r3, [sp, #4]
 8006442:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006446:	f853 af04 	ldr.w	sl, [r3, #4]!
 800644a:	9301      	str	r3, [sp, #4]
 800644c:	fa1f f38a 	uxth.w	r3, sl
 8006450:	4619      	mov	r1, r3
 8006452:	b283      	uxth	r3, r0
 8006454:	1acb      	subs	r3, r1, r3
 8006456:	0c00      	lsrs	r0, r0, #16
 8006458:	4463      	add	r3, ip
 800645a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800645e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006462:	b29b      	uxth	r3, r3
 8006464:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006468:	4576      	cmp	r6, lr
 800646a:	f849 3b04 	str.w	r3, [r9], #4
 800646e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006472:	d8e5      	bhi.n	8006440 <__mdiff+0x88>
 8006474:	1b33      	subs	r3, r6, r4
 8006476:	3b15      	subs	r3, #21
 8006478:	f023 0303 	bic.w	r3, r3, #3
 800647c:	3415      	adds	r4, #21
 800647e:	3304      	adds	r3, #4
 8006480:	42a6      	cmp	r6, r4
 8006482:	bf38      	it	cc
 8006484:	2304      	movcc	r3, #4
 8006486:	441d      	add	r5, r3
 8006488:	445b      	add	r3, fp
 800648a:	461e      	mov	r6, r3
 800648c:	462c      	mov	r4, r5
 800648e:	4544      	cmp	r4, r8
 8006490:	d30e      	bcc.n	80064b0 <__mdiff+0xf8>
 8006492:	f108 0103 	add.w	r1, r8, #3
 8006496:	1b49      	subs	r1, r1, r5
 8006498:	f021 0103 	bic.w	r1, r1, #3
 800649c:	3d03      	subs	r5, #3
 800649e:	45a8      	cmp	r8, r5
 80064a0:	bf38      	it	cc
 80064a2:	2100      	movcc	r1, #0
 80064a4:	440b      	add	r3, r1
 80064a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80064aa:	b191      	cbz	r1, 80064d2 <__mdiff+0x11a>
 80064ac:	6117      	str	r7, [r2, #16]
 80064ae:	e79d      	b.n	80063ec <__mdiff+0x34>
 80064b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80064b4:	46e6      	mov	lr, ip
 80064b6:	0c08      	lsrs	r0, r1, #16
 80064b8:	fa1c fc81 	uxtah	ip, ip, r1
 80064bc:	4471      	add	r1, lr
 80064be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80064c2:	b289      	uxth	r1, r1
 80064c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80064c8:	f846 1b04 	str.w	r1, [r6], #4
 80064cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80064d0:	e7dd      	b.n	800648e <__mdiff+0xd6>
 80064d2:	3f01      	subs	r7, #1
 80064d4:	e7e7      	b.n	80064a6 <__mdiff+0xee>
 80064d6:	bf00      	nop
 80064d8:	08008765 	.word	0x08008765
 80064dc:	08008776 	.word	0x08008776

080064e0 <__ulp>:
 80064e0:	b082      	sub	sp, #8
 80064e2:	ed8d 0b00 	vstr	d0, [sp]
 80064e6:	9a01      	ldr	r2, [sp, #4]
 80064e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006528 <__ulp+0x48>)
 80064ea:	4013      	ands	r3, r2
 80064ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	dc08      	bgt.n	8006506 <__ulp+0x26>
 80064f4:	425b      	negs	r3, r3
 80064f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80064fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80064fe:	da04      	bge.n	800650a <__ulp+0x2a>
 8006500:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006504:	4113      	asrs	r3, r2
 8006506:	2200      	movs	r2, #0
 8006508:	e008      	b.n	800651c <__ulp+0x3c>
 800650a:	f1a2 0314 	sub.w	r3, r2, #20
 800650e:	2b1e      	cmp	r3, #30
 8006510:	bfda      	itte	le
 8006512:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006516:	40da      	lsrle	r2, r3
 8006518:	2201      	movgt	r2, #1
 800651a:	2300      	movs	r3, #0
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	ec41 0b10 	vmov	d0, r0, r1
 8006524:	b002      	add	sp, #8
 8006526:	4770      	bx	lr
 8006528:	7ff00000 	.word	0x7ff00000

0800652c <__b2d>:
 800652c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006530:	6906      	ldr	r6, [r0, #16]
 8006532:	f100 0814 	add.w	r8, r0, #20
 8006536:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800653a:	1f37      	subs	r7, r6, #4
 800653c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006540:	4610      	mov	r0, r2
 8006542:	f7ff fd4b 	bl	8005fdc <__hi0bits>
 8006546:	f1c0 0320 	rsb	r3, r0, #32
 800654a:	280a      	cmp	r0, #10
 800654c:	600b      	str	r3, [r1, #0]
 800654e:	491b      	ldr	r1, [pc, #108]	@ (80065bc <__b2d+0x90>)
 8006550:	dc15      	bgt.n	800657e <__b2d+0x52>
 8006552:	f1c0 0c0b 	rsb	ip, r0, #11
 8006556:	fa22 f30c 	lsr.w	r3, r2, ip
 800655a:	45b8      	cmp	r8, r7
 800655c:	ea43 0501 	orr.w	r5, r3, r1
 8006560:	bf34      	ite	cc
 8006562:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006566:	2300      	movcs	r3, #0
 8006568:	3015      	adds	r0, #21
 800656a:	fa02 f000 	lsl.w	r0, r2, r0
 800656e:	fa23 f30c 	lsr.w	r3, r3, ip
 8006572:	4303      	orrs	r3, r0
 8006574:	461c      	mov	r4, r3
 8006576:	ec45 4b10 	vmov	d0, r4, r5
 800657a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800657e:	45b8      	cmp	r8, r7
 8006580:	bf3a      	itte	cc
 8006582:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006586:	f1a6 0708 	subcc.w	r7, r6, #8
 800658a:	2300      	movcs	r3, #0
 800658c:	380b      	subs	r0, #11
 800658e:	d012      	beq.n	80065b6 <__b2d+0x8a>
 8006590:	f1c0 0120 	rsb	r1, r0, #32
 8006594:	fa23 f401 	lsr.w	r4, r3, r1
 8006598:	4082      	lsls	r2, r0
 800659a:	4322      	orrs	r2, r4
 800659c:	4547      	cmp	r7, r8
 800659e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80065a2:	bf8c      	ite	hi
 80065a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80065a8:	2200      	movls	r2, #0
 80065aa:	4083      	lsls	r3, r0
 80065ac:	40ca      	lsrs	r2, r1
 80065ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80065b2:	4313      	orrs	r3, r2
 80065b4:	e7de      	b.n	8006574 <__b2d+0x48>
 80065b6:	ea42 0501 	orr.w	r5, r2, r1
 80065ba:	e7db      	b.n	8006574 <__b2d+0x48>
 80065bc:	3ff00000 	.word	0x3ff00000

080065c0 <__d2b>:
 80065c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065c4:	460f      	mov	r7, r1
 80065c6:	2101      	movs	r1, #1
 80065c8:	ec59 8b10 	vmov	r8, r9, d0
 80065cc:	4616      	mov	r6, r2
 80065ce:	f7ff fc13 	bl	8005df8 <_Balloc>
 80065d2:	4604      	mov	r4, r0
 80065d4:	b930      	cbnz	r0, 80065e4 <__d2b+0x24>
 80065d6:	4602      	mov	r2, r0
 80065d8:	4b23      	ldr	r3, [pc, #140]	@ (8006668 <__d2b+0xa8>)
 80065da:	4824      	ldr	r0, [pc, #144]	@ (800666c <__d2b+0xac>)
 80065dc:	f240 310f 	movw	r1, #783	@ 0x30f
 80065e0:	f001 f996 	bl	8007910 <__assert_func>
 80065e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80065e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065ec:	b10d      	cbz	r5, 80065f2 <__d2b+0x32>
 80065ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	f1b8 0300 	subs.w	r3, r8, #0
 80065f8:	d023      	beq.n	8006642 <__d2b+0x82>
 80065fa:	4668      	mov	r0, sp
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	f7ff fd0c 	bl	800601a <__lo0bits>
 8006602:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006606:	b1d0      	cbz	r0, 800663e <__d2b+0x7e>
 8006608:	f1c0 0320 	rsb	r3, r0, #32
 800660c:	fa02 f303 	lsl.w	r3, r2, r3
 8006610:	430b      	orrs	r3, r1
 8006612:	40c2      	lsrs	r2, r0
 8006614:	6163      	str	r3, [r4, #20]
 8006616:	9201      	str	r2, [sp, #4]
 8006618:	9b01      	ldr	r3, [sp, #4]
 800661a:	61a3      	str	r3, [r4, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	bf0c      	ite	eq
 8006620:	2201      	moveq	r2, #1
 8006622:	2202      	movne	r2, #2
 8006624:	6122      	str	r2, [r4, #16]
 8006626:	b1a5      	cbz	r5, 8006652 <__d2b+0x92>
 8006628:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800662c:	4405      	add	r5, r0
 800662e:	603d      	str	r5, [r7, #0]
 8006630:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006634:	6030      	str	r0, [r6, #0]
 8006636:	4620      	mov	r0, r4
 8006638:	b003      	add	sp, #12
 800663a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800663e:	6161      	str	r1, [r4, #20]
 8006640:	e7ea      	b.n	8006618 <__d2b+0x58>
 8006642:	a801      	add	r0, sp, #4
 8006644:	f7ff fce9 	bl	800601a <__lo0bits>
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	6163      	str	r3, [r4, #20]
 800664c:	3020      	adds	r0, #32
 800664e:	2201      	movs	r2, #1
 8006650:	e7e8      	b.n	8006624 <__d2b+0x64>
 8006652:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006656:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800665a:	6038      	str	r0, [r7, #0]
 800665c:	6918      	ldr	r0, [r3, #16]
 800665e:	f7ff fcbd 	bl	8005fdc <__hi0bits>
 8006662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006666:	e7e5      	b.n	8006634 <__d2b+0x74>
 8006668:	08008765 	.word	0x08008765
 800666c:	08008776 	.word	0x08008776

08006670 <__ratio>:
 8006670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	b085      	sub	sp, #20
 8006676:	e9cd 1000 	strd	r1, r0, [sp]
 800667a:	a902      	add	r1, sp, #8
 800667c:	f7ff ff56 	bl	800652c <__b2d>
 8006680:	9800      	ldr	r0, [sp, #0]
 8006682:	a903      	add	r1, sp, #12
 8006684:	ec55 4b10 	vmov	r4, r5, d0
 8006688:	f7ff ff50 	bl	800652c <__b2d>
 800668c:	9b01      	ldr	r3, [sp, #4]
 800668e:	6919      	ldr	r1, [r3, #16]
 8006690:	9b00      	ldr	r3, [sp, #0]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	1ac9      	subs	r1, r1, r3
 8006696:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800669a:	1a9b      	subs	r3, r3, r2
 800669c:	ec5b ab10 	vmov	sl, fp, d0
 80066a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	bfce      	itee	gt
 80066a8:	462a      	movgt	r2, r5
 80066aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80066ae:	465a      	movle	r2, fp
 80066b0:	462f      	mov	r7, r5
 80066b2:	46d9      	mov	r9, fp
 80066b4:	bfcc      	ite	gt
 80066b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80066ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80066be:	464b      	mov	r3, r9
 80066c0:	4652      	mov	r2, sl
 80066c2:	4620      	mov	r0, r4
 80066c4:	4639      	mov	r1, r7
 80066c6:	f7fa f8c9 	bl	800085c <__aeabi_ddiv>
 80066ca:	ec41 0b10 	vmov	d0, r0, r1
 80066ce:	b005      	add	sp, #20
 80066d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080066d4 <__copybits>:
 80066d4:	3901      	subs	r1, #1
 80066d6:	b570      	push	{r4, r5, r6, lr}
 80066d8:	1149      	asrs	r1, r1, #5
 80066da:	6914      	ldr	r4, [r2, #16]
 80066dc:	3101      	adds	r1, #1
 80066de:	f102 0314 	add.w	r3, r2, #20
 80066e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80066e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80066ea:	1f05      	subs	r5, r0, #4
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	d30c      	bcc.n	800670a <__copybits+0x36>
 80066f0:	1aa3      	subs	r3, r4, r2
 80066f2:	3b11      	subs	r3, #17
 80066f4:	f023 0303 	bic.w	r3, r3, #3
 80066f8:	3211      	adds	r2, #17
 80066fa:	42a2      	cmp	r2, r4
 80066fc:	bf88      	it	hi
 80066fe:	2300      	movhi	r3, #0
 8006700:	4418      	add	r0, r3
 8006702:	2300      	movs	r3, #0
 8006704:	4288      	cmp	r0, r1
 8006706:	d305      	bcc.n	8006714 <__copybits+0x40>
 8006708:	bd70      	pop	{r4, r5, r6, pc}
 800670a:	f853 6b04 	ldr.w	r6, [r3], #4
 800670e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006712:	e7eb      	b.n	80066ec <__copybits+0x18>
 8006714:	f840 3b04 	str.w	r3, [r0], #4
 8006718:	e7f4      	b.n	8006704 <__copybits+0x30>

0800671a <__any_on>:
 800671a:	f100 0214 	add.w	r2, r0, #20
 800671e:	6900      	ldr	r0, [r0, #16]
 8006720:	114b      	asrs	r3, r1, #5
 8006722:	4298      	cmp	r0, r3
 8006724:	b510      	push	{r4, lr}
 8006726:	db11      	blt.n	800674c <__any_on+0x32>
 8006728:	dd0a      	ble.n	8006740 <__any_on+0x26>
 800672a:	f011 011f 	ands.w	r1, r1, #31
 800672e:	d007      	beq.n	8006740 <__any_on+0x26>
 8006730:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006734:	fa24 f001 	lsr.w	r0, r4, r1
 8006738:	fa00 f101 	lsl.w	r1, r0, r1
 800673c:	428c      	cmp	r4, r1
 800673e:	d10b      	bne.n	8006758 <__any_on+0x3e>
 8006740:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006744:	4293      	cmp	r3, r2
 8006746:	d803      	bhi.n	8006750 <__any_on+0x36>
 8006748:	2000      	movs	r0, #0
 800674a:	bd10      	pop	{r4, pc}
 800674c:	4603      	mov	r3, r0
 800674e:	e7f7      	b.n	8006740 <__any_on+0x26>
 8006750:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006754:	2900      	cmp	r1, #0
 8006756:	d0f5      	beq.n	8006744 <__any_on+0x2a>
 8006758:	2001      	movs	r0, #1
 800675a:	e7f6      	b.n	800674a <__any_on+0x30>

0800675c <sulp>:
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	4604      	mov	r4, r0
 8006760:	460d      	mov	r5, r1
 8006762:	ec45 4b10 	vmov	d0, r4, r5
 8006766:	4616      	mov	r6, r2
 8006768:	f7ff feba 	bl	80064e0 <__ulp>
 800676c:	ec51 0b10 	vmov	r0, r1, d0
 8006770:	b17e      	cbz	r6, 8006792 <sulp+0x36>
 8006772:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006776:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800677a:	2b00      	cmp	r3, #0
 800677c:	dd09      	ble.n	8006792 <sulp+0x36>
 800677e:	051b      	lsls	r3, r3, #20
 8006780:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006784:	2400      	movs	r4, #0
 8006786:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800678a:	4622      	mov	r2, r4
 800678c:	462b      	mov	r3, r5
 800678e:	f7f9 ff3b 	bl	8000608 <__aeabi_dmul>
 8006792:	ec41 0b10 	vmov	d0, r0, r1
 8006796:	bd70      	pop	{r4, r5, r6, pc}

08006798 <_strtod_l>:
 8006798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679c:	b09f      	sub	sp, #124	@ 0x7c
 800679e:	460c      	mov	r4, r1
 80067a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80067a2:	2200      	movs	r2, #0
 80067a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80067a6:	9005      	str	r0, [sp, #20]
 80067a8:	f04f 0a00 	mov.w	sl, #0
 80067ac:	f04f 0b00 	mov.w	fp, #0
 80067b0:	460a      	mov	r2, r1
 80067b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80067b4:	7811      	ldrb	r1, [r2, #0]
 80067b6:	292b      	cmp	r1, #43	@ 0x2b
 80067b8:	d04a      	beq.n	8006850 <_strtod_l+0xb8>
 80067ba:	d838      	bhi.n	800682e <_strtod_l+0x96>
 80067bc:	290d      	cmp	r1, #13
 80067be:	d832      	bhi.n	8006826 <_strtod_l+0x8e>
 80067c0:	2908      	cmp	r1, #8
 80067c2:	d832      	bhi.n	800682a <_strtod_l+0x92>
 80067c4:	2900      	cmp	r1, #0
 80067c6:	d03b      	beq.n	8006840 <_strtod_l+0xa8>
 80067c8:	2200      	movs	r2, #0
 80067ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80067cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80067ce:	782a      	ldrb	r2, [r5, #0]
 80067d0:	2a30      	cmp	r2, #48	@ 0x30
 80067d2:	f040 80b3 	bne.w	800693c <_strtod_l+0x1a4>
 80067d6:	786a      	ldrb	r2, [r5, #1]
 80067d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80067dc:	2a58      	cmp	r2, #88	@ 0x58
 80067de:	d16e      	bne.n	80068be <_strtod_l+0x126>
 80067e0:	9302      	str	r3, [sp, #8]
 80067e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	ab1a      	add	r3, sp, #104	@ 0x68
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	4a8e      	ldr	r2, [pc, #568]	@ (8006a24 <_strtod_l+0x28c>)
 80067ec:	9805      	ldr	r0, [sp, #20]
 80067ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80067f0:	a919      	add	r1, sp, #100	@ 0x64
 80067f2:	f001 f927 	bl	8007a44 <__gethex>
 80067f6:	f010 060f 	ands.w	r6, r0, #15
 80067fa:	4604      	mov	r4, r0
 80067fc:	d005      	beq.n	800680a <_strtod_l+0x72>
 80067fe:	2e06      	cmp	r6, #6
 8006800:	d128      	bne.n	8006854 <_strtod_l+0xbc>
 8006802:	3501      	adds	r5, #1
 8006804:	2300      	movs	r3, #0
 8006806:	9519      	str	r5, [sp, #100]	@ 0x64
 8006808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800680a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800680c:	2b00      	cmp	r3, #0
 800680e:	f040 858e 	bne.w	800732e <_strtod_l+0xb96>
 8006812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006814:	b1cb      	cbz	r3, 800684a <_strtod_l+0xb2>
 8006816:	4652      	mov	r2, sl
 8006818:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800681c:	ec43 2b10 	vmov	d0, r2, r3
 8006820:	b01f      	add	sp, #124	@ 0x7c
 8006822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006826:	2920      	cmp	r1, #32
 8006828:	d1ce      	bne.n	80067c8 <_strtod_l+0x30>
 800682a:	3201      	adds	r2, #1
 800682c:	e7c1      	b.n	80067b2 <_strtod_l+0x1a>
 800682e:	292d      	cmp	r1, #45	@ 0x2d
 8006830:	d1ca      	bne.n	80067c8 <_strtod_l+0x30>
 8006832:	2101      	movs	r1, #1
 8006834:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006836:	1c51      	adds	r1, r2, #1
 8006838:	9119      	str	r1, [sp, #100]	@ 0x64
 800683a:	7852      	ldrb	r2, [r2, #1]
 800683c:	2a00      	cmp	r2, #0
 800683e:	d1c5      	bne.n	80067cc <_strtod_l+0x34>
 8006840:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006842:	9419      	str	r4, [sp, #100]	@ 0x64
 8006844:	2b00      	cmp	r3, #0
 8006846:	f040 8570 	bne.w	800732a <_strtod_l+0xb92>
 800684a:	4652      	mov	r2, sl
 800684c:	465b      	mov	r3, fp
 800684e:	e7e5      	b.n	800681c <_strtod_l+0x84>
 8006850:	2100      	movs	r1, #0
 8006852:	e7ef      	b.n	8006834 <_strtod_l+0x9c>
 8006854:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006856:	b13a      	cbz	r2, 8006868 <_strtod_l+0xd0>
 8006858:	2135      	movs	r1, #53	@ 0x35
 800685a:	a81c      	add	r0, sp, #112	@ 0x70
 800685c:	f7ff ff3a 	bl	80066d4 <__copybits>
 8006860:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006862:	9805      	ldr	r0, [sp, #20]
 8006864:	f7ff fb08 	bl	8005e78 <_Bfree>
 8006868:	3e01      	subs	r6, #1
 800686a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800686c:	2e04      	cmp	r6, #4
 800686e:	d806      	bhi.n	800687e <_strtod_l+0xe6>
 8006870:	e8df f006 	tbb	[pc, r6]
 8006874:	201d0314 	.word	0x201d0314
 8006878:	14          	.byte	0x14
 8006879:	00          	.byte	0x00
 800687a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800687e:	05e1      	lsls	r1, r4, #23
 8006880:	bf48      	it	mi
 8006882:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006886:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800688a:	0d1b      	lsrs	r3, r3, #20
 800688c:	051b      	lsls	r3, r3, #20
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1bb      	bne.n	800680a <_strtod_l+0x72>
 8006892:	f7fe fb2f 	bl	8004ef4 <__errno>
 8006896:	2322      	movs	r3, #34	@ 0x22
 8006898:	6003      	str	r3, [r0, #0]
 800689a:	e7b6      	b.n	800680a <_strtod_l+0x72>
 800689c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80068a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80068a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80068a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80068ac:	e7e7      	b.n	800687e <_strtod_l+0xe6>
 80068ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006a2c <_strtod_l+0x294>
 80068b2:	e7e4      	b.n	800687e <_strtod_l+0xe6>
 80068b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80068b8:	f04f 3aff 	mov.w	sl, #4294967295
 80068bc:	e7df      	b.n	800687e <_strtod_l+0xe6>
 80068be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	2b30      	cmp	r3, #48	@ 0x30
 80068c8:	d0f9      	beq.n	80068be <_strtod_l+0x126>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d09d      	beq.n	800680a <_strtod_l+0x72>
 80068ce:	2301      	movs	r3, #1
 80068d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80068d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80068d6:	2300      	movs	r3, #0
 80068d8:	9308      	str	r3, [sp, #32]
 80068da:	930a      	str	r3, [sp, #40]	@ 0x28
 80068dc:	461f      	mov	r7, r3
 80068de:	220a      	movs	r2, #10
 80068e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80068e2:	7805      	ldrb	r5, [r0, #0]
 80068e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80068e8:	b2d9      	uxtb	r1, r3
 80068ea:	2909      	cmp	r1, #9
 80068ec:	d928      	bls.n	8006940 <_strtod_l+0x1a8>
 80068ee:	494e      	ldr	r1, [pc, #312]	@ (8006a28 <_strtod_l+0x290>)
 80068f0:	2201      	movs	r2, #1
 80068f2:	f000 ffd5 	bl	80078a0 <strncmp>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d032      	beq.n	8006960 <_strtod_l+0x1c8>
 80068fa:	2000      	movs	r0, #0
 80068fc:	462a      	mov	r2, r5
 80068fe:	4681      	mov	r9, r0
 8006900:	463d      	mov	r5, r7
 8006902:	4603      	mov	r3, r0
 8006904:	2a65      	cmp	r2, #101	@ 0x65
 8006906:	d001      	beq.n	800690c <_strtod_l+0x174>
 8006908:	2a45      	cmp	r2, #69	@ 0x45
 800690a:	d114      	bne.n	8006936 <_strtod_l+0x19e>
 800690c:	b91d      	cbnz	r5, 8006916 <_strtod_l+0x17e>
 800690e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006910:	4302      	orrs	r2, r0
 8006912:	d095      	beq.n	8006840 <_strtod_l+0xa8>
 8006914:	2500      	movs	r5, #0
 8006916:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006918:	1c62      	adds	r2, r4, #1
 800691a:	9219      	str	r2, [sp, #100]	@ 0x64
 800691c:	7862      	ldrb	r2, [r4, #1]
 800691e:	2a2b      	cmp	r2, #43	@ 0x2b
 8006920:	d077      	beq.n	8006a12 <_strtod_l+0x27a>
 8006922:	2a2d      	cmp	r2, #45	@ 0x2d
 8006924:	d07b      	beq.n	8006a1e <_strtod_l+0x286>
 8006926:	f04f 0c00 	mov.w	ip, #0
 800692a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800692e:	2909      	cmp	r1, #9
 8006930:	f240 8082 	bls.w	8006a38 <_strtod_l+0x2a0>
 8006934:	9419      	str	r4, [sp, #100]	@ 0x64
 8006936:	f04f 0800 	mov.w	r8, #0
 800693a:	e0a2      	b.n	8006a82 <_strtod_l+0x2ea>
 800693c:	2300      	movs	r3, #0
 800693e:	e7c7      	b.n	80068d0 <_strtod_l+0x138>
 8006940:	2f08      	cmp	r7, #8
 8006942:	bfd5      	itete	le
 8006944:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006946:	9908      	ldrgt	r1, [sp, #32]
 8006948:	fb02 3301 	mlale	r3, r2, r1, r3
 800694c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006950:	f100 0001 	add.w	r0, r0, #1
 8006954:	bfd4      	ite	le
 8006956:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006958:	9308      	strgt	r3, [sp, #32]
 800695a:	3701      	adds	r7, #1
 800695c:	9019      	str	r0, [sp, #100]	@ 0x64
 800695e:	e7bf      	b.n	80068e0 <_strtod_l+0x148>
 8006960:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006962:	1c5a      	adds	r2, r3, #1
 8006964:	9219      	str	r2, [sp, #100]	@ 0x64
 8006966:	785a      	ldrb	r2, [r3, #1]
 8006968:	b37f      	cbz	r7, 80069ca <_strtod_l+0x232>
 800696a:	4681      	mov	r9, r0
 800696c:	463d      	mov	r5, r7
 800696e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006972:	2b09      	cmp	r3, #9
 8006974:	d912      	bls.n	800699c <_strtod_l+0x204>
 8006976:	2301      	movs	r3, #1
 8006978:	e7c4      	b.n	8006904 <_strtod_l+0x16c>
 800697a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006980:	785a      	ldrb	r2, [r3, #1]
 8006982:	3001      	adds	r0, #1
 8006984:	2a30      	cmp	r2, #48	@ 0x30
 8006986:	d0f8      	beq.n	800697a <_strtod_l+0x1e2>
 8006988:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800698c:	2b08      	cmp	r3, #8
 800698e:	f200 84d3 	bhi.w	8007338 <_strtod_l+0xba0>
 8006992:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006994:	930c      	str	r3, [sp, #48]	@ 0x30
 8006996:	4681      	mov	r9, r0
 8006998:	2000      	movs	r0, #0
 800699a:	4605      	mov	r5, r0
 800699c:	3a30      	subs	r2, #48	@ 0x30
 800699e:	f100 0301 	add.w	r3, r0, #1
 80069a2:	d02a      	beq.n	80069fa <_strtod_l+0x262>
 80069a4:	4499      	add	r9, r3
 80069a6:	eb00 0c05 	add.w	ip, r0, r5
 80069aa:	462b      	mov	r3, r5
 80069ac:	210a      	movs	r1, #10
 80069ae:	4563      	cmp	r3, ip
 80069b0:	d10d      	bne.n	80069ce <_strtod_l+0x236>
 80069b2:	1c69      	adds	r1, r5, #1
 80069b4:	4401      	add	r1, r0
 80069b6:	4428      	add	r0, r5
 80069b8:	2808      	cmp	r0, #8
 80069ba:	dc16      	bgt.n	80069ea <_strtod_l+0x252>
 80069bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80069be:	230a      	movs	r3, #10
 80069c0:	fb03 2300 	mla	r3, r3, r0, r2
 80069c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80069c6:	2300      	movs	r3, #0
 80069c8:	e018      	b.n	80069fc <_strtod_l+0x264>
 80069ca:	4638      	mov	r0, r7
 80069cc:	e7da      	b.n	8006984 <_strtod_l+0x1ec>
 80069ce:	2b08      	cmp	r3, #8
 80069d0:	f103 0301 	add.w	r3, r3, #1
 80069d4:	dc03      	bgt.n	80069de <_strtod_l+0x246>
 80069d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80069d8:	434e      	muls	r6, r1
 80069da:	960a      	str	r6, [sp, #40]	@ 0x28
 80069dc:	e7e7      	b.n	80069ae <_strtod_l+0x216>
 80069de:	2b10      	cmp	r3, #16
 80069e0:	bfde      	ittt	le
 80069e2:	9e08      	ldrle	r6, [sp, #32]
 80069e4:	434e      	mulle	r6, r1
 80069e6:	9608      	strle	r6, [sp, #32]
 80069e8:	e7e1      	b.n	80069ae <_strtod_l+0x216>
 80069ea:	280f      	cmp	r0, #15
 80069ec:	dceb      	bgt.n	80069c6 <_strtod_l+0x22e>
 80069ee:	9808      	ldr	r0, [sp, #32]
 80069f0:	230a      	movs	r3, #10
 80069f2:	fb03 2300 	mla	r3, r3, r0, r2
 80069f6:	9308      	str	r3, [sp, #32]
 80069f8:	e7e5      	b.n	80069c6 <_strtod_l+0x22e>
 80069fa:	4629      	mov	r1, r5
 80069fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069fe:	1c50      	adds	r0, r2, #1
 8006a00:	9019      	str	r0, [sp, #100]	@ 0x64
 8006a02:	7852      	ldrb	r2, [r2, #1]
 8006a04:	4618      	mov	r0, r3
 8006a06:	460d      	mov	r5, r1
 8006a08:	e7b1      	b.n	800696e <_strtod_l+0x1d6>
 8006a0a:	f04f 0900 	mov.w	r9, #0
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e77d      	b.n	800690e <_strtod_l+0x176>
 8006a12:	f04f 0c00 	mov.w	ip, #0
 8006a16:	1ca2      	adds	r2, r4, #2
 8006a18:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a1a:	78a2      	ldrb	r2, [r4, #2]
 8006a1c:	e785      	b.n	800692a <_strtod_l+0x192>
 8006a1e:	f04f 0c01 	mov.w	ip, #1
 8006a22:	e7f8      	b.n	8006a16 <_strtod_l+0x27e>
 8006a24:	080088e8 	.word	0x080088e8
 8006a28:	080088d0 	.word	0x080088d0
 8006a2c:	7ff00000 	.word	0x7ff00000
 8006a30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a32:	1c51      	adds	r1, r2, #1
 8006a34:	9119      	str	r1, [sp, #100]	@ 0x64
 8006a36:	7852      	ldrb	r2, [r2, #1]
 8006a38:	2a30      	cmp	r2, #48	@ 0x30
 8006a3a:	d0f9      	beq.n	8006a30 <_strtod_l+0x298>
 8006a3c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006a40:	2908      	cmp	r1, #8
 8006a42:	f63f af78 	bhi.w	8006936 <_strtod_l+0x19e>
 8006a46:	3a30      	subs	r2, #48	@ 0x30
 8006a48:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006a4e:	f04f 080a 	mov.w	r8, #10
 8006a52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a54:	1c56      	adds	r6, r2, #1
 8006a56:	9619      	str	r6, [sp, #100]	@ 0x64
 8006a58:	7852      	ldrb	r2, [r2, #1]
 8006a5a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006a5e:	f1be 0f09 	cmp.w	lr, #9
 8006a62:	d939      	bls.n	8006ad8 <_strtod_l+0x340>
 8006a64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006a66:	1a76      	subs	r6, r6, r1
 8006a68:	2e08      	cmp	r6, #8
 8006a6a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006a6e:	dc03      	bgt.n	8006a78 <_strtod_l+0x2e0>
 8006a70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006a72:	4588      	cmp	r8, r1
 8006a74:	bfa8      	it	ge
 8006a76:	4688      	movge	r8, r1
 8006a78:	f1bc 0f00 	cmp.w	ip, #0
 8006a7c:	d001      	beq.n	8006a82 <_strtod_l+0x2ea>
 8006a7e:	f1c8 0800 	rsb	r8, r8, #0
 8006a82:	2d00      	cmp	r5, #0
 8006a84:	d14e      	bne.n	8006b24 <_strtod_l+0x38c>
 8006a86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a88:	4308      	orrs	r0, r1
 8006a8a:	f47f aebe 	bne.w	800680a <_strtod_l+0x72>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f47f aed6 	bne.w	8006840 <_strtod_l+0xa8>
 8006a94:	2a69      	cmp	r2, #105	@ 0x69
 8006a96:	d028      	beq.n	8006aea <_strtod_l+0x352>
 8006a98:	dc25      	bgt.n	8006ae6 <_strtod_l+0x34e>
 8006a9a:	2a49      	cmp	r2, #73	@ 0x49
 8006a9c:	d025      	beq.n	8006aea <_strtod_l+0x352>
 8006a9e:	2a4e      	cmp	r2, #78	@ 0x4e
 8006aa0:	f47f aece 	bne.w	8006840 <_strtod_l+0xa8>
 8006aa4:	499b      	ldr	r1, [pc, #620]	@ (8006d14 <_strtod_l+0x57c>)
 8006aa6:	a819      	add	r0, sp, #100	@ 0x64
 8006aa8:	f001 f9ee 	bl	8007e88 <__match>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	f43f aec7 	beq.w	8006840 <_strtod_l+0xa8>
 8006ab2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2b28      	cmp	r3, #40	@ 0x28
 8006ab8:	d12e      	bne.n	8006b18 <_strtod_l+0x380>
 8006aba:	4997      	ldr	r1, [pc, #604]	@ (8006d18 <_strtod_l+0x580>)
 8006abc:	aa1c      	add	r2, sp, #112	@ 0x70
 8006abe:	a819      	add	r0, sp, #100	@ 0x64
 8006ac0:	f001 f9f6 	bl	8007eb0 <__hexnan>
 8006ac4:	2805      	cmp	r0, #5
 8006ac6:	d127      	bne.n	8006b18 <_strtod_l+0x380>
 8006ac8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006aca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006ace:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006ad2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006ad6:	e698      	b.n	800680a <_strtod_l+0x72>
 8006ad8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006ada:	fb08 2101 	mla	r1, r8, r1, r2
 8006ade:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006ae2:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ae4:	e7b5      	b.n	8006a52 <_strtod_l+0x2ba>
 8006ae6:	2a6e      	cmp	r2, #110	@ 0x6e
 8006ae8:	e7da      	b.n	8006aa0 <_strtod_l+0x308>
 8006aea:	498c      	ldr	r1, [pc, #560]	@ (8006d1c <_strtod_l+0x584>)
 8006aec:	a819      	add	r0, sp, #100	@ 0x64
 8006aee:	f001 f9cb 	bl	8007e88 <__match>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	f43f aea4 	beq.w	8006840 <_strtod_l+0xa8>
 8006af8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006afa:	4989      	ldr	r1, [pc, #548]	@ (8006d20 <_strtod_l+0x588>)
 8006afc:	3b01      	subs	r3, #1
 8006afe:	a819      	add	r0, sp, #100	@ 0x64
 8006b00:	9319      	str	r3, [sp, #100]	@ 0x64
 8006b02:	f001 f9c1 	bl	8007e88 <__match>
 8006b06:	b910      	cbnz	r0, 8006b0e <_strtod_l+0x376>
 8006b08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006b0e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006d30 <_strtod_l+0x598>
 8006b12:	f04f 0a00 	mov.w	sl, #0
 8006b16:	e678      	b.n	800680a <_strtod_l+0x72>
 8006b18:	4882      	ldr	r0, [pc, #520]	@ (8006d24 <_strtod_l+0x58c>)
 8006b1a:	f000 fef1 	bl	8007900 <nan>
 8006b1e:	ec5b ab10 	vmov	sl, fp, d0
 8006b22:	e672      	b.n	800680a <_strtod_l+0x72>
 8006b24:	eba8 0309 	sub.w	r3, r8, r9
 8006b28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b2c:	2f00      	cmp	r7, #0
 8006b2e:	bf08      	it	eq
 8006b30:	462f      	moveq	r7, r5
 8006b32:	2d10      	cmp	r5, #16
 8006b34:	462c      	mov	r4, r5
 8006b36:	bfa8      	it	ge
 8006b38:	2410      	movge	r4, #16
 8006b3a:	f7f9 fceb 	bl	8000514 <__aeabi_ui2d>
 8006b3e:	2d09      	cmp	r5, #9
 8006b40:	4682      	mov	sl, r0
 8006b42:	468b      	mov	fp, r1
 8006b44:	dc13      	bgt.n	8006b6e <_strtod_l+0x3d6>
 8006b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f43f ae5e 	beq.w	800680a <_strtod_l+0x72>
 8006b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b50:	dd78      	ble.n	8006c44 <_strtod_l+0x4ac>
 8006b52:	2b16      	cmp	r3, #22
 8006b54:	dc5f      	bgt.n	8006c16 <_strtod_l+0x47e>
 8006b56:	4974      	ldr	r1, [pc, #464]	@ (8006d28 <_strtod_l+0x590>)
 8006b58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b60:	4652      	mov	r2, sl
 8006b62:	465b      	mov	r3, fp
 8006b64:	f7f9 fd50 	bl	8000608 <__aeabi_dmul>
 8006b68:	4682      	mov	sl, r0
 8006b6a:	468b      	mov	fp, r1
 8006b6c:	e64d      	b.n	800680a <_strtod_l+0x72>
 8006b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8006d28 <_strtod_l+0x590>)
 8006b70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006b78:	f7f9 fd46 	bl	8000608 <__aeabi_dmul>
 8006b7c:	4682      	mov	sl, r0
 8006b7e:	9808      	ldr	r0, [sp, #32]
 8006b80:	468b      	mov	fp, r1
 8006b82:	f7f9 fcc7 	bl	8000514 <__aeabi_ui2d>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4650      	mov	r0, sl
 8006b8c:	4659      	mov	r1, fp
 8006b8e:	f7f9 fb85 	bl	800029c <__adddf3>
 8006b92:	2d0f      	cmp	r5, #15
 8006b94:	4682      	mov	sl, r0
 8006b96:	468b      	mov	fp, r1
 8006b98:	ddd5      	ble.n	8006b46 <_strtod_l+0x3ae>
 8006b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b9c:	1b2c      	subs	r4, r5, r4
 8006b9e:	441c      	add	r4, r3
 8006ba0:	2c00      	cmp	r4, #0
 8006ba2:	f340 8096 	ble.w	8006cd2 <_strtod_l+0x53a>
 8006ba6:	f014 030f 	ands.w	r3, r4, #15
 8006baa:	d00a      	beq.n	8006bc2 <_strtod_l+0x42a>
 8006bac:	495e      	ldr	r1, [pc, #376]	@ (8006d28 <_strtod_l+0x590>)
 8006bae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006bb2:	4652      	mov	r2, sl
 8006bb4:	465b      	mov	r3, fp
 8006bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bba:	f7f9 fd25 	bl	8000608 <__aeabi_dmul>
 8006bbe:	4682      	mov	sl, r0
 8006bc0:	468b      	mov	fp, r1
 8006bc2:	f034 040f 	bics.w	r4, r4, #15
 8006bc6:	d073      	beq.n	8006cb0 <_strtod_l+0x518>
 8006bc8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006bcc:	dd48      	ble.n	8006c60 <_strtod_l+0x4c8>
 8006bce:	2400      	movs	r4, #0
 8006bd0:	46a0      	mov	r8, r4
 8006bd2:	940a      	str	r4, [sp, #40]	@ 0x28
 8006bd4:	46a1      	mov	r9, r4
 8006bd6:	9a05      	ldr	r2, [sp, #20]
 8006bd8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006d30 <_strtod_l+0x598>
 8006bdc:	2322      	movs	r3, #34	@ 0x22
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	f04f 0a00 	mov.w	sl, #0
 8006be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f43f ae0f 	beq.w	800680a <_strtod_l+0x72>
 8006bec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bee:	9805      	ldr	r0, [sp, #20]
 8006bf0:	f7ff f942 	bl	8005e78 <_Bfree>
 8006bf4:	9805      	ldr	r0, [sp, #20]
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	f7ff f93e 	bl	8005e78 <_Bfree>
 8006bfc:	9805      	ldr	r0, [sp, #20]
 8006bfe:	4641      	mov	r1, r8
 8006c00:	f7ff f93a 	bl	8005e78 <_Bfree>
 8006c04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c06:	9805      	ldr	r0, [sp, #20]
 8006c08:	f7ff f936 	bl	8005e78 <_Bfree>
 8006c0c:	9805      	ldr	r0, [sp, #20]
 8006c0e:	4621      	mov	r1, r4
 8006c10:	f7ff f932 	bl	8005e78 <_Bfree>
 8006c14:	e5f9      	b.n	800680a <_strtod_l+0x72>
 8006c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	dbbc      	blt.n	8006b9a <_strtod_l+0x402>
 8006c20:	4c41      	ldr	r4, [pc, #260]	@ (8006d28 <_strtod_l+0x590>)
 8006c22:	f1c5 050f 	rsb	r5, r5, #15
 8006c26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006c2a:	4652      	mov	r2, sl
 8006c2c:	465b      	mov	r3, fp
 8006c2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c32:	f7f9 fce9 	bl	8000608 <__aeabi_dmul>
 8006c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c38:	1b5d      	subs	r5, r3, r5
 8006c3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006c3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006c42:	e78f      	b.n	8006b64 <_strtod_l+0x3cc>
 8006c44:	3316      	adds	r3, #22
 8006c46:	dba8      	blt.n	8006b9a <_strtod_l+0x402>
 8006c48:	4b37      	ldr	r3, [pc, #220]	@ (8006d28 <_strtod_l+0x590>)
 8006c4a:	eba9 0808 	sub.w	r8, r9, r8
 8006c4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006c52:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006c56:	4650      	mov	r0, sl
 8006c58:	4659      	mov	r1, fp
 8006c5a:	f7f9 fdff 	bl	800085c <__aeabi_ddiv>
 8006c5e:	e783      	b.n	8006b68 <_strtod_l+0x3d0>
 8006c60:	4b32      	ldr	r3, [pc, #200]	@ (8006d2c <_strtod_l+0x594>)
 8006c62:	9308      	str	r3, [sp, #32]
 8006c64:	2300      	movs	r3, #0
 8006c66:	1124      	asrs	r4, r4, #4
 8006c68:	4650      	mov	r0, sl
 8006c6a:	4659      	mov	r1, fp
 8006c6c:	461e      	mov	r6, r3
 8006c6e:	2c01      	cmp	r4, #1
 8006c70:	dc21      	bgt.n	8006cb6 <_strtod_l+0x51e>
 8006c72:	b10b      	cbz	r3, 8006c78 <_strtod_l+0x4e0>
 8006c74:	4682      	mov	sl, r0
 8006c76:	468b      	mov	fp, r1
 8006c78:	492c      	ldr	r1, [pc, #176]	@ (8006d2c <_strtod_l+0x594>)
 8006c7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006c7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006c82:	4652      	mov	r2, sl
 8006c84:	465b      	mov	r3, fp
 8006c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c8a:	f7f9 fcbd 	bl	8000608 <__aeabi_dmul>
 8006c8e:	4b28      	ldr	r3, [pc, #160]	@ (8006d30 <_strtod_l+0x598>)
 8006c90:	460a      	mov	r2, r1
 8006c92:	400b      	ands	r3, r1
 8006c94:	4927      	ldr	r1, [pc, #156]	@ (8006d34 <_strtod_l+0x59c>)
 8006c96:	428b      	cmp	r3, r1
 8006c98:	4682      	mov	sl, r0
 8006c9a:	d898      	bhi.n	8006bce <_strtod_l+0x436>
 8006c9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006ca0:	428b      	cmp	r3, r1
 8006ca2:	bf86      	itte	hi
 8006ca4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006d38 <_strtod_l+0x5a0>
 8006ca8:	f04f 3aff 	movhi.w	sl, #4294967295
 8006cac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	9308      	str	r3, [sp, #32]
 8006cb4:	e07a      	b.n	8006dac <_strtod_l+0x614>
 8006cb6:	07e2      	lsls	r2, r4, #31
 8006cb8:	d505      	bpl.n	8006cc6 <_strtod_l+0x52e>
 8006cba:	9b08      	ldr	r3, [sp, #32]
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f7f9 fca2 	bl	8000608 <__aeabi_dmul>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	9a08      	ldr	r2, [sp, #32]
 8006cc8:	3208      	adds	r2, #8
 8006cca:	3601      	adds	r6, #1
 8006ccc:	1064      	asrs	r4, r4, #1
 8006cce:	9208      	str	r2, [sp, #32]
 8006cd0:	e7cd      	b.n	8006c6e <_strtod_l+0x4d6>
 8006cd2:	d0ed      	beq.n	8006cb0 <_strtod_l+0x518>
 8006cd4:	4264      	negs	r4, r4
 8006cd6:	f014 020f 	ands.w	r2, r4, #15
 8006cda:	d00a      	beq.n	8006cf2 <_strtod_l+0x55a>
 8006cdc:	4b12      	ldr	r3, [pc, #72]	@ (8006d28 <_strtod_l+0x590>)
 8006cde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ce2:	4650      	mov	r0, sl
 8006ce4:	4659      	mov	r1, fp
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	f7f9 fdb7 	bl	800085c <__aeabi_ddiv>
 8006cee:	4682      	mov	sl, r0
 8006cf0:	468b      	mov	fp, r1
 8006cf2:	1124      	asrs	r4, r4, #4
 8006cf4:	d0dc      	beq.n	8006cb0 <_strtod_l+0x518>
 8006cf6:	2c1f      	cmp	r4, #31
 8006cf8:	dd20      	ble.n	8006d3c <_strtod_l+0x5a4>
 8006cfa:	2400      	movs	r4, #0
 8006cfc:	46a0      	mov	r8, r4
 8006cfe:	940a      	str	r4, [sp, #40]	@ 0x28
 8006d00:	46a1      	mov	r9, r4
 8006d02:	9a05      	ldr	r2, [sp, #20]
 8006d04:	2322      	movs	r3, #34	@ 0x22
 8006d06:	f04f 0a00 	mov.w	sl, #0
 8006d0a:	f04f 0b00 	mov.w	fp, #0
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	e768      	b.n	8006be4 <_strtod_l+0x44c>
 8006d12:	bf00      	nop
 8006d14:	080086bd 	.word	0x080086bd
 8006d18:	080088d4 	.word	0x080088d4
 8006d1c:	080086b5 	.word	0x080086b5
 8006d20:	080086ec 	.word	0x080086ec
 8006d24:	08008a7d 	.word	0x08008a7d
 8006d28:	08008808 	.word	0x08008808
 8006d2c:	080087e0 	.word	0x080087e0
 8006d30:	7ff00000 	.word	0x7ff00000
 8006d34:	7ca00000 	.word	0x7ca00000
 8006d38:	7fefffff 	.word	0x7fefffff
 8006d3c:	f014 0310 	ands.w	r3, r4, #16
 8006d40:	bf18      	it	ne
 8006d42:	236a      	movne	r3, #106	@ 0x6a
 8006d44:	4ea9      	ldr	r6, [pc, #676]	@ (8006fec <_strtod_l+0x854>)
 8006d46:	9308      	str	r3, [sp, #32]
 8006d48:	4650      	mov	r0, sl
 8006d4a:	4659      	mov	r1, fp
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	07e2      	lsls	r2, r4, #31
 8006d50:	d504      	bpl.n	8006d5c <_strtod_l+0x5c4>
 8006d52:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d56:	f7f9 fc57 	bl	8000608 <__aeabi_dmul>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	1064      	asrs	r4, r4, #1
 8006d5e:	f106 0608 	add.w	r6, r6, #8
 8006d62:	d1f4      	bne.n	8006d4e <_strtod_l+0x5b6>
 8006d64:	b10b      	cbz	r3, 8006d6a <_strtod_l+0x5d2>
 8006d66:	4682      	mov	sl, r0
 8006d68:	468b      	mov	fp, r1
 8006d6a:	9b08      	ldr	r3, [sp, #32]
 8006d6c:	b1b3      	cbz	r3, 8006d9c <_strtod_l+0x604>
 8006d6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006d72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	4659      	mov	r1, fp
 8006d7a:	dd0f      	ble.n	8006d9c <_strtod_l+0x604>
 8006d7c:	2b1f      	cmp	r3, #31
 8006d7e:	dd55      	ble.n	8006e2c <_strtod_l+0x694>
 8006d80:	2b34      	cmp	r3, #52	@ 0x34
 8006d82:	bfde      	ittt	le
 8006d84:	f04f 33ff 	movle.w	r3, #4294967295
 8006d88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006d8c:	4093      	lslle	r3, r2
 8006d8e:	f04f 0a00 	mov.w	sl, #0
 8006d92:	bfcc      	ite	gt
 8006d94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006d98:	ea03 0b01 	andle.w	fp, r3, r1
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2300      	movs	r3, #0
 8006da0:	4650      	mov	r0, sl
 8006da2:	4659      	mov	r1, fp
 8006da4:	f7f9 fe98 	bl	8000ad8 <__aeabi_dcmpeq>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d1a6      	bne.n	8006cfa <_strtod_l+0x562>
 8006dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006db2:	9805      	ldr	r0, [sp, #20]
 8006db4:	462b      	mov	r3, r5
 8006db6:	463a      	mov	r2, r7
 8006db8:	f7ff f8c6 	bl	8005f48 <__s2b>
 8006dbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	f43f af05 	beq.w	8006bce <_strtod_l+0x436>
 8006dc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dc6:	2a00      	cmp	r2, #0
 8006dc8:	eba9 0308 	sub.w	r3, r9, r8
 8006dcc:	bfa8      	it	ge
 8006dce:	2300      	movge	r3, #0
 8006dd0:	9312      	str	r3, [sp, #72]	@ 0x48
 8006dd2:	2400      	movs	r4, #0
 8006dd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006dd8:	9316      	str	r3, [sp, #88]	@ 0x58
 8006dda:	46a0      	mov	r8, r4
 8006ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dde:	9805      	ldr	r0, [sp, #20]
 8006de0:	6859      	ldr	r1, [r3, #4]
 8006de2:	f7ff f809 	bl	8005df8 <_Balloc>
 8006de6:	4681      	mov	r9, r0
 8006de8:	2800      	cmp	r0, #0
 8006dea:	f43f aef4 	beq.w	8006bd6 <_strtod_l+0x43e>
 8006dee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006df0:	691a      	ldr	r2, [r3, #16]
 8006df2:	3202      	adds	r2, #2
 8006df4:	f103 010c 	add.w	r1, r3, #12
 8006df8:	0092      	lsls	r2, r2, #2
 8006dfa:	300c      	adds	r0, #12
 8006dfc:	f000 fd72 	bl	80078e4 <memcpy>
 8006e00:	ec4b ab10 	vmov	d0, sl, fp
 8006e04:	9805      	ldr	r0, [sp, #20]
 8006e06:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e08:	a91b      	add	r1, sp, #108	@ 0x6c
 8006e0a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006e0e:	f7ff fbd7 	bl	80065c0 <__d2b>
 8006e12:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e14:	2800      	cmp	r0, #0
 8006e16:	f43f aede 	beq.w	8006bd6 <_strtod_l+0x43e>
 8006e1a:	9805      	ldr	r0, [sp, #20]
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	f7ff f929 	bl	8006074 <__i2b>
 8006e22:	4680      	mov	r8, r0
 8006e24:	b948      	cbnz	r0, 8006e3a <_strtod_l+0x6a2>
 8006e26:	f04f 0800 	mov.w	r8, #0
 8006e2a:	e6d4      	b.n	8006bd6 <_strtod_l+0x43e>
 8006e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e30:	fa02 f303 	lsl.w	r3, r2, r3
 8006e34:	ea03 0a0a 	and.w	sl, r3, sl
 8006e38:	e7b0      	b.n	8006d9c <_strtod_l+0x604>
 8006e3a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006e3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006e3e:	2d00      	cmp	r5, #0
 8006e40:	bfab      	itete	ge
 8006e42:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006e44:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006e46:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006e48:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006e4a:	bfac      	ite	ge
 8006e4c:	18ef      	addge	r7, r5, r3
 8006e4e:	1b5e      	sublt	r6, r3, r5
 8006e50:	9b08      	ldr	r3, [sp, #32]
 8006e52:	1aed      	subs	r5, r5, r3
 8006e54:	4415      	add	r5, r2
 8006e56:	4b66      	ldr	r3, [pc, #408]	@ (8006ff0 <_strtod_l+0x858>)
 8006e58:	3d01      	subs	r5, #1
 8006e5a:	429d      	cmp	r5, r3
 8006e5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006e60:	da50      	bge.n	8006f04 <_strtod_l+0x76c>
 8006e62:	1b5b      	subs	r3, r3, r5
 8006e64:	2b1f      	cmp	r3, #31
 8006e66:	eba2 0203 	sub.w	r2, r2, r3
 8006e6a:	f04f 0101 	mov.w	r1, #1
 8006e6e:	dc3d      	bgt.n	8006eec <_strtod_l+0x754>
 8006e70:	fa01 f303 	lsl.w	r3, r1, r3
 8006e74:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e76:	2300      	movs	r3, #0
 8006e78:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e7a:	18bd      	adds	r5, r7, r2
 8006e7c:	9b08      	ldr	r3, [sp, #32]
 8006e7e:	42af      	cmp	r7, r5
 8006e80:	4416      	add	r6, r2
 8006e82:	441e      	add	r6, r3
 8006e84:	463b      	mov	r3, r7
 8006e86:	bfa8      	it	ge
 8006e88:	462b      	movge	r3, r5
 8006e8a:	42b3      	cmp	r3, r6
 8006e8c:	bfa8      	it	ge
 8006e8e:	4633      	movge	r3, r6
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	bfc2      	ittt	gt
 8006e94:	1aed      	subgt	r5, r5, r3
 8006e96:	1af6      	subgt	r6, r6, r3
 8006e98:	1aff      	subgt	r7, r7, r3
 8006e9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	dd16      	ble.n	8006ece <_strtod_l+0x736>
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	9805      	ldr	r0, [sp, #20]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f7ff f9a5 	bl	80061f4 <__pow5mult>
 8006eaa:	4680      	mov	r8, r0
 8006eac:	2800      	cmp	r0, #0
 8006eae:	d0ba      	beq.n	8006e26 <_strtod_l+0x68e>
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006eb4:	9805      	ldr	r0, [sp, #20]
 8006eb6:	f7ff f8f3 	bl	80060a0 <__multiply>
 8006eba:	900e      	str	r0, [sp, #56]	@ 0x38
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f43f ae8a 	beq.w	8006bd6 <_strtod_l+0x43e>
 8006ec2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ec4:	9805      	ldr	r0, [sp, #20]
 8006ec6:	f7fe ffd7 	bl	8005e78 <_Bfree>
 8006eca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ecc:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ece:	2d00      	cmp	r5, #0
 8006ed0:	dc1d      	bgt.n	8006f0e <_strtod_l+0x776>
 8006ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	dd23      	ble.n	8006f20 <_strtod_l+0x788>
 8006ed8:	4649      	mov	r1, r9
 8006eda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006edc:	9805      	ldr	r0, [sp, #20]
 8006ede:	f7ff f989 	bl	80061f4 <__pow5mult>
 8006ee2:	4681      	mov	r9, r0
 8006ee4:	b9e0      	cbnz	r0, 8006f20 <_strtod_l+0x788>
 8006ee6:	f04f 0900 	mov.w	r9, #0
 8006eea:	e674      	b.n	8006bd6 <_strtod_l+0x43e>
 8006eec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006ef0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006ef4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006ef8:	35e2      	adds	r5, #226	@ 0xe2
 8006efa:	fa01 f305 	lsl.w	r3, r1, r5
 8006efe:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f00:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006f02:	e7ba      	b.n	8006e7a <_strtod_l+0x6e2>
 8006f04:	2300      	movs	r3, #0
 8006f06:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f08:	2301      	movs	r3, #1
 8006f0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f0c:	e7b5      	b.n	8006e7a <_strtod_l+0x6e2>
 8006f0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f10:	9805      	ldr	r0, [sp, #20]
 8006f12:	462a      	mov	r2, r5
 8006f14:	f7ff f9c8 	bl	80062a8 <__lshift>
 8006f18:	901a      	str	r0, [sp, #104]	@ 0x68
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	d1d9      	bne.n	8006ed2 <_strtod_l+0x73a>
 8006f1e:	e65a      	b.n	8006bd6 <_strtod_l+0x43e>
 8006f20:	2e00      	cmp	r6, #0
 8006f22:	dd07      	ble.n	8006f34 <_strtod_l+0x79c>
 8006f24:	4649      	mov	r1, r9
 8006f26:	9805      	ldr	r0, [sp, #20]
 8006f28:	4632      	mov	r2, r6
 8006f2a:	f7ff f9bd 	bl	80062a8 <__lshift>
 8006f2e:	4681      	mov	r9, r0
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d0d8      	beq.n	8006ee6 <_strtod_l+0x74e>
 8006f34:	2f00      	cmp	r7, #0
 8006f36:	dd08      	ble.n	8006f4a <_strtod_l+0x7b2>
 8006f38:	4641      	mov	r1, r8
 8006f3a:	9805      	ldr	r0, [sp, #20]
 8006f3c:	463a      	mov	r2, r7
 8006f3e:	f7ff f9b3 	bl	80062a8 <__lshift>
 8006f42:	4680      	mov	r8, r0
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f43f ae46 	beq.w	8006bd6 <_strtod_l+0x43e>
 8006f4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f4c:	9805      	ldr	r0, [sp, #20]
 8006f4e:	464a      	mov	r2, r9
 8006f50:	f7ff fa32 	bl	80063b8 <__mdiff>
 8006f54:	4604      	mov	r4, r0
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f43f ae3d 	beq.w	8006bd6 <_strtod_l+0x43e>
 8006f5c:	68c3      	ldr	r3, [r0, #12]
 8006f5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f60:	2300      	movs	r3, #0
 8006f62:	60c3      	str	r3, [r0, #12]
 8006f64:	4641      	mov	r1, r8
 8006f66:	f7ff fa0b 	bl	8006380 <__mcmp>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	da46      	bge.n	8006ffc <_strtod_l+0x864>
 8006f6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f70:	ea53 030a 	orrs.w	r3, r3, sl
 8006f74:	d16c      	bne.n	8007050 <_strtod_l+0x8b8>
 8006f76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d168      	bne.n	8007050 <_strtod_l+0x8b8>
 8006f7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f82:	0d1b      	lsrs	r3, r3, #20
 8006f84:	051b      	lsls	r3, r3, #20
 8006f86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006f8a:	d961      	bls.n	8007050 <_strtod_l+0x8b8>
 8006f8c:	6963      	ldr	r3, [r4, #20]
 8006f8e:	b913      	cbnz	r3, 8006f96 <_strtod_l+0x7fe>
 8006f90:	6923      	ldr	r3, [r4, #16]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	dd5c      	ble.n	8007050 <_strtod_l+0x8b8>
 8006f96:	4621      	mov	r1, r4
 8006f98:	2201      	movs	r2, #1
 8006f9a:	9805      	ldr	r0, [sp, #20]
 8006f9c:	f7ff f984 	bl	80062a8 <__lshift>
 8006fa0:	4641      	mov	r1, r8
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	f7ff f9ec 	bl	8006380 <__mcmp>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	dd51      	ble.n	8007050 <_strtod_l+0x8b8>
 8006fac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fb0:	9a08      	ldr	r2, [sp, #32]
 8006fb2:	0d1b      	lsrs	r3, r3, #20
 8006fb4:	051b      	lsls	r3, r3, #20
 8006fb6:	2a00      	cmp	r2, #0
 8006fb8:	d06b      	beq.n	8007092 <_strtod_l+0x8fa>
 8006fba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006fbe:	d868      	bhi.n	8007092 <_strtod_l+0x8fa>
 8006fc0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006fc4:	f67f ae9d 	bls.w	8006d02 <_strtod_l+0x56a>
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff4 <_strtod_l+0x85c>)
 8006fca:	4650      	mov	r0, sl
 8006fcc:	4659      	mov	r1, fp
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f7f9 fb1a 	bl	8000608 <__aeabi_dmul>
 8006fd4:	4b08      	ldr	r3, [pc, #32]	@ (8006ff8 <_strtod_l+0x860>)
 8006fd6:	400b      	ands	r3, r1
 8006fd8:	4682      	mov	sl, r0
 8006fda:	468b      	mov	fp, r1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f47f ae05 	bne.w	8006bec <_strtod_l+0x454>
 8006fe2:	9a05      	ldr	r2, [sp, #20]
 8006fe4:	2322      	movs	r3, #34	@ 0x22
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	e600      	b.n	8006bec <_strtod_l+0x454>
 8006fea:	bf00      	nop
 8006fec:	08008900 	.word	0x08008900
 8006ff0:	fffffc02 	.word	0xfffffc02
 8006ff4:	39500000 	.word	0x39500000
 8006ff8:	7ff00000 	.word	0x7ff00000
 8006ffc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007000:	d165      	bne.n	80070ce <_strtod_l+0x936>
 8007002:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007008:	b35a      	cbz	r2, 8007062 <_strtod_l+0x8ca>
 800700a:	4a9f      	ldr	r2, [pc, #636]	@ (8007288 <_strtod_l+0xaf0>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d12b      	bne.n	8007068 <_strtod_l+0x8d0>
 8007010:	9b08      	ldr	r3, [sp, #32]
 8007012:	4651      	mov	r1, sl
 8007014:	b303      	cbz	r3, 8007058 <_strtod_l+0x8c0>
 8007016:	4b9d      	ldr	r3, [pc, #628]	@ (800728c <_strtod_l+0xaf4>)
 8007018:	465a      	mov	r2, fp
 800701a:	4013      	ands	r3, r2
 800701c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007020:	f04f 32ff 	mov.w	r2, #4294967295
 8007024:	d81b      	bhi.n	800705e <_strtod_l+0x8c6>
 8007026:	0d1b      	lsrs	r3, r3, #20
 8007028:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800702c:	fa02 f303 	lsl.w	r3, r2, r3
 8007030:	4299      	cmp	r1, r3
 8007032:	d119      	bne.n	8007068 <_strtod_l+0x8d0>
 8007034:	4b96      	ldr	r3, [pc, #600]	@ (8007290 <_strtod_l+0xaf8>)
 8007036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007038:	429a      	cmp	r2, r3
 800703a:	d102      	bne.n	8007042 <_strtod_l+0x8aa>
 800703c:	3101      	adds	r1, #1
 800703e:	f43f adca 	beq.w	8006bd6 <_strtod_l+0x43e>
 8007042:	4b92      	ldr	r3, [pc, #584]	@ (800728c <_strtod_l+0xaf4>)
 8007044:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007046:	401a      	ands	r2, r3
 8007048:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800704c:	f04f 0a00 	mov.w	sl, #0
 8007050:	9b08      	ldr	r3, [sp, #32]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1b8      	bne.n	8006fc8 <_strtod_l+0x830>
 8007056:	e5c9      	b.n	8006bec <_strtod_l+0x454>
 8007058:	f04f 33ff 	mov.w	r3, #4294967295
 800705c:	e7e8      	b.n	8007030 <_strtod_l+0x898>
 800705e:	4613      	mov	r3, r2
 8007060:	e7e6      	b.n	8007030 <_strtod_l+0x898>
 8007062:	ea53 030a 	orrs.w	r3, r3, sl
 8007066:	d0a1      	beq.n	8006fac <_strtod_l+0x814>
 8007068:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800706a:	b1db      	cbz	r3, 80070a4 <_strtod_l+0x90c>
 800706c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800706e:	4213      	tst	r3, r2
 8007070:	d0ee      	beq.n	8007050 <_strtod_l+0x8b8>
 8007072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007074:	9a08      	ldr	r2, [sp, #32]
 8007076:	4650      	mov	r0, sl
 8007078:	4659      	mov	r1, fp
 800707a:	b1bb      	cbz	r3, 80070ac <_strtod_l+0x914>
 800707c:	f7ff fb6e 	bl	800675c <sulp>
 8007080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007084:	ec53 2b10 	vmov	r2, r3, d0
 8007088:	f7f9 f908 	bl	800029c <__adddf3>
 800708c:	4682      	mov	sl, r0
 800708e:	468b      	mov	fp, r1
 8007090:	e7de      	b.n	8007050 <_strtod_l+0x8b8>
 8007092:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007096:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800709a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800709e:	f04f 3aff 	mov.w	sl, #4294967295
 80070a2:	e7d5      	b.n	8007050 <_strtod_l+0x8b8>
 80070a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80070a6:	ea13 0f0a 	tst.w	r3, sl
 80070aa:	e7e1      	b.n	8007070 <_strtod_l+0x8d8>
 80070ac:	f7ff fb56 	bl	800675c <sulp>
 80070b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070b4:	ec53 2b10 	vmov	r2, r3, d0
 80070b8:	f7f9 f8ee 	bl	8000298 <__aeabi_dsub>
 80070bc:	2200      	movs	r2, #0
 80070be:	2300      	movs	r3, #0
 80070c0:	4682      	mov	sl, r0
 80070c2:	468b      	mov	fp, r1
 80070c4:	f7f9 fd08 	bl	8000ad8 <__aeabi_dcmpeq>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d0c1      	beq.n	8007050 <_strtod_l+0x8b8>
 80070cc:	e619      	b.n	8006d02 <_strtod_l+0x56a>
 80070ce:	4641      	mov	r1, r8
 80070d0:	4620      	mov	r0, r4
 80070d2:	f7ff facd 	bl	8006670 <__ratio>
 80070d6:	ec57 6b10 	vmov	r6, r7, d0
 80070da:	2200      	movs	r2, #0
 80070dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80070e0:	4630      	mov	r0, r6
 80070e2:	4639      	mov	r1, r7
 80070e4:	f7f9 fd0c 	bl	8000b00 <__aeabi_dcmple>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d06f      	beq.n	80071cc <_strtod_l+0xa34>
 80070ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d17a      	bne.n	80071e8 <_strtod_l+0xa50>
 80070f2:	f1ba 0f00 	cmp.w	sl, #0
 80070f6:	d158      	bne.n	80071aa <_strtod_l+0xa12>
 80070f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d15a      	bne.n	80071b8 <_strtod_l+0xa20>
 8007102:	4b64      	ldr	r3, [pc, #400]	@ (8007294 <_strtod_l+0xafc>)
 8007104:	2200      	movs	r2, #0
 8007106:	4630      	mov	r0, r6
 8007108:	4639      	mov	r1, r7
 800710a:	f7f9 fcef 	bl	8000aec <__aeabi_dcmplt>
 800710e:	2800      	cmp	r0, #0
 8007110:	d159      	bne.n	80071c6 <_strtod_l+0xa2e>
 8007112:	4630      	mov	r0, r6
 8007114:	4639      	mov	r1, r7
 8007116:	4b60      	ldr	r3, [pc, #384]	@ (8007298 <_strtod_l+0xb00>)
 8007118:	2200      	movs	r2, #0
 800711a:	f7f9 fa75 	bl	8000608 <__aeabi_dmul>
 800711e:	4606      	mov	r6, r0
 8007120:	460f      	mov	r7, r1
 8007122:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007126:	9606      	str	r6, [sp, #24]
 8007128:	9307      	str	r3, [sp, #28]
 800712a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800712e:	4d57      	ldr	r5, [pc, #348]	@ (800728c <_strtod_l+0xaf4>)
 8007130:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007134:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007136:	401d      	ands	r5, r3
 8007138:	4b58      	ldr	r3, [pc, #352]	@ (800729c <_strtod_l+0xb04>)
 800713a:	429d      	cmp	r5, r3
 800713c:	f040 80b2 	bne.w	80072a4 <_strtod_l+0xb0c>
 8007140:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007142:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007146:	ec4b ab10 	vmov	d0, sl, fp
 800714a:	f7ff f9c9 	bl	80064e0 <__ulp>
 800714e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007152:	ec51 0b10 	vmov	r0, r1, d0
 8007156:	f7f9 fa57 	bl	8000608 <__aeabi_dmul>
 800715a:	4652      	mov	r2, sl
 800715c:	465b      	mov	r3, fp
 800715e:	f7f9 f89d 	bl	800029c <__adddf3>
 8007162:	460b      	mov	r3, r1
 8007164:	4949      	ldr	r1, [pc, #292]	@ (800728c <_strtod_l+0xaf4>)
 8007166:	4a4e      	ldr	r2, [pc, #312]	@ (80072a0 <_strtod_l+0xb08>)
 8007168:	4019      	ands	r1, r3
 800716a:	4291      	cmp	r1, r2
 800716c:	4682      	mov	sl, r0
 800716e:	d942      	bls.n	80071f6 <_strtod_l+0xa5e>
 8007170:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007172:	4b47      	ldr	r3, [pc, #284]	@ (8007290 <_strtod_l+0xaf8>)
 8007174:	429a      	cmp	r2, r3
 8007176:	d103      	bne.n	8007180 <_strtod_l+0x9e8>
 8007178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800717a:	3301      	adds	r3, #1
 800717c:	f43f ad2b 	beq.w	8006bd6 <_strtod_l+0x43e>
 8007180:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007290 <_strtod_l+0xaf8>
 8007184:	f04f 3aff 	mov.w	sl, #4294967295
 8007188:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800718a:	9805      	ldr	r0, [sp, #20]
 800718c:	f7fe fe74 	bl	8005e78 <_Bfree>
 8007190:	9805      	ldr	r0, [sp, #20]
 8007192:	4649      	mov	r1, r9
 8007194:	f7fe fe70 	bl	8005e78 <_Bfree>
 8007198:	9805      	ldr	r0, [sp, #20]
 800719a:	4641      	mov	r1, r8
 800719c:	f7fe fe6c 	bl	8005e78 <_Bfree>
 80071a0:	9805      	ldr	r0, [sp, #20]
 80071a2:	4621      	mov	r1, r4
 80071a4:	f7fe fe68 	bl	8005e78 <_Bfree>
 80071a8:	e618      	b.n	8006ddc <_strtod_l+0x644>
 80071aa:	f1ba 0f01 	cmp.w	sl, #1
 80071ae:	d103      	bne.n	80071b8 <_strtod_l+0xa20>
 80071b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f43f ada5 	beq.w	8006d02 <_strtod_l+0x56a>
 80071b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007268 <_strtod_l+0xad0>
 80071bc:	4f35      	ldr	r7, [pc, #212]	@ (8007294 <_strtod_l+0xafc>)
 80071be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071c2:	2600      	movs	r6, #0
 80071c4:	e7b1      	b.n	800712a <_strtod_l+0x992>
 80071c6:	4f34      	ldr	r7, [pc, #208]	@ (8007298 <_strtod_l+0xb00>)
 80071c8:	2600      	movs	r6, #0
 80071ca:	e7aa      	b.n	8007122 <_strtod_l+0x98a>
 80071cc:	4b32      	ldr	r3, [pc, #200]	@ (8007298 <_strtod_l+0xb00>)
 80071ce:	4630      	mov	r0, r6
 80071d0:	4639      	mov	r1, r7
 80071d2:	2200      	movs	r2, #0
 80071d4:	f7f9 fa18 	bl	8000608 <__aeabi_dmul>
 80071d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071da:	4606      	mov	r6, r0
 80071dc:	460f      	mov	r7, r1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d09f      	beq.n	8007122 <_strtod_l+0x98a>
 80071e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80071e6:	e7a0      	b.n	800712a <_strtod_l+0x992>
 80071e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007270 <_strtod_l+0xad8>
 80071ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071f0:	ec57 6b17 	vmov	r6, r7, d7
 80071f4:	e799      	b.n	800712a <_strtod_l+0x992>
 80071f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80071fa:	9b08      	ldr	r3, [sp, #32]
 80071fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1c1      	bne.n	8007188 <_strtod_l+0x9f0>
 8007204:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007208:	0d1b      	lsrs	r3, r3, #20
 800720a:	051b      	lsls	r3, r3, #20
 800720c:	429d      	cmp	r5, r3
 800720e:	d1bb      	bne.n	8007188 <_strtod_l+0x9f0>
 8007210:	4630      	mov	r0, r6
 8007212:	4639      	mov	r1, r7
 8007214:	f7f9 fd58 	bl	8000cc8 <__aeabi_d2lz>
 8007218:	f7f9 f9c8 	bl	80005ac <__aeabi_l2d>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4630      	mov	r0, r6
 8007222:	4639      	mov	r1, r7
 8007224:	f7f9 f838 	bl	8000298 <__aeabi_dsub>
 8007228:	460b      	mov	r3, r1
 800722a:	4602      	mov	r2, r0
 800722c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007230:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007236:	ea46 060a 	orr.w	r6, r6, sl
 800723a:	431e      	orrs	r6, r3
 800723c:	d06f      	beq.n	800731e <_strtod_l+0xb86>
 800723e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007278 <_strtod_l+0xae0>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f7f9 fc52 	bl	8000aec <__aeabi_dcmplt>
 8007248:	2800      	cmp	r0, #0
 800724a:	f47f accf 	bne.w	8006bec <_strtod_l+0x454>
 800724e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007280 <_strtod_l+0xae8>)
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007258:	f7f9 fc66 	bl	8000b28 <__aeabi_dcmpgt>
 800725c:	2800      	cmp	r0, #0
 800725e:	d093      	beq.n	8007188 <_strtod_l+0x9f0>
 8007260:	e4c4      	b.n	8006bec <_strtod_l+0x454>
 8007262:	bf00      	nop
 8007264:	f3af 8000 	nop.w
 8007268:	00000000 	.word	0x00000000
 800726c:	bff00000 	.word	0xbff00000
 8007270:	00000000 	.word	0x00000000
 8007274:	3ff00000 	.word	0x3ff00000
 8007278:	94a03595 	.word	0x94a03595
 800727c:	3fdfffff 	.word	0x3fdfffff
 8007280:	35afe535 	.word	0x35afe535
 8007284:	3fe00000 	.word	0x3fe00000
 8007288:	000fffff 	.word	0x000fffff
 800728c:	7ff00000 	.word	0x7ff00000
 8007290:	7fefffff 	.word	0x7fefffff
 8007294:	3ff00000 	.word	0x3ff00000
 8007298:	3fe00000 	.word	0x3fe00000
 800729c:	7fe00000 	.word	0x7fe00000
 80072a0:	7c9fffff 	.word	0x7c9fffff
 80072a4:	9b08      	ldr	r3, [sp, #32]
 80072a6:	b323      	cbz	r3, 80072f2 <_strtod_l+0xb5a>
 80072a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80072ac:	d821      	bhi.n	80072f2 <_strtod_l+0xb5a>
 80072ae:	a328      	add	r3, pc, #160	@ (adr r3, 8007350 <_strtod_l+0xbb8>)
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	4630      	mov	r0, r6
 80072b6:	4639      	mov	r1, r7
 80072b8:	f7f9 fc22 	bl	8000b00 <__aeabi_dcmple>
 80072bc:	b1a0      	cbz	r0, 80072e8 <_strtod_l+0xb50>
 80072be:	4639      	mov	r1, r7
 80072c0:	4630      	mov	r0, r6
 80072c2:	f7f9 fc79 	bl	8000bb8 <__aeabi_d2uiz>
 80072c6:	2801      	cmp	r0, #1
 80072c8:	bf38      	it	cc
 80072ca:	2001      	movcc	r0, #1
 80072cc:	f7f9 f922 	bl	8000514 <__aeabi_ui2d>
 80072d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072d2:	4606      	mov	r6, r0
 80072d4:	460f      	mov	r7, r1
 80072d6:	b9fb      	cbnz	r3, 8007318 <_strtod_l+0xb80>
 80072d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80072dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80072de:	9315      	str	r3, [sp, #84]	@ 0x54
 80072e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80072e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80072e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80072ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80072ee:	1b5b      	subs	r3, r3, r5
 80072f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80072f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80072f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80072fa:	f7ff f8f1 	bl	80064e0 <__ulp>
 80072fe:	4650      	mov	r0, sl
 8007300:	ec53 2b10 	vmov	r2, r3, d0
 8007304:	4659      	mov	r1, fp
 8007306:	f7f9 f97f 	bl	8000608 <__aeabi_dmul>
 800730a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800730e:	f7f8 ffc5 	bl	800029c <__adddf3>
 8007312:	4682      	mov	sl, r0
 8007314:	468b      	mov	fp, r1
 8007316:	e770      	b.n	80071fa <_strtod_l+0xa62>
 8007318:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800731c:	e7e0      	b.n	80072e0 <_strtod_l+0xb48>
 800731e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007358 <_strtod_l+0xbc0>)
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f7f9 fbe2 	bl	8000aec <__aeabi_dcmplt>
 8007328:	e798      	b.n	800725c <_strtod_l+0xac4>
 800732a:	2300      	movs	r3, #0
 800732c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800732e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	f7ff ba6d 	b.w	8006812 <_strtod_l+0x7a>
 8007338:	2a65      	cmp	r2, #101	@ 0x65
 800733a:	f43f ab66 	beq.w	8006a0a <_strtod_l+0x272>
 800733e:	2a45      	cmp	r2, #69	@ 0x45
 8007340:	f43f ab63 	beq.w	8006a0a <_strtod_l+0x272>
 8007344:	2301      	movs	r3, #1
 8007346:	f7ff bb9e 	b.w	8006a86 <_strtod_l+0x2ee>
 800734a:	bf00      	nop
 800734c:	f3af 8000 	nop.w
 8007350:	ffc00000 	.word	0xffc00000
 8007354:	41dfffff 	.word	0x41dfffff
 8007358:	94a03595 	.word	0x94a03595
 800735c:	3fcfffff 	.word	0x3fcfffff

08007360 <_strtod_r>:
 8007360:	4b01      	ldr	r3, [pc, #4]	@ (8007368 <_strtod_r+0x8>)
 8007362:	f7ff ba19 	b.w	8006798 <_strtod_l>
 8007366:	bf00      	nop
 8007368:	2000006c 	.word	0x2000006c

0800736c <_strtol_l.constprop.0>:
 800736c:	2b24      	cmp	r3, #36	@ 0x24
 800736e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007372:	4686      	mov	lr, r0
 8007374:	4690      	mov	r8, r2
 8007376:	d801      	bhi.n	800737c <_strtol_l.constprop.0+0x10>
 8007378:	2b01      	cmp	r3, #1
 800737a:	d106      	bne.n	800738a <_strtol_l.constprop.0+0x1e>
 800737c:	f7fd fdba 	bl	8004ef4 <__errno>
 8007380:	2316      	movs	r3, #22
 8007382:	6003      	str	r3, [r0, #0]
 8007384:	2000      	movs	r0, #0
 8007386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738a:	4834      	ldr	r0, [pc, #208]	@ (800745c <_strtol_l.constprop.0+0xf0>)
 800738c:	460d      	mov	r5, r1
 800738e:	462a      	mov	r2, r5
 8007390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007394:	5d06      	ldrb	r6, [r0, r4]
 8007396:	f016 0608 	ands.w	r6, r6, #8
 800739a:	d1f8      	bne.n	800738e <_strtol_l.constprop.0+0x22>
 800739c:	2c2d      	cmp	r4, #45	@ 0x2d
 800739e:	d12d      	bne.n	80073fc <_strtol_l.constprop.0+0x90>
 80073a0:	782c      	ldrb	r4, [r5, #0]
 80073a2:	2601      	movs	r6, #1
 80073a4:	1c95      	adds	r5, r2, #2
 80073a6:	f033 0210 	bics.w	r2, r3, #16
 80073aa:	d109      	bne.n	80073c0 <_strtol_l.constprop.0+0x54>
 80073ac:	2c30      	cmp	r4, #48	@ 0x30
 80073ae:	d12a      	bne.n	8007406 <_strtol_l.constprop.0+0x9a>
 80073b0:	782a      	ldrb	r2, [r5, #0]
 80073b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80073b6:	2a58      	cmp	r2, #88	@ 0x58
 80073b8:	d125      	bne.n	8007406 <_strtol_l.constprop.0+0x9a>
 80073ba:	786c      	ldrb	r4, [r5, #1]
 80073bc:	2310      	movs	r3, #16
 80073be:	3502      	adds	r5, #2
 80073c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80073c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80073c8:	2200      	movs	r2, #0
 80073ca:	fbbc f9f3 	udiv	r9, ip, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80073d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80073d8:	2f09      	cmp	r7, #9
 80073da:	d81b      	bhi.n	8007414 <_strtol_l.constprop.0+0xa8>
 80073dc:	463c      	mov	r4, r7
 80073de:	42a3      	cmp	r3, r4
 80073e0:	dd27      	ble.n	8007432 <_strtol_l.constprop.0+0xc6>
 80073e2:	1c57      	adds	r7, r2, #1
 80073e4:	d007      	beq.n	80073f6 <_strtol_l.constprop.0+0x8a>
 80073e6:	4581      	cmp	r9, r0
 80073e8:	d320      	bcc.n	800742c <_strtol_l.constprop.0+0xc0>
 80073ea:	d101      	bne.n	80073f0 <_strtol_l.constprop.0+0x84>
 80073ec:	45a2      	cmp	sl, r4
 80073ee:	db1d      	blt.n	800742c <_strtol_l.constprop.0+0xc0>
 80073f0:	fb00 4003 	mla	r0, r0, r3, r4
 80073f4:	2201      	movs	r2, #1
 80073f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073fa:	e7eb      	b.n	80073d4 <_strtol_l.constprop.0+0x68>
 80073fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80073fe:	bf04      	itt	eq
 8007400:	782c      	ldrbeq	r4, [r5, #0]
 8007402:	1c95      	addeq	r5, r2, #2
 8007404:	e7cf      	b.n	80073a6 <_strtol_l.constprop.0+0x3a>
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1da      	bne.n	80073c0 <_strtol_l.constprop.0+0x54>
 800740a:	2c30      	cmp	r4, #48	@ 0x30
 800740c:	bf0c      	ite	eq
 800740e:	2308      	moveq	r3, #8
 8007410:	230a      	movne	r3, #10
 8007412:	e7d5      	b.n	80073c0 <_strtol_l.constprop.0+0x54>
 8007414:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007418:	2f19      	cmp	r7, #25
 800741a:	d801      	bhi.n	8007420 <_strtol_l.constprop.0+0xb4>
 800741c:	3c37      	subs	r4, #55	@ 0x37
 800741e:	e7de      	b.n	80073de <_strtol_l.constprop.0+0x72>
 8007420:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007424:	2f19      	cmp	r7, #25
 8007426:	d804      	bhi.n	8007432 <_strtol_l.constprop.0+0xc6>
 8007428:	3c57      	subs	r4, #87	@ 0x57
 800742a:	e7d8      	b.n	80073de <_strtol_l.constprop.0+0x72>
 800742c:	f04f 32ff 	mov.w	r2, #4294967295
 8007430:	e7e1      	b.n	80073f6 <_strtol_l.constprop.0+0x8a>
 8007432:	1c53      	adds	r3, r2, #1
 8007434:	d108      	bne.n	8007448 <_strtol_l.constprop.0+0xdc>
 8007436:	2322      	movs	r3, #34	@ 0x22
 8007438:	f8ce 3000 	str.w	r3, [lr]
 800743c:	4660      	mov	r0, ip
 800743e:	f1b8 0f00 	cmp.w	r8, #0
 8007442:	d0a0      	beq.n	8007386 <_strtol_l.constprop.0+0x1a>
 8007444:	1e69      	subs	r1, r5, #1
 8007446:	e006      	b.n	8007456 <_strtol_l.constprop.0+0xea>
 8007448:	b106      	cbz	r6, 800744c <_strtol_l.constprop.0+0xe0>
 800744a:	4240      	negs	r0, r0
 800744c:	f1b8 0f00 	cmp.w	r8, #0
 8007450:	d099      	beq.n	8007386 <_strtol_l.constprop.0+0x1a>
 8007452:	2a00      	cmp	r2, #0
 8007454:	d1f6      	bne.n	8007444 <_strtol_l.constprop.0+0xd8>
 8007456:	f8c8 1000 	str.w	r1, [r8]
 800745a:	e794      	b.n	8007386 <_strtol_l.constprop.0+0x1a>
 800745c:	08008929 	.word	0x08008929

08007460 <_strtol_r>:
 8007460:	f7ff bf84 	b.w	800736c <_strtol_l.constprop.0>

08007464 <__ssputs_r>:
 8007464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	688e      	ldr	r6, [r1, #8]
 800746a:	461f      	mov	r7, r3
 800746c:	42be      	cmp	r6, r7
 800746e:	680b      	ldr	r3, [r1, #0]
 8007470:	4682      	mov	sl, r0
 8007472:	460c      	mov	r4, r1
 8007474:	4690      	mov	r8, r2
 8007476:	d82d      	bhi.n	80074d4 <__ssputs_r+0x70>
 8007478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800747c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007480:	d026      	beq.n	80074d0 <__ssputs_r+0x6c>
 8007482:	6965      	ldr	r5, [r4, #20]
 8007484:	6909      	ldr	r1, [r1, #16]
 8007486:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800748a:	eba3 0901 	sub.w	r9, r3, r1
 800748e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007492:	1c7b      	adds	r3, r7, #1
 8007494:	444b      	add	r3, r9
 8007496:	106d      	asrs	r5, r5, #1
 8007498:	429d      	cmp	r5, r3
 800749a:	bf38      	it	cc
 800749c:	461d      	movcc	r5, r3
 800749e:	0553      	lsls	r3, r2, #21
 80074a0:	d527      	bpl.n	80074f2 <__ssputs_r+0x8e>
 80074a2:	4629      	mov	r1, r5
 80074a4:	f7fe fc1c 	bl	8005ce0 <_malloc_r>
 80074a8:	4606      	mov	r6, r0
 80074aa:	b360      	cbz	r0, 8007506 <__ssputs_r+0xa2>
 80074ac:	6921      	ldr	r1, [r4, #16]
 80074ae:	464a      	mov	r2, r9
 80074b0:	f000 fa18 	bl	80078e4 <memcpy>
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80074ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074be:	81a3      	strh	r3, [r4, #12]
 80074c0:	6126      	str	r6, [r4, #16]
 80074c2:	6165      	str	r5, [r4, #20]
 80074c4:	444e      	add	r6, r9
 80074c6:	eba5 0509 	sub.w	r5, r5, r9
 80074ca:	6026      	str	r6, [r4, #0]
 80074cc:	60a5      	str	r5, [r4, #8]
 80074ce:	463e      	mov	r6, r7
 80074d0:	42be      	cmp	r6, r7
 80074d2:	d900      	bls.n	80074d6 <__ssputs_r+0x72>
 80074d4:	463e      	mov	r6, r7
 80074d6:	6820      	ldr	r0, [r4, #0]
 80074d8:	4632      	mov	r2, r6
 80074da:	4641      	mov	r1, r8
 80074dc:	f000 f9c6 	bl	800786c <memmove>
 80074e0:	68a3      	ldr	r3, [r4, #8]
 80074e2:	1b9b      	subs	r3, r3, r6
 80074e4:	60a3      	str	r3, [r4, #8]
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	4433      	add	r3, r6
 80074ea:	6023      	str	r3, [r4, #0]
 80074ec:	2000      	movs	r0, #0
 80074ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f2:	462a      	mov	r2, r5
 80074f4:	f000 fd89 	bl	800800a <_realloc_r>
 80074f8:	4606      	mov	r6, r0
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d1e0      	bne.n	80074c0 <__ssputs_r+0x5c>
 80074fe:	6921      	ldr	r1, [r4, #16]
 8007500:	4650      	mov	r0, sl
 8007502:	f7fe fb79 	bl	8005bf8 <_free_r>
 8007506:	230c      	movs	r3, #12
 8007508:	f8ca 3000 	str.w	r3, [sl]
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007512:	81a3      	strh	r3, [r4, #12]
 8007514:	f04f 30ff 	mov.w	r0, #4294967295
 8007518:	e7e9      	b.n	80074ee <__ssputs_r+0x8a>
	...

0800751c <_svfiprintf_r>:
 800751c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007520:	4698      	mov	r8, r3
 8007522:	898b      	ldrh	r3, [r1, #12]
 8007524:	061b      	lsls	r3, r3, #24
 8007526:	b09d      	sub	sp, #116	@ 0x74
 8007528:	4607      	mov	r7, r0
 800752a:	460d      	mov	r5, r1
 800752c:	4614      	mov	r4, r2
 800752e:	d510      	bpl.n	8007552 <_svfiprintf_r+0x36>
 8007530:	690b      	ldr	r3, [r1, #16]
 8007532:	b973      	cbnz	r3, 8007552 <_svfiprintf_r+0x36>
 8007534:	2140      	movs	r1, #64	@ 0x40
 8007536:	f7fe fbd3 	bl	8005ce0 <_malloc_r>
 800753a:	6028      	str	r0, [r5, #0]
 800753c:	6128      	str	r0, [r5, #16]
 800753e:	b930      	cbnz	r0, 800754e <_svfiprintf_r+0x32>
 8007540:	230c      	movs	r3, #12
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	f04f 30ff 	mov.w	r0, #4294967295
 8007548:	b01d      	add	sp, #116	@ 0x74
 800754a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754e:	2340      	movs	r3, #64	@ 0x40
 8007550:	616b      	str	r3, [r5, #20]
 8007552:	2300      	movs	r3, #0
 8007554:	9309      	str	r3, [sp, #36]	@ 0x24
 8007556:	2320      	movs	r3, #32
 8007558:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800755c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007560:	2330      	movs	r3, #48	@ 0x30
 8007562:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007700 <_svfiprintf_r+0x1e4>
 8007566:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800756a:	f04f 0901 	mov.w	r9, #1
 800756e:	4623      	mov	r3, r4
 8007570:	469a      	mov	sl, r3
 8007572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007576:	b10a      	cbz	r2, 800757c <_svfiprintf_r+0x60>
 8007578:	2a25      	cmp	r2, #37	@ 0x25
 800757a:	d1f9      	bne.n	8007570 <_svfiprintf_r+0x54>
 800757c:	ebba 0b04 	subs.w	fp, sl, r4
 8007580:	d00b      	beq.n	800759a <_svfiprintf_r+0x7e>
 8007582:	465b      	mov	r3, fp
 8007584:	4622      	mov	r2, r4
 8007586:	4629      	mov	r1, r5
 8007588:	4638      	mov	r0, r7
 800758a:	f7ff ff6b 	bl	8007464 <__ssputs_r>
 800758e:	3001      	adds	r0, #1
 8007590:	f000 80a7 	beq.w	80076e2 <_svfiprintf_r+0x1c6>
 8007594:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007596:	445a      	add	r2, fp
 8007598:	9209      	str	r2, [sp, #36]	@ 0x24
 800759a:	f89a 3000 	ldrb.w	r3, [sl]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 809f 	beq.w	80076e2 <_svfiprintf_r+0x1c6>
 80075a4:	2300      	movs	r3, #0
 80075a6:	f04f 32ff 	mov.w	r2, #4294967295
 80075aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ae:	f10a 0a01 	add.w	sl, sl, #1
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	9307      	str	r3, [sp, #28]
 80075b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80075bc:	4654      	mov	r4, sl
 80075be:	2205      	movs	r2, #5
 80075c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c4:	484e      	ldr	r0, [pc, #312]	@ (8007700 <_svfiprintf_r+0x1e4>)
 80075c6:	f7f8 fe0b 	bl	80001e0 <memchr>
 80075ca:	9a04      	ldr	r2, [sp, #16]
 80075cc:	b9d8      	cbnz	r0, 8007606 <_svfiprintf_r+0xea>
 80075ce:	06d0      	lsls	r0, r2, #27
 80075d0:	bf44      	itt	mi
 80075d2:	2320      	movmi	r3, #32
 80075d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075d8:	0711      	lsls	r1, r2, #28
 80075da:	bf44      	itt	mi
 80075dc:	232b      	movmi	r3, #43	@ 0x2b
 80075de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075e2:	f89a 3000 	ldrb.w	r3, [sl]
 80075e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80075e8:	d015      	beq.n	8007616 <_svfiprintf_r+0xfa>
 80075ea:	9a07      	ldr	r2, [sp, #28]
 80075ec:	4654      	mov	r4, sl
 80075ee:	2000      	movs	r0, #0
 80075f0:	f04f 0c0a 	mov.w	ip, #10
 80075f4:	4621      	mov	r1, r4
 80075f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075fa:	3b30      	subs	r3, #48	@ 0x30
 80075fc:	2b09      	cmp	r3, #9
 80075fe:	d94b      	bls.n	8007698 <_svfiprintf_r+0x17c>
 8007600:	b1b0      	cbz	r0, 8007630 <_svfiprintf_r+0x114>
 8007602:	9207      	str	r2, [sp, #28]
 8007604:	e014      	b.n	8007630 <_svfiprintf_r+0x114>
 8007606:	eba0 0308 	sub.w	r3, r0, r8
 800760a:	fa09 f303 	lsl.w	r3, r9, r3
 800760e:	4313      	orrs	r3, r2
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	46a2      	mov	sl, r4
 8007614:	e7d2      	b.n	80075bc <_svfiprintf_r+0xa0>
 8007616:	9b03      	ldr	r3, [sp, #12]
 8007618:	1d19      	adds	r1, r3, #4
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	9103      	str	r1, [sp, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	bfbb      	ittet	lt
 8007622:	425b      	neglt	r3, r3
 8007624:	f042 0202 	orrlt.w	r2, r2, #2
 8007628:	9307      	strge	r3, [sp, #28]
 800762a:	9307      	strlt	r3, [sp, #28]
 800762c:	bfb8      	it	lt
 800762e:	9204      	strlt	r2, [sp, #16]
 8007630:	7823      	ldrb	r3, [r4, #0]
 8007632:	2b2e      	cmp	r3, #46	@ 0x2e
 8007634:	d10a      	bne.n	800764c <_svfiprintf_r+0x130>
 8007636:	7863      	ldrb	r3, [r4, #1]
 8007638:	2b2a      	cmp	r3, #42	@ 0x2a
 800763a:	d132      	bne.n	80076a2 <_svfiprintf_r+0x186>
 800763c:	9b03      	ldr	r3, [sp, #12]
 800763e:	1d1a      	adds	r2, r3, #4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	9203      	str	r2, [sp, #12]
 8007644:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007648:	3402      	adds	r4, #2
 800764a:	9305      	str	r3, [sp, #20]
 800764c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007710 <_svfiprintf_r+0x1f4>
 8007650:	7821      	ldrb	r1, [r4, #0]
 8007652:	2203      	movs	r2, #3
 8007654:	4650      	mov	r0, sl
 8007656:	f7f8 fdc3 	bl	80001e0 <memchr>
 800765a:	b138      	cbz	r0, 800766c <_svfiprintf_r+0x150>
 800765c:	9b04      	ldr	r3, [sp, #16]
 800765e:	eba0 000a 	sub.w	r0, r0, sl
 8007662:	2240      	movs	r2, #64	@ 0x40
 8007664:	4082      	lsls	r2, r0
 8007666:	4313      	orrs	r3, r2
 8007668:	3401      	adds	r4, #1
 800766a:	9304      	str	r3, [sp, #16]
 800766c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007670:	4824      	ldr	r0, [pc, #144]	@ (8007704 <_svfiprintf_r+0x1e8>)
 8007672:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007676:	2206      	movs	r2, #6
 8007678:	f7f8 fdb2 	bl	80001e0 <memchr>
 800767c:	2800      	cmp	r0, #0
 800767e:	d036      	beq.n	80076ee <_svfiprintf_r+0x1d2>
 8007680:	4b21      	ldr	r3, [pc, #132]	@ (8007708 <_svfiprintf_r+0x1ec>)
 8007682:	bb1b      	cbnz	r3, 80076cc <_svfiprintf_r+0x1b0>
 8007684:	9b03      	ldr	r3, [sp, #12]
 8007686:	3307      	adds	r3, #7
 8007688:	f023 0307 	bic.w	r3, r3, #7
 800768c:	3308      	adds	r3, #8
 800768e:	9303      	str	r3, [sp, #12]
 8007690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007692:	4433      	add	r3, r6
 8007694:	9309      	str	r3, [sp, #36]	@ 0x24
 8007696:	e76a      	b.n	800756e <_svfiprintf_r+0x52>
 8007698:	fb0c 3202 	mla	r2, ip, r2, r3
 800769c:	460c      	mov	r4, r1
 800769e:	2001      	movs	r0, #1
 80076a0:	e7a8      	b.n	80075f4 <_svfiprintf_r+0xd8>
 80076a2:	2300      	movs	r3, #0
 80076a4:	3401      	adds	r4, #1
 80076a6:	9305      	str	r3, [sp, #20]
 80076a8:	4619      	mov	r1, r3
 80076aa:	f04f 0c0a 	mov.w	ip, #10
 80076ae:	4620      	mov	r0, r4
 80076b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b4:	3a30      	subs	r2, #48	@ 0x30
 80076b6:	2a09      	cmp	r2, #9
 80076b8:	d903      	bls.n	80076c2 <_svfiprintf_r+0x1a6>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0c6      	beq.n	800764c <_svfiprintf_r+0x130>
 80076be:	9105      	str	r1, [sp, #20]
 80076c0:	e7c4      	b.n	800764c <_svfiprintf_r+0x130>
 80076c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80076c6:	4604      	mov	r4, r0
 80076c8:	2301      	movs	r3, #1
 80076ca:	e7f0      	b.n	80076ae <_svfiprintf_r+0x192>
 80076cc:	ab03      	add	r3, sp, #12
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	462a      	mov	r2, r5
 80076d2:	4b0e      	ldr	r3, [pc, #56]	@ (800770c <_svfiprintf_r+0x1f0>)
 80076d4:	a904      	add	r1, sp, #16
 80076d6:	4638      	mov	r0, r7
 80076d8:	f7fc fcc8 	bl	800406c <_printf_float>
 80076dc:	1c42      	adds	r2, r0, #1
 80076de:	4606      	mov	r6, r0
 80076e0:	d1d6      	bne.n	8007690 <_svfiprintf_r+0x174>
 80076e2:	89ab      	ldrh	r3, [r5, #12]
 80076e4:	065b      	lsls	r3, r3, #25
 80076e6:	f53f af2d 	bmi.w	8007544 <_svfiprintf_r+0x28>
 80076ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076ec:	e72c      	b.n	8007548 <_svfiprintf_r+0x2c>
 80076ee:	ab03      	add	r3, sp, #12
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	462a      	mov	r2, r5
 80076f4:	4b05      	ldr	r3, [pc, #20]	@ (800770c <_svfiprintf_r+0x1f0>)
 80076f6:	a904      	add	r1, sp, #16
 80076f8:	4638      	mov	r0, r7
 80076fa:	f7fc ff4f 	bl	800459c <_printf_i>
 80076fe:	e7ed      	b.n	80076dc <_svfiprintf_r+0x1c0>
 8007700:	08008a29 	.word	0x08008a29
 8007704:	08008a33 	.word	0x08008a33
 8007708:	0800406d 	.word	0x0800406d
 800770c:	08007465 	.word	0x08007465
 8007710:	08008a2f 	.word	0x08008a2f

08007714 <__sflush_r>:
 8007714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771c:	0716      	lsls	r6, r2, #28
 800771e:	4605      	mov	r5, r0
 8007720:	460c      	mov	r4, r1
 8007722:	d454      	bmi.n	80077ce <__sflush_r+0xba>
 8007724:	684b      	ldr	r3, [r1, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	dc02      	bgt.n	8007730 <__sflush_r+0x1c>
 800772a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	dd48      	ble.n	80077c2 <__sflush_r+0xae>
 8007730:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007732:	2e00      	cmp	r6, #0
 8007734:	d045      	beq.n	80077c2 <__sflush_r+0xae>
 8007736:	2300      	movs	r3, #0
 8007738:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800773c:	682f      	ldr	r7, [r5, #0]
 800773e:	6a21      	ldr	r1, [r4, #32]
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	d030      	beq.n	80077a6 <__sflush_r+0x92>
 8007744:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	0759      	lsls	r1, r3, #29
 800774a:	d505      	bpl.n	8007758 <__sflush_r+0x44>
 800774c:	6863      	ldr	r3, [r4, #4]
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007752:	b10b      	cbz	r3, 8007758 <__sflush_r+0x44>
 8007754:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007756:	1ad2      	subs	r2, r2, r3
 8007758:	2300      	movs	r3, #0
 800775a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800775c:	6a21      	ldr	r1, [r4, #32]
 800775e:	4628      	mov	r0, r5
 8007760:	47b0      	blx	r6
 8007762:	1c43      	adds	r3, r0, #1
 8007764:	89a3      	ldrh	r3, [r4, #12]
 8007766:	d106      	bne.n	8007776 <__sflush_r+0x62>
 8007768:	6829      	ldr	r1, [r5, #0]
 800776a:	291d      	cmp	r1, #29
 800776c:	d82b      	bhi.n	80077c6 <__sflush_r+0xb2>
 800776e:	4a2a      	ldr	r2, [pc, #168]	@ (8007818 <__sflush_r+0x104>)
 8007770:	410a      	asrs	r2, r1
 8007772:	07d6      	lsls	r6, r2, #31
 8007774:	d427      	bmi.n	80077c6 <__sflush_r+0xb2>
 8007776:	2200      	movs	r2, #0
 8007778:	6062      	str	r2, [r4, #4]
 800777a:	04d9      	lsls	r1, r3, #19
 800777c:	6922      	ldr	r2, [r4, #16]
 800777e:	6022      	str	r2, [r4, #0]
 8007780:	d504      	bpl.n	800778c <__sflush_r+0x78>
 8007782:	1c42      	adds	r2, r0, #1
 8007784:	d101      	bne.n	800778a <__sflush_r+0x76>
 8007786:	682b      	ldr	r3, [r5, #0]
 8007788:	b903      	cbnz	r3, 800778c <__sflush_r+0x78>
 800778a:	6560      	str	r0, [r4, #84]	@ 0x54
 800778c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800778e:	602f      	str	r7, [r5, #0]
 8007790:	b1b9      	cbz	r1, 80077c2 <__sflush_r+0xae>
 8007792:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007796:	4299      	cmp	r1, r3
 8007798:	d002      	beq.n	80077a0 <__sflush_r+0x8c>
 800779a:	4628      	mov	r0, r5
 800779c:	f7fe fa2c 	bl	8005bf8 <_free_r>
 80077a0:	2300      	movs	r3, #0
 80077a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80077a4:	e00d      	b.n	80077c2 <__sflush_r+0xae>
 80077a6:	2301      	movs	r3, #1
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b0      	blx	r6
 80077ac:	4602      	mov	r2, r0
 80077ae:	1c50      	adds	r0, r2, #1
 80077b0:	d1c9      	bne.n	8007746 <__sflush_r+0x32>
 80077b2:	682b      	ldr	r3, [r5, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0c6      	beq.n	8007746 <__sflush_r+0x32>
 80077b8:	2b1d      	cmp	r3, #29
 80077ba:	d001      	beq.n	80077c0 <__sflush_r+0xac>
 80077bc:	2b16      	cmp	r3, #22
 80077be:	d11e      	bne.n	80077fe <__sflush_r+0xea>
 80077c0:	602f      	str	r7, [r5, #0]
 80077c2:	2000      	movs	r0, #0
 80077c4:	e022      	b.n	800780c <__sflush_r+0xf8>
 80077c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ca:	b21b      	sxth	r3, r3
 80077cc:	e01b      	b.n	8007806 <__sflush_r+0xf2>
 80077ce:	690f      	ldr	r7, [r1, #16]
 80077d0:	2f00      	cmp	r7, #0
 80077d2:	d0f6      	beq.n	80077c2 <__sflush_r+0xae>
 80077d4:	0793      	lsls	r3, r2, #30
 80077d6:	680e      	ldr	r6, [r1, #0]
 80077d8:	bf08      	it	eq
 80077da:	694b      	ldreq	r3, [r1, #20]
 80077dc:	600f      	str	r7, [r1, #0]
 80077de:	bf18      	it	ne
 80077e0:	2300      	movne	r3, #0
 80077e2:	eba6 0807 	sub.w	r8, r6, r7
 80077e6:	608b      	str	r3, [r1, #8]
 80077e8:	f1b8 0f00 	cmp.w	r8, #0
 80077ec:	dde9      	ble.n	80077c2 <__sflush_r+0xae>
 80077ee:	6a21      	ldr	r1, [r4, #32]
 80077f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80077f2:	4643      	mov	r3, r8
 80077f4:	463a      	mov	r2, r7
 80077f6:	4628      	mov	r0, r5
 80077f8:	47b0      	blx	r6
 80077fa:	2800      	cmp	r0, #0
 80077fc:	dc08      	bgt.n	8007810 <__sflush_r+0xfc>
 80077fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007806:	81a3      	strh	r3, [r4, #12]
 8007808:	f04f 30ff 	mov.w	r0, #4294967295
 800780c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007810:	4407      	add	r7, r0
 8007812:	eba8 0800 	sub.w	r8, r8, r0
 8007816:	e7e7      	b.n	80077e8 <__sflush_r+0xd4>
 8007818:	dfbffffe 	.word	0xdfbffffe

0800781c <_fflush_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	690b      	ldr	r3, [r1, #16]
 8007820:	4605      	mov	r5, r0
 8007822:	460c      	mov	r4, r1
 8007824:	b913      	cbnz	r3, 800782c <_fflush_r+0x10>
 8007826:	2500      	movs	r5, #0
 8007828:	4628      	mov	r0, r5
 800782a:	bd38      	pop	{r3, r4, r5, pc}
 800782c:	b118      	cbz	r0, 8007836 <_fflush_r+0x1a>
 800782e:	6a03      	ldr	r3, [r0, #32]
 8007830:	b90b      	cbnz	r3, 8007836 <_fflush_r+0x1a>
 8007832:	f7fd fa73 	bl	8004d1c <__sinit>
 8007836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0f3      	beq.n	8007826 <_fflush_r+0xa>
 800783e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007840:	07d0      	lsls	r0, r2, #31
 8007842:	d404      	bmi.n	800784e <_fflush_r+0x32>
 8007844:	0599      	lsls	r1, r3, #22
 8007846:	d402      	bmi.n	800784e <_fflush_r+0x32>
 8007848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800784a:	f7fd fb7e 	bl	8004f4a <__retarget_lock_acquire_recursive>
 800784e:	4628      	mov	r0, r5
 8007850:	4621      	mov	r1, r4
 8007852:	f7ff ff5f 	bl	8007714 <__sflush_r>
 8007856:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007858:	07da      	lsls	r2, r3, #31
 800785a:	4605      	mov	r5, r0
 800785c:	d4e4      	bmi.n	8007828 <_fflush_r+0xc>
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	059b      	lsls	r3, r3, #22
 8007862:	d4e1      	bmi.n	8007828 <_fflush_r+0xc>
 8007864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007866:	f7fd fb71 	bl	8004f4c <__retarget_lock_release_recursive>
 800786a:	e7dd      	b.n	8007828 <_fflush_r+0xc>

0800786c <memmove>:
 800786c:	4288      	cmp	r0, r1
 800786e:	b510      	push	{r4, lr}
 8007870:	eb01 0402 	add.w	r4, r1, r2
 8007874:	d902      	bls.n	800787c <memmove+0x10>
 8007876:	4284      	cmp	r4, r0
 8007878:	4623      	mov	r3, r4
 800787a:	d807      	bhi.n	800788c <memmove+0x20>
 800787c:	1e43      	subs	r3, r0, #1
 800787e:	42a1      	cmp	r1, r4
 8007880:	d008      	beq.n	8007894 <memmove+0x28>
 8007882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800788a:	e7f8      	b.n	800787e <memmove+0x12>
 800788c:	4402      	add	r2, r0
 800788e:	4601      	mov	r1, r0
 8007890:	428a      	cmp	r2, r1
 8007892:	d100      	bne.n	8007896 <memmove+0x2a>
 8007894:	bd10      	pop	{r4, pc}
 8007896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800789a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800789e:	e7f7      	b.n	8007890 <memmove+0x24>

080078a0 <strncmp>:
 80078a0:	b510      	push	{r4, lr}
 80078a2:	b16a      	cbz	r2, 80078c0 <strncmp+0x20>
 80078a4:	3901      	subs	r1, #1
 80078a6:	1884      	adds	r4, r0, r2
 80078a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d103      	bne.n	80078bc <strncmp+0x1c>
 80078b4:	42a0      	cmp	r0, r4
 80078b6:	d001      	beq.n	80078bc <strncmp+0x1c>
 80078b8:	2a00      	cmp	r2, #0
 80078ba:	d1f5      	bne.n	80078a8 <strncmp+0x8>
 80078bc:	1ad0      	subs	r0, r2, r3
 80078be:	bd10      	pop	{r4, pc}
 80078c0:	4610      	mov	r0, r2
 80078c2:	e7fc      	b.n	80078be <strncmp+0x1e>

080078c4 <_sbrk_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4d06      	ldr	r5, [pc, #24]	@ (80078e0 <_sbrk_r+0x1c>)
 80078c8:	2300      	movs	r3, #0
 80078ca:	4604      	mov	r4, r0
 80078cc:	4608      	mov	r0, r1
 80078ce:	602b      	str	r3, [r5, #0]
 80078d0:	f7fa fc8c 	bl	80021ec <_sbrk>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_sbrk_r+0x1a>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_sbrk_r+0x1a>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	20000498 	.word	0x20000498

080078e4 <memcpy>:
 80078e4:	440a      	add	r2, r1
 80078e6:	4291      	cmp	r1, r2
 80078e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80078ec:	d100      	bne.n	80078f0 <memcpy+0xc>
 80078ee:	4770      	bx	lr
 80078f0:	b510      	push	{r4, lr}
 80078f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078fa:	4291      	cmp	r1, r2
 80078fc:	d1f9      	bne.n	80078f2 <memcpy+0xe>
 80078fe:	bd10      	pop	{r4, pc}

08007900 <nan>:
 8007900:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007908 <nan+0x8>
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	00000000 	.word	0x00000000
 800790c:	7ff80000 	.word	0x7ff80000

08007910 <__assert_func>:
 8007910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007912:	4614      	mov	r4, r2
 8007914:	461a      	mov	r2, r3
 8007916:	4b09      	ldr	r3, [pc, #36]	@ (800793c <__assert_func+0x2c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4605      	mov	r5, r0
 800791c:	68d8      	ldr	r0, [r3, #12]
 800791e:	b954      	cbnz	r4, 8007936 <__assert_func+0x26>
 8007920:	4b07      	ldr	r3, [pc, #28]	@ (8007940 <__assert_func+0x30>)
 8007922:	461c      	mov	r4, r3
 8007924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007928:	9100      	str	r1, [sp, #0]
 800792a:	462b      	mov	r3, r5
 800792c:	4905      	ldr	r1, [pc, #20]	@ (8007944 <__assert_func+0x34>)
 800792e:	f000 fba7 	bl	8008080 <fiprintf>
 8007932:	f000 fbb7 	bl	80080a4 <abort>
 8007936:	4b04      	ldr	r3, [pc, #16]	@ (8007948 <__assert_func+0x38>)
 8007938:	e7f4      	b.n	8007924 <__assert_func+0x14>
 800793a:	bf00      	nop
 800793c:	2000001c 	.word	0x2000001c
 8007940:	08008a7d 	.word	0x08008a7d
 8007944:	08008a4f 	.word	0x08008a4f
 8007948:	08008a42 	.word	0x08008a42

0800794c <_calloc_r>:
 800794c:	b570      	push	{r4, r5, r6, lr}
 800794e:	fba1 5402 	umull	r5, r4, r1, r2
 8007952:	b93c      	cbnz	r4, 8007964 <_calloc_r+0x18>
 8007954:	4629      	mov	r1, r5
 8007956:	f7fe f9c3 	bl	8005ce0 <_malloc_r>
 800795a:	4606      	mov	r6, r0
 800795c:	b928      	cbnz	r0, 800796a <_calloc_r+0x1e>
 800795e:	2600      	movs	r6, #0
 8007960:	4630      	mov	r0, r6
 8007962:	bd70      	pop	{r4, r5, r6, pc}
 8007964:	220c      	movs	r2, #12
 8007966:	6002      	str	r2, [r0, #0]
 8007968:	e7f9      	b.n	800795e <_calloc_r+0x12>
 800796a:	462a      	mov	r2, r5
 800796c:	4621      	mov	r1, r4
 800796e:	f7fd fa6e 	bl	8004e4e <memset>
 8007972:	e7f5      	b.n	8007960 <_calloc_r+0x14>

08007974 <rshift>:
 8007974:	6903      	ldr	r3, [r0, #16]
 8007976:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800797a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800797e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007982:	f100 0414 	add.w	r4, r0, #20
 8007986:	dd45      	ble.n	8007a14 <rshift+0xa0>
 8007988:	f011 011f 	ands.w	r1, r1, #31
 800798c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007990:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007994:	d10c      	bne.n	80079b0 <rshift+0x3c>
 8007996:	f100 0710 	add.w	r7, r0, #16
 800799a:	4629      	mov	r1, r5
 800799c:	42b1      	cmp	r1, r6
 800799e:	d334      	bcc.n	8007a0a <rshift+0x96>
 80079a0:	1a9b      	subs	r3, r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	1eea      	subs	r2, r5, #3
 80079a6:	4296      	cmp	r6, r2
 80079a8:	bf38      	it	cc
 80079aa:	2300      	movcc	r3, #0
 80079ac:	4423      	add	r3, r4
 80079ae:	e015      	b.n	80079dc <rshift+0x68>
 80079b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80079b4:	f1c1 0820 	rsb	r8, r1, #32
 80079b8:	40cf      	lsrs	r7, r1
 80079ba:	f105 0e04 	add.w	lr, r5, #4
 80079be:	46a1      	mov	r9, r4
 80079c0:	4576      	cmp	r6, lr
 80079c2:	46f4      	mov	ip, lr
 80079c4:	d815      	bhi.n	80079f2 <rshift+0x7e>
 80079c6:	1a9a      	subs	r2, r3, r2
 80079c8:	0092      	lsls	r2, r2, #2
 80079ca:	3a04      	subs	r2, #4
 80079cc:	3501      	adds	r5, #1
 80079ce:	42ae      	cmp	r6, r5
 80079d0:	bf38      	it	cc
 80079d2:	2200      	movcc	r2, #0
 80079d4:	18a3      	adds	r3, r4, r2
 80079d6:	50a7      	str	r7, [r4, r2]
 80079d8:	b107      	cbz	r7, 80079dc <rshift+0x68>
 80079da:	3304      	adds	r3, #4
 80079dc:	1b1a      	subs	r2, r3, r4
 80079de:	42a3      	cmp	r3, r4
 80079e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80079e4:	bf08      	it	eq
 80079e6:	2300      	moveq	r3, #0
 80079e8:	6102      	str	r2, [r0, #16]
 80079ea:	bf08      	it	eq
 80079ec:	6143      	streq	r3, [r0, #20]
 80079ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079f2:	f8dc c000 	ldr.w	ip, [ip]
 80079f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80079fa:	ea4c 0707 	orr.w	r7, ip, r7
 80079fe:	f849 7b04 	str.w	r7, [r9], #4
 8007a02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a06:	40cf      	lsrs	r7, r1
 8007a08:	e7da      	b.n	80079c0 <rshift+0x4c>
 8007a0a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007a0e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007a12:	e7c3      	b.n	800799c <rshift+0x28>
 8007a14:	4623      	mov	r3, r4
 8007a16:	e7e1      	b.n	80079dc <rshift+0x68>

08007a18 <__hexdig_fun>:
 8007a18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007a1c:	2b09      	cmp	r3, #9
 8007a1e:	d802      	bhi.n	8007a26 <__hexdig_fun+0xe>
 8007a20:	3820      	subs	r0, #32
 8007a22:	b2c0      	uxtb	r0, r0
 8007a24:	4770      	bx	lr
 8007a26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007a2a:	2b05      	cmp	r3, #5
 8007a2c:	d801      	bhi.n	8007a32 <__hexdig_fun+0x1a>
 8007a2e:	3847      	subs	r0, #71	@ 0x47
 8007a30:	e7f7      	b.n	8007a22 <__hexdig_fun+0xa>
 8007a32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007a36:	2b05      	cmp	r3, #5
 8007a38:	d801      	bhi.n	8007a3e <__hexdig_fun+0x26>
 8007a3a:	3827      	subs	r0, #39	@ 0x27
 8007a3c:	e7f1      	b.n	8007a22 <__hexdig_fun+0xa>
 8007a3e:	2000      	movs	r0, #0
 8007a40:	4770      	bx	lr
	...

08007a44 <__gethex>:
 8007a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	468a      	mov	sl, r1
 8007a4c:	9302      	str	r3, [sp, #8]
 8007a4e:	680b      	ldr	r3, [r1, #0]
 8007a50:	9001      	str	r0, [sp, #4]
 8007a52:	4690      	mov	r8, r2
 8007a54:	1c9c      	adds	r4, r3, #2
 8007a56:	46a1      	mov	r9, r4
 8007a58:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007a5c:	2830      	cmp	r0, #48	@ 0x30
 8007a5e:	d0fa      	beq.n	8007a56 <__gethex+0x12>
 8007a60:	eba9 0303 	sub.w	r3, r9, r3
 8007a64:	f1a3 0b02 	sub.w	fp, r3, #2
 8007a68:	f7ff ffd6 	bl	8007a18 <__hexdig_fun>
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d168      	bne.n	8007b44 <__gethex+0x100>
 8007a72:	49a0      	ldr	r1, [pc, #640]	@ (8007cf4 <__gethex+0x2b0>)
 8007a74:	2201      	movs	r2, #1
 8007a76:	4648      	mov	r0, r9
 8007a78:	f7ff ff12 	bl	80078a0 <strncmp>
 8007a7c:	4607      	mov	r7, r0
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d167      	bne.n	8007b52 <__gethex+0x10e>
 8007a82:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007a86:	4626      	mov	r6, r4
 8007a88:	f7ff ffc6 	bl	8007a18 <__hexdig_fun>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d062      	beq.n	8007b56 <__gethex+0x112>
 8007a90:	4623      	mov	r3, r4
 8007a92:	7818      	ldrb	r0, [r3, #0]
 8007a94:	2830      	cmp	r0, #48	@ 0x30
 8007a96:	4699      	mov	r9, r3
 8007a98:	f103 0301 	add.w	r3, r3, #1
 8007a9c:	d0f9      	beq.n	8007a92 <__gethex+0x4e>
 8007a9e:	f7ff ffbb 	bl	8007a18 <__hexdig_fun>
 8007aa2:	fab0 f580 	clz	r5, r0
 8007aa6:	096d      	lsrs	r5, r5, #5
 8007aa8:	f04f 0b01 	mov.w	fp, #1
 8007aac:	464a      	mov	r2, r9
 8007aae:	4616      	mov	r6, r2
 8007ab0:	3201      	adds	r2, #1
 8007ab2:	7830      	ldrb	r0, [r6, #0]
 8007ab4:	f7ff ffb0 	bl	8007a18 <__hexdig_fun>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d1f8      	bne.n	8007aae <__gethex+0x6a>
 8007abc:	498d      	ldr	r1, [pc, #564]	@ (8007cf4 <__gethex+0x2b0>)
 8007abe:	2201      	movs	r2, #1
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f7ff feed 	bl	80078a0 <strncmp>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d13f      	bne.n	8007b4a <__gethex+0x106>
 8007aca:	b944      	cbnz	r4, 8007ade <__gethex+0x9a>
 8007acc:	1c74      	adds	r4, r6, #1
 8007ace:	4622      	mov	r2, r4
 8007ad0:	4616      	mov	r6, r2
 8007ad2:	3201      	adds	r2, #1
 8007ad4:	7830      	ldrb	r0, [r6, #0]
 8007ad6:	f7ff ff9f 	bl	8007a18 <__hexdig_fun>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d1f8      	bne.n	8007ad0 <__gethex+0x8c>
 8007ade:	1ba4      	subs	r4, r4, r6
 8007ae0:	00a7      	lsls	r7, r4, #2
 8007ae2:	7833      	ldrb	r3, [r6, #0]
 8007ae4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007ae8:	2b50      	cmp	r3, #80	@ 0x50
 8007aea:	d13e      	bne.n	8007b6a <__gethex+0x126>
 8007aec:	7873      	ldrb	r3, [r6, #1]
 8007aee:	2b2b      	cmp	r3, #43	@ 0x2b
 8007af0:	d033      	beq.n	8007b5a <__gethex+0x116>
 8007af2:	2b2d      	cmp	r3, #45	@ 0x2d
 8007af4:	d034      	beq.n	8007b60 <__gethex+0x11c>
 8007af6:	1c71      	adds	r1, r6, #1
 8007af8:	2400      	movs	r4, #0
 8007afa:	7808      	ldrb	r0, [r1, #0]
 8007afc:	f7ff ff8c 	bl	8007a18 <__hexdig_fun>
 8007b00:	1e43      	subs	r3, r0, #1
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b18      	cmp	r3, #24
 8007b06:	d830      	bhi.n	8007b6a <__gethex+0x126>
 8007b08:	f1a0 0210 	sub.w	r2, r0, #16
 8007b0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b10:	f7ff ff82 	bl	8007a18 <__hexdig_fun>
 8007b14:	f100 3cff 	add.w	ip, r0, #4294967295
 8007b18:	fa5f fc8c 	uxtb.w	ip, ip
 8007b1c:	f1bc 0f18 	cmp.w	ip, #24
 8007b20:	f04f 030a 	mov.w	r3, #10
 8007b24:	d91e      	bls.n	8007b64 <__gethex+0x120>
 8007b26:	b104      	cbz	r4, 8007b2a <__gethex+0xe6>
 8007b28:	4252      	negs	r2, r2
 8007b2a:	4417      	add	r7, r2
 8007b2c:	f8ca 1000 	str.w	r1, [sl]
 8007b30:	b1ed      	cbz	r5, 8007b6e <__gethex+0x12a>
 8007b32:	f1bb 0f00 	cmp.w	fp, #0
 8007b36:	bf0c      	ite	eq
 8007b38:	2506      	moveq	r5, #6
 8007b3a:	2500      	movne	r5, #0
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	b005      	add	sp, #20
 8007b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b44:	2500      	movs	r5, #0
 8007b46:	462c      	mov	r4, r5
 8007b48:	e7b0      	b.n	8007aac <__gethex+0x68>
 8007b4a:	2c00      	cmp	r4, #0
 8007b4c:	d1c7      	bne.n	8007ade <__gethex+0x9a>
 8007b4e:	4627      	mov	r7, r4
 8007b50:	e7c7      	b.n	8007ae2 <__gethex+0x9e>
 8007b52:	464e      	mov	r6, r9
 8007b54:	462f      	mov	r7, r5
 8007b56:	2501      	movs	r5, #1
 8007b58:	e7c3      	b.n	8007ae2 <__gethex+0x9e>
 8007b5a:	2400      	movs	r4, #0
 8007b5c:	1cb1      	adds	r1, r6, #2
 8007b5e:	e7cc      	b.n	8007afa <__gethex+0xb6>
 8007b60:	2401      	movs	r4, #1
 8007b62:	e7fb      	b.n	8007b5c <__gethex+0x118>
 8007b64:	fb03 0002 	mla	r0, r3, r2, r0
 8007b68:	e7ce      	b.n	8007b08 <__gethex+0xc4>
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	e7de      	b.n	8007b2c <__gethex+0xe8>
 8007b6e:	eba6 0309 	sub.w	r3, r6, r9
 8007b72:	3b01      	subs	r3, #1
 8007b74:	4629      	mov	r1, r5
 8007b76:	2b07      	cmp	r3, #7
 8007b78:	dc0a      	bgt.n	8007b90 <__gethex+0x14c>
 8007b7a:	9801      	ldr	r0, [sp, #4]
 8007b7c:	f7fe f93c 	bl	8005df8 <_Balloc>
 8007b80:	4604      	mov	r4, r0
 8007b82:	b940      	cbnz	r0, 8007b96 <__gethex+0x152>
 8007b84:	4b5c      	ldr	r3, [pc, #368]	@ (8007cf8 <__gethex+0x2b4>)
 8007b86:	4602      	mov	r2, r0
 8007b88:	21e4      	movs	r1, #228	@ 0xe4
 8007b8a:	485c      	ldr	r0, [pc, #368]	@ (8007cfc <__gethex+0x2b8>)
 8007b8c:	f7ff fec0 	bl	8007910 <__assert_func>
 8007b90:	3101      	adds	r1, #1
 8007b92:	105b      	asrs	r3, r3, #1
 8007b94:	e7ef      	b.n	8007b76 <__gethex+0x132>
 8007b96:	f100 0a14 	add.w	sl, r0, #20
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	4655      	mov	r5, sl
 8007b9e:	469b      	mov	fp, r3
 8007ba0:	45b1      	cmp	r9, r6
 8007ba2:	d337      	bcc.n	8007c14 <__gethex+0x1d0>
 8007ba4:	f845 bb04 	str.w	fp, [r5], #4
 8007ba8:	eba5 050a 	sub.w	r5, r5, sl
 8007bac:	10ad      	asrs	r5, r5, #2
 8007bae:	6125      	str	r5, [r4, #16]
 8007bb0:	4658      	mov	r0, fp
 8007bb2:	f7fe fa13 	bl	8005fdc <__hi0bits>
 8007bb6:	016d      	lsls	r5, r5, #5
 8007bb8:	f8d8 6000 	ldr.w	r6, [r8]
 8007bbc:	1a2d      	subs	r5, r5, r0
 8007bbe:	42b5      	cmp	r5, r6
 8007bc0:	dd54      	ble.n	8007c6c <__gethex+0x228>
 8007bc2:	1bad      	subs	r5, r5, r6
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f7fe fda7 	bl	800671a <__any_on>
 8007bcc:	4681      	mov	r9, r0
 8007bce:	b178      	cbz	r0, 8007bf0 <__gethex+0x1ac>
 8007bd0:	1e6b      	subs	r3, r5, #1
 8007bd2:	1159      	asrs	r1, r3, #5
 8007bd4:	f003 021f 	and.w	r2, r3, #31
 8007bd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007bdc:	f04f 0901 	mov.w	r9, #1
 8007be0:	fa09 f202 	lsl.w	r2, r9, r2
 8007be4:	420a      	tst	r2, r1
 8007be6:	d003      	beq.n	8007bf0 <__gethex+0x1ac>
 8007be8:	454b      	cmp	r3, r9
 8007bea:	dc36      	bgt.n	8007c5a <__gethex+0x216>
 8007bec:	f04f 0902 	mov.w	r9, #2
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f7ff febe 	bl	8007974 <rshift>
 8007bf8:	442f      	add	r7, r5
 8007bfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bfe:	42bb      	cmp	r3, r7
 8007c00:	da42      	bge.n	8007c88 <__gethex+0x244>
 8007c02:	9801      	ldr	r0, [sp, #4]
 8007c04:	4621      	mov	r1, r4
 8007c06:	f7fe f937 	bl	8005e78 <_Bfree>
 8007c0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	25a3      	movs	r5, #163	@ 0xa3
 8007c12:	e793      	b.n	8007b3c <__gethex+0xf8>
 8007c14:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007c18:	2a2e      	cmp	r2, #46	@ 0x2e
 8007c1a:	d012      	beq.n	8007c42 <__gethex+0x1fe>
 8007c1c:	2b20      	cmp	r3, #32
 8007c1e:	d104      	bne.n	8007c2a <__gethex+0x1e6>
 8007c20:	f845 bb04 	str.w	fp, [r5], #4
 8007c24:	f04f 0b00 	mov.w	fp, #0
 8007c28:	465b      	mov	r3, fp
 8007c2a:	7830      	ldrb	r0, [r6, #0]
 8007c2c:	9303      	str	r3, [sp, #12]
 8007c2e:	f7ff fef3 	bl	8007a18 <__hexdig_fun>
 8007c32:	9b03      	ldr	r3, [sp, #12]
 8007c34:	f000 000f 	and.w	r0, r0, #15
 8007c38:	4098      	lsls	r0, r3
 8007c3a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007c3e:	3304      	adds	r3, #4
 8007c40:	e7ae      	b.n	8007ba0 <__gethex+0x15c>
 8007c42:	45b1      	cmp	r9, r6
 8007c44:	d8ea      	bhi.n	8007c1c <__gethex+0x1d8>
 8007c46:	492b      	ldr	r1, [pc, #172]	@ (8007cf4 <__gethex+0x2b0>)
 8007c48:	9303      	str	r3, [sp, #12]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f7ff fe27 	bl	80078a0 <strncmp>
 8007c52:	9b03      	ldr	r3, [sp, #12]
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d1e1      	bne.n	8007c1c <__gethex+0x1d8>
 8007c58:	e7a2      	b.n	8007ba0 <__gethex+0x15c>
 8007c5a:	1ea9      	subs	r1, r5, #2
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f7fe fd5c 	bl	800671a <__any_on>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d0c2      	beq.n	8007bec <__gethex+0x1a8>
 8007c66:	f04f 0903 	mov.w	r9, #3
 8007c6a:	e7c1      	b.n	8007bf0 <__gethex+0x1ac>
 8007c6c:	da09      	bge.n	8007c82 <__gethex+0x23e>
 8007c6e:	1b75      	subs	r5, r6, r5
 8007c70:	4621      	mov	r1, r4
 8007c72:	9801      	ldr	r0, [sp, #4]
 8007c74:	462a      	mov	r2, r5
 8007c76:	f7fe fb17 	bl	80062a8 <__lshift>
 8007c7a:	1b7f      	subs	r7, r7, r5
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	f100 0a14 	add.w	sl, r0, #20
 8007c82:	f04f 0900 	mov.w	r9, #0
 8007c86:	e7b8      	b.n	8007bfa <__gethex+0x1b6>
 8007c88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007c8c:	42bd      	cmp	r5, r7
 8007c8e:	dd6f      	ble.n	8007d70 <__gethex+0x32c>
 8007c90:	1bed      	subs	r5, r5, r7
 8007c92:	42ae      	cmp	r6, r5
 8007c94:	dc34      	bgt.n	8007d00 <__gethex+0x2bc>
 8007c96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d022      	beq.n	8007ce4 <__gethex+0x2a0>
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d024      	beq.n	8007cec <__gethex+0x2a8>
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d115      	bne.n	8007cd2 <__gethex+0x28e>
 8007ca6:	42ae      	cmp	r6, r5
 8007ca8:	d113      	bne.n	8007cd2 <__gethex+0x28e>
 8007caa:	2e01      	cmp	r6, #1
 8007cac:	d10b      	bne.n	8007cc6 <__gethex+0x282>
 8007cae:	9a02      	ldr	r2, [sp, #8]
 8007cb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	6123      	str	r3, [r4, #16]
 8007cba:	f8ca 3000 	str.w	r3, [sl]
 8007cbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cc0:	2562      	movs	r5, #98	@ 0x62
 8007cc2:	601c      	str	r4, [r3, #0]
 8007cc4:	e73a      	b.n	8007b3c <__gethex+0xf8>
 8007cc6:	1e71      	subs	r1, r6, #1
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f7fe fd26 	bl	800671a <__any_on>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d1ed      	bne.n	8007cae <__gethex+0x26a>
 8007cd2:	9801      	ldr	r0, [sp, #4]
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	f7fe f8cf 	bl	8005e78 <_Bfree>
 8007cda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cdc:	2300      	movs	r3, #0
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	2550      	movs	r5, #80	@ 0x50
 8007ce2:	e72b      	b.n	8007b3c <__gethex+0xf8>
 8007ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1f3      	bne.n	8007cd2 <__gethex+0x28e>
 8007cea:	e7e0      	b.n	8007cae <__gethex+0x26a>
 8007cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1dd      	bne.n	8007cae <__gethex+0x26a>
 8007cf2:	e7ee      	b.n	8007cd2 <__gethex+0x28e>
 8007cf4:	080088d0 	.word	0x080088d0
 8007cf8:	08008765 	.word	0x08008765
 8007cfc:	08008a7e 	.word	0x08008a7e
 8007d00:	1e6f      	subs	r7, r5, #1
 8007d02:	f1b9 0f00 	cmp.w	r9, #0
 8007d06:	d130      	bne.n	8007d6a <__gethex+0x326>
 8007d08:	b127      	cbz	r7, 8007d14 <__gethex+0x2d0>
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f7fe fd04 	bl	800671a <__any_on>
 8007d12:	4681      	mov	r9, r0
 8007d14:	117a      	asrs	r2, r7, #5
 8007d16:	2301      	movs	r3, #1
 8007d18:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007d1c:	f007 071f 	and.w	r7, r7, #31
 8007d20:	40bb      	lsls	r3, r7
 8007d22:	4213      	tst	r3, r2
 8007d24:	4629      	mov	r1, r5
 8007d26:	4620      	mov	r0, r4
 8007d28:	bf18      	it	ne
 8007d2a:	f049 0902 	orrne.w	r9, r9, #2
 8007d2e:	f7ff fe21 	bl	8007974 <rshift>
 8007d32:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007d36:	1b76      	subs	r6, r6, r5
 8007d38:	2502      	movs	r5, #2
 8007d3a:	f1b9 0f00 	cmp.w	r9, #0
 8007d3e:	d047      	beq.n	8007dd0 <__gethex+0x38c>
 8007d40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d015      	beq.n	8007d74 <__gethex+0x330>
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d017      	beq.n	8007d7c <__gethex+0x338>
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d109      	bne.n	8007d64 <__gethex+0x320>
 8007d50:	f019 0f02 	tst.w	r9, #2
 8007d54:	d006      	beq.n	8007d64 <__gethex+0x320>
 8007d56:	f8da 3000 	ldr.w	r3, [sl]
 8007d5a:	ea49 0903 	orr.w	r9, r9, r3
 8007d5e:	f019 0f01 	tst.w	r9, #1
 8007d62:	d10e      	bne.n	8007d82 <__gethex+0x33e>
 8007d64:	f045 0510 	orr.w	r5, r5, #16
 8007d68:	e032      	b.n	8007dd0 <__gethex+0x38c>
 8007d6a:	f04f 0901 	mov.w	r9, #1
 8007d6e:	e7d1      	b.n	8007d14 <__gethex+0x2d0>
 8007d70:	2501      	movs	r5, #1
 8007d72:	e7e2      	b.n	8007d3a <__gethex+0x2f6>
 8007d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d76:	f1c3 0301 	rsb	r3, r3, #1
 8007d7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0f0      	beq.n	8007d64 <__gethex+0x320>
 8007d82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007d86:	f104 0314 	add.w	r3, r4, #20
 8007d8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007d8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007d92:	f04f 0c00 	mov.w	ip, #0
 8007d96:	4618      	mov	r0, r3
 8007d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007da0:	d01b      	beq.n	8007dda <__gethex+0x396>
 8007da2:	3201      	adds	r2, #1
 8007da4:	6002      	str	r2, [r0, #0]
 8007da6:	2d02      	cmp	r5, #2
 8007da8:	f104 0314 	add.w	r3, r4, #20
 8007dac:	d13c      	bne.n	8007e28 <__gethex+0x3e4>
 8007dae:	f8d8 2000 	ldr.w	r2, [r8]
 8007db2:	3a01      	subs	r2, #1
 8007db4:	42b2      	cmp	r2, r6
 8007db6:	d109      	bne.n	8007dcc <__gethex+0x388>
 8007db8:	1171      	asrs	r1, r6, #5
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007dc0:	f006 061f 	and.w	r6, r6, #31
 8007dc4:	fa02 f606 	lsl.w	r6, r2, r6
 8007dc8:	421e      	tst	r6, r3
 8007dca:	d13a      	bne.n	8007e42 <__gethex+0x3fe>
 8007dcc:	f045 0520 	orr.w	r5, r5, #32
 8007dd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dd2:	601c      	str	r4, [r3, #0]
 8007dd4:	9b02      	ldr	r3, [sp, #8]
 8007dd6:	601f      	str	r7, [r3, #0]
 8007dd8:	e6b0      	b.n	8007b3c <__gethex+0xf8>
 8007dda:	4299      	cmp	r1, r3
 8007ddc:	f843 cc04 	str.w	ip, [r3, #-4]
 8007de0:	d8d9      	bhi.n	8007d96 <__gethex+0x352>
 8007de2:	68a3      	ldr	r3, [r4, #8]
 8007de4:	459b      	cmp	fp, r3
 8007de6:	db17      	blt.n	8007e18 <__gethex+0x3d4>
 8007de8:	6861      	ldr	r1, [r4, #4]
 8007dea:	9801      	ldr	r0, [sp, #4]
 8007dec:	3101      	adds	r1, #1
 8007dee:	f7fe f803 	bl	8005df8 <_Balloc>
 8007df2:	4681      	mov	r9, r0
 8007df4:	b918      	cbnz	r0, 8007dfe <__gethex+0x3ba>
 8007df6:	4b1a      	ldr	r3, [pc, #104]	@ (8007e60 <__gethex+0x41c>)
 8007df8:	4602      	mov	r2, r0
 8007dfa:	2184      	movs	r1, #132	@ 0x84
 8007dfc:	e6c5      	b.n	8007b8a <__gethex+0x146>
 8007dfe:	6922      	ldr	r2, [r4, #16]
 8007e00:	3202      	adds	r2, #2
 8007e02:	f104 010c 	add.w	r1, r4, #12
 8007e06:	0092      	lsls	r2, r2, #2
 8007e08:	300c      	adds	r0, #12
 8007e0a:	f7ff fd6b 	bl	80078e4 <memcpy>
 8007e0e:	4621      	mov	r1, r4
 8007e10:	9801      	ldr	r0, [sp, #4]
 8007e12:	f7fe f831 	bl	8005e78 <_Bfree>
 8007e16:	464c      	mov	r4, r9
 8007e18:	6923      	ldr	r3, [r4, #16]
 8007e1a:	1c5a      	adds	r2, r3, #1
 8007e1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e20:	6122      	str	r2, [r4, #16]
 8007e22:	2201      	movs	r2, #1
 8007e24:	615a      	str	r2, [r3, #20]
 8007e26:	e7be      	b.n	8007da6 <__gethex+0x362>
 8007e28:	6922      	ldr	r2, [r4, #16]
 8007e2a:	455a      	cmp	r2, fp
 8007e2c:	dd0b      	ble.n	8007e46 <__gethex+0x402>
 8007e2e:	2101      	movs	r1, #1
 8007e30:	4620      	mov	r0, r4
 8007e32:	f7ff fd9f 	bl	8007974 <rshift>
 8007e36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e3a:	3701      	adds	r7, #1
 8007e3c:	42bb      	cmp	r3, r7
 8007e3e:	f6ff aee0 	blt.w	8007c02 <__gethex+0x1be>
 8007e42:	2501      	movs	r5, #1
 8007e44:	e7c2      	b.n	8007dcc <__gethex+0x388>
 8007e46:	f016 061f 	ands.w	r6, r6, #31
 8007e4a:	d0fa      	beq.n	8007e42 <__gethex+0x3fe>
 8007e4c:	4453      	add	r3, sl
 8007e4e:	f1c6 0620 	rsb	r6, r6, #32
 8007e52:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007e56:	f7fe f8c1 	bl	8005fdc <__hi0bits>
 8007e5a:	42b0      	cmp	r0, r6
 8007e5c:	dbe7      	blt.n	8007e2e <__gethex+0x3ea>
 8007e5e:	e7f0      	b.n	8007e42 <__gethex+0x3fe>
 8007e60:	08008765 	.word	0x08008765

08007e64 <L_shift>:
 8007e64:	f1c2 0208 	rsb	r2, r2, #8
 8007e68:	0092      	lsls	r2, r2, #2
 8007e6a:	b570      	push	{r4, r5, r6, lr}
 8007e6c:	f1c2 0620 	rsb	r6, r2, #32
 8007e70:	6843      	ldr	r3, [r0, #4]
 8007e72:	6804      	ldr	r4, [r0, #0]
 8007e74:	fa03 f506 	lsl.w	r5, r3, r6
 8007e78:	432c      	orrs	r4, r5
 8007e7a:	40d3      	lsrs	r3, r2
 8007e7c:	6004      	str	r4, [r0, #0]
 8007e7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007e82:	4288      	cmp	r0, r1
 8007e84:	d3f4      	bcc.n	8007e70 <L_shift+0xc>
 8007e86:	bd70      	pop	{r4, r5, r6, pc}

08007e88 <__match>:
 8007e88:	b530      	push	{r4, r5, lr}
 8007e8a:	6803      	ldr	r3, [r0, #0]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e92:	b914      	cbnz	r4, 8007e9a <__match+0x12>
 8007e94:	6003      	str	r3, [r0, #0]
 8007e96:	2001      	movs	r0, #1
 8007e98:	bd30      	pop	{r4, r5, pc}
 8007e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e9e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007ea2:	2d19      	cmp	r5, #25
 8007ea4:	bf98      	it	ls
 8007ea6:	3220      	addls	r2, #32
 8007ea8:	42a2      	cmp	r2, r4
 8007eaa:	d0f0      	beq.n	8007e8e <__match+0x6>
 8007eac:	2000      	movs	r0, #0
 8007eae:	e7f3      	b.n	8007e98 <__match+0x10>

08007eb0 <__hexnan>:
 8007eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb4:	680b      	ldr	r3, [r1, #0]
 8007eb6:	6801      	ldr	r1, [r0, #0]
 8007eb8:	115e      	asrs	r6, r3, #5
 8007eba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ebe:	f013 031f 	ands.w	r3, r3, #31
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	bf18      	it	ne
 8007ec6:	3604      	addne	r6, #4
 8007ec8:	2500      	movs	r5, #0
 8007eca:	1f37      	subs	r7, r6, #4
 8007ecc:	4682      	mov	sl, r0
 8007ece:	4690      	mov	r8, r2
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	f846 5c04 	str.w	r5, [r6, #-4]
 8007ed6:	46b9      	mov	r9, r7
 8007ed8:	463c      	mov	r4, r7
 8007eda:	9502      	str	r5, [sp, #8]
 8007edc:	46ab      	mov	fp, r5
 8007ede:	784a      	ldrb	r2, [r1, #1]
 8007ee0:	1c4b      	adds	r3, r1, #1
 8007ee2:	9303      	str	r3, [sp, #12]
 8007ee4:	b342      	cbz	r2, 8007f38 <__hexnan+0x88>
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	9105      	str	r1, [sp, #20]
 8007eea:	9204      	str	r2, [sp, #16]
 8007eec:	f7ff fd94 	bl	8007a18 <__hexdig_fun>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d151      	bne.n	8007f98 <__hexnan+0xe8>
 8007ef4:	9a04      	ldr	r2, [sp, #16]
 8007ef6:	9905      	ldr	r1, [sp, #20]
 8007ef8:	2a20      	cmp	r2, #32
 8007efa:	d818      	bhi.n	8007f2e <__hexnan+0x7e>
 8007efc:	9b02      	ldr	r3, [sp, #8]
 8007efe:	459b      	cmp	fp, r3
 8007f00:	dd13      	ble.n	8007f2a <__hexnan+0x7a>
 8007f02:	454c      	cmp	r4, r9
 8007f04:	d206      	bcs.n	8007f14 <__hexnan+0x64>
 8007f06:	2d07      	cmp	r5, #7
 8007f08:	dc04      	bgt.n	8007f14 <__hexnan+0x64>
 8007f0a:	462a      	mov	r2, r5
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f7ff ffa8 	bl	8007e64 <L_shift>
 8007f14:	4544      	cmp	r4, r8
 8007f16:	d952      	bls.n	8007fbe <__hexnan+0x10e>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f1a4 0904 	sub.w	r9, r4, #4
 8007f1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f22:	f8cd b008 	str.w	fp, [sp, #8]
 8007f26:	464c      	mov	r4, r9
 8007f28:	461d      	mov	r5, r3
 8007f2a:	9903      	ldr	r1, [sp, #12]
 8007f2c:	e7d7      	b.n	8007ede <__hexnan+0x2e>
 8007f2e:	2a29      	cmp	r2, #41	@ 0x29
 8007f30:	d157      	bne.n	8007fe2 <__hexnan+0x132>
 8007f32:	3102      	adds	r1, #2
 8007f34:	f8ca 1000 	str.w	r1, [sl]
 8007f38:	f1bb 0f00 	cmp.w	fp, #0
 8007f3c:	d051      	beq.n	8007fe2 <__hexnan+0x132>
 8007f3e:	454c      	cmp	r4, r9
 8007f40:	d206      	bcs.n	8007f50 <__hexnan+0xa0>
 8007f42:	2d07      	cmp	r5, #7
 8007f44:	dc04      	bgt.n	8007f50 <__hexnan+0xa0>
 8007f46:	462a      	mov	r2, r5
 8007f48:	4649      	mov	r1, r9
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f7ff ff8a 	bl	8007e64 <L_shift>
 8007f50:	4544      	cmp	r4, r8
 8007f52:	d936      	bls.n	8007fc2 <__hexnan+0x112>
 8007f54:	f1a8 0204 	sub.w	r2, r8, #4
 8007f58:	4623      	mov	r3, r4
 8007f5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007f5e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007f62:	429f      	cmp	r7, r3
 8007f64:	d2f9      	bcs.n	8007f5a <__hexnan+0xaa>
 8007f66:	1b3b      	subs	r3, r7, r4
 8007f68:	f023 0303 	bic.w	r3, r3, #3
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	3401      	adds	r4, #1
 8007f70:	3e03      	subs	r6, #3
 8007f72:	42b4      	cmp	r4, r6
 8007f74:	bf88      	it	hi
 8007f76:	2304      	movhi	r3, #4
 8007f78:	4443      	add	r3, r8
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f843 2b04 	str.w	r2, [r3], #4
 8007f80:	429f      	cmp	r7, r3
 8007f82:	d2fb      	bcs.n	8007f7c <__hexnan+0xcc>
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	b91b      	cbnz	r3, 8007f90 <__hexnan+0xe0>
 8007f88:	4547      	cmp	r7, r8
 8007f8a:	d128      	bne.n	8007fde <__hexnan+0x12e>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	2005      	movs	r0, #5
 8007f92:	b007      	add	sp, #28
 8007f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f98:	3501      	adds	r5, #1
 8007f9a:	2d08      	cmp	r5, #8
 8007f9c:	f10b 0b01 	add.w	fp, fp, #1
 8007fa0:	dd06      	ble.n	8007fb0 <__hexnan+0x100>
 8007fa2:	4544      	cmp	r4, r8
 8007fa4:	d9c1      	bls.n	8007f2a <__hexnan+0x7a>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fac:	2501      	movs	r5, #1
 8007fae:	3c04      	subs	r4, #4
 8007fb0:	6822      	ldr	r2, [r4, #0]
 8007fb2:	f000 000f 	and.w	r0, r0, #15
 8007fb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007fba:	6020      	str	r0, [r4, #0]
 8007fbc:	e7b5      	b.n	8007f2a <__hexnan+0x7a>
 8007fbe:	2508      	movs	r5, #8
 8007fc0:	e7b3      	b.n	8007f2a <__hexnan+0x7a>
 8007fc2:	9b01      	ldr	r3, [sp, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d0dd      	beq.n	8007f84 <__hexnan+0xd4>
 8007fc8:	f1c3 0320 	rsb	r3, r3, #32
 8007fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd0:	40da      	lsrs	r2, r3
 8007fd2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	f846 3c04 	str.w	r3, [r6, #-4]
 8007fdc:	e7d2      	b.n	8007f84 <__hexnan+0xd4>
 8007fde:	3f04      	subs	r7, #4
 8007fe0:	e7d0      	b.n	8007f84 <__hexnan+0xd4>
 8007fe2:	2004      	movs	r0, #4
 8007fe4:	e7d5      	b.n	8007f92 <__hexnan+0xe2>

08007fe6 <__ascii_mbtowc>:
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	b901      	cbnz	r1, 8007fec <__ascii_mbtowc+0x6>
 8007fea:	a901      	add	r1, sp, #4
 8007fec:	b142      	cbz	r2, 8008000 <__ascii_mbtowc+0x1a>
 8007fee:	b14b      	cbz	r3, 8008004 <__ascii_mbtowc+0x1e>
 8007ff0:	7813      	ldrb	r3, [r2, #0]
 8007ff2:	600b      	str	r3, [r1, #0]
 8007ff4:	7812      	ldrb	r2, [r2, #0]
 8007ff6:	1e10      	subs	r0, r2, #0
 8007ff8:	bf18      	it	ne
 8007ffa:	2001      	movne	r0, #1
 8007ffc:	b002      	add	sp, #8
 8007ffe:	4770      	bx	lr
 8008000:	4610      	mov	r0, r2
 8008002:	e7fb      	b.n	8007ffc <__ascii_mbtowc+0x16>
 8008004:	f06f 0001 	mvn.w	r0, #1
 8008008:	e7f8      	b.n	8007ffc <__ascii_mbtowc+0x16>

0800800a <_realloc_r>:
 800800a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800e:	4680      	mov	r8, r0
 8008010:	4615      	mov	r5, r2
 8008012:	460c      	mov	r4, r1
 8008014:	b921      	cbnz	r1, 8008020 <_realloc_r+0x16>
 8008016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800801a:	4611      	mov	r1, r2
 800801c:	f7fd be60 	b.w	8005ce0 <_malloc_r>
 8008020:	b92a      	cbnz	r2, 800802e <_realloc_r+0x24>
 8008022:	f7fd fde9 	bl	8005bf8 <_free_r>
 8008026:	2400      	movs	r4, #0
 8008028:	4620      	mov	r0, r4
 800802a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800802e:	f000 f840 	bl	80080b2 <_malloc_usable_size_r>
 8008032:	4285      	cmp	r5, r0
 8008034:	4606      	mov	r6, r0
 8008036:	d802      	bhi.n	800803e <_realloc_r+0x34>
 8008038:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800803c:	d8f4      	bhi.n	8008028 <_realloc_r+0x1e>
 800803e:	4629      	mov	r1, r5
 8008040:	4640      	mov	r0, r8
 8008042:	f7fd fe4d 	bl	8005ce0 <_malloc_r>
 8008046:	4607      	mov	r7, r0
 8008048:	2800      	cmp	r0, #0
 800804a:	d0ec      	beq.n	8008026 <_realloc_r+0x1c>
 800804c:	42b5      	cmp	r5, r6
 800804e:	462a      	mov	r2, r5
 8008050:	4621      	mov	r1, r4
 8008052:	bf28      	it	cs
 8008054:	4632      	movcs	r2, r6
 8008056:	f7ff fc45 	bl	80078e4 <memcpy>
 800805a:	4621      	mov	r1, r4
 800805c:	4640      	mov	r0, r8
 800805e:	f7fd fdcb 	bl	8005bf8 <_free_r>
 8008062:	463c      	mov	r4, r7
 8008064:	e7e0      	b.n	8008028 <_realloc_r+0x1e>

08008066 <__ascii_wctomb>:
 8008066:	4603      	mov	r3, r0
 8008068:	4608      	mov	r0, r1
 800806a:	b141      	cbz	r1, 800807e <__ascii_wctomb+0x18>
 800806c:	2aff      	cmp	r2, #255	@ 0xff
 800806e:	d904      	bls.n	800807a <__ascii_wctomb+0x14>
 8008070:	228a      	movs	r2, #138	@ 0x8a
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	f04f 30ff 	mov.w	r0, #4294967295
 8008078:	4770      	bx	lr
 800807a:	700a      	strb	r2, [r1, #0]
 800807c:	2001      	movs	r0, #1
 800807e:	4770      	bx	lr

08008080 <fiprintf>:
 8008080:	b40e      	push	{r1, r2, r3}
 8008082:	b503      	push	{r0, r1, lr}
 8008084:	4601      	mov	r1, r0
 8008086:	ab03      	add	r3, sp, #12
 8008088:	4805      	ldr	r0, [pc, #20]	@ (80080a0 <fiprintf+0x20>)
 800808a:	f853 2b04 	ldr.w	r2, [r3], #4
 800808e:	6800      	ldr	r0, [r0, #0]
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	f000 f83f 	bl	8008114 <_vfiprintf_r>
 8008096:	b002      	add	sp, #8
 8008098:	f85d eb04 	ldr.w	lr, [sp], #4
 800809c:	b003      	add	sp, #12
 800809e:	4770      	bx	lr
 80080a0:	2000001c 	.word	0x2000001c

080080a4 <abort>:
 80080a4:	b508      	push	{r3, lr}
 80080a6:	2006      	movs	r0, #6
 80080a8:	f000 fa08 	bl	80084bc <raise>
 80080ac:	2001      	movs	r0, #1
 80080ae:	f7fa f825 	bl	80020fc <_exit>

080080b2 <_malloc_usable_size_r>:
 80080b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080b6:	1f18      	subs	r0, r3, #4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bfbc      	itt	lt
 80080bc:	580b      	ldrlt	r3, [r1, r0]
 80080be:	18c0      	addlt	r0, r0, r3
 80080c0:	4770      	bx	lr

080080c2 <__sfputc_r>:
 80080c2:	6893      	ldr	r3, [r2, #8]
 80080c4:	3b01      	subs	r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	b410      	push	{r4}
 80080ca:	6093      	str	r3, [r2, #8]
 80080cc:	da08      	bge.n	80080e0 <__sfputc_r+0x1e>
 80080ce:	6994      	ldr	r4, [r2, #24]
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	db01      	blt.n	80080d8 <__sfputc_r+0x16>
 80080d4:	290a      	cmp	r1, #10
 80080d6:	d103      	bne.n	80080e0 <__sfputc_r+0x1e>
 80080d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080dc:	f000 b932 	b.w	8008344 <__swbuf_r>
 80080e0:	6813      	ldr	r3, [r2, #0]
 80080e2:	1c58      	adds	r0, r3, #1
 80080e4:	6010      	str	r0, [r2, #0]
 80080e6:	7019      	strb	r1, [r3, #0]
 80080e8:	4608      	mov	r0, r1
 80080ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <__sfputs_r>:
 80080f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f2:	4606      	mov	r6, r0
 80080f4:	460f      	mov	r7, r1
 80080f6:	4614      	mov	r4, r2
 80080f8:	18d5      	adds	r5, r2, r3
 80080fa:	42ac      	cmp	r4, r5
 80080fc:	d101      	bne.n	8008102 <__sfputs_r+0x12>
 80080fe:	2000      	movs	r0, #0
 8008100:	e007      	b.n	8008112 <__sfputs_r+0x22>
 8008102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008106:	463a      	mov	r2, r7
 8008108:	4630      	mov	r0, r6
 800810a:	f7ff ffda 	bl	80080c2 <__sfputc_r>
 800810e:	1c43      	adds	r3, r0, #1
 8008110:	d1f3      	bne.n	80080fa <__sfputs_r+0xa>
 8008112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008114 <_vfiprintf_r>:
 8008114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008118:	460d      	mov	r5, r1
 800811a:	b09d      	sub	sp, #116	@ 0x74
 800811c:	4614      	mov	r4, r2
 800811e:	4698      	mov	r8, r3
 8008120:	4606      	mov	r6, r0
 8008122:	b118      	cbz	r0, 800812c <_vfiprintf_r+0x18>
 8008124:	6a03      	ldr	r3, [r0, #32]
 8008126:	b90b      	cbnz	r3, 800812c <_vfiprintf_r+0x18>
 8008128:	f7fc fdf8 	bl	8004d1c <__sinit>
 800812c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800812e:	07d9      	lsls	r1, r3, #31
 8008130:	d405      	bmi.n	800813e <_vfiprintf_r+0x2a>
 8008132:	89ab      	ldrh	r3, [r5, #12]
 8008134:	059a      	lsls	r2, r3, #22
 8008136:	d402      	bmi.n	800813e <_vfiprintf_r+0x2a>
 8008138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800813a:	f7fc ff06 	bl	8004f4a <__retarget_lock_acquire_recursive>
 800813e:	89ab      	ldrh	r3, [r5, #12]
 8008140:	071b      	lsls	r3, r3, #28
 8008142:	d501      	bpl.n	8008148 <_vfiprintf_r+0x34>
 8008144:	692b      	ldr	r3, [r5, #16]
 8008146:	b99b      	cbnz	r3, 8008170 <_vfiprintf_r+0x5c>
 8008148:	4629      	mov	r1, r5
 800814a:	4630      	mov	r0, r6
 800814c:	f000 f938 	bl	80083c0 <__swsetup_r>
 8008150:	b170      	cbz	r0, 8008170 <_vfiprintf_r+0x5c>
 8008152:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008154:	07dc      	lsls	r4, r3, #31
 8008156:	d504      	bpl.n	8008162 <_vfiprintf_r+0x4e>
 8008158:	f04f 30ff 	mov.w	r0, #4294967295
 800815c:	b01d      	add	sp, #116	@ 0x74
 800815e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008162:	89ab      	ldrh	r3, [r5, #12]
 8008164:	0598      	lsls	r0, r3, #22
 8008166:	d4f7      	bmi.n	8008158 <_vfiprintf_r+0x44>
 8008168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800816a:	f7fc feef 	bl	8004f4c <__retarget_lock_release_recursive>
 800816e:	e7f3      	b.n	8008158 <_vfiprintf_r+0x44>
 8008170:	2300      	movs	r3, #0
 8008172:	9309      	str	r3, [sp, #36]	@ 0x24
 8008174:	2320      	movs	r3, #32
 8008176:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800817a:	f8cd 800c 	str.w	r8, [sp, #12]
 800817e:	2330      	movs	r3, #48	@ 0x30
 8008180:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008330 <_vfiprintf_r+0x21c>
 8008184:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008188:	f04f 0901 	mov.w	r9, #1
 800818c:	4623      	mov	r3, r4
 800818e:	469a      	mov	sl, r3
 8008190:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008194:	b10a      	cbz	r2, 800819a <_vfiprintf_r+0x86>
 8008196:	2a25      	cmp	r2, #37	@ 0x25
 8008198:	d1f9      	bne.n	800818e <_vfiprintf_r+0x7a>
 800819a:	ebba 0b04 	subs.w	fp, sl, r4
 800819e:	d00b      	beq.n	80081b8 <_vfiprintf_r+0xa4>
 80081a0:	465b      	mov	r3, fp
 80081a2:	4622      	mov	r2, r4
 80081a4:	4629      	mov	r1, r5
 80081a6:	4630      	mov	r0, r6
 80081a8:	f7ff ffa2 	bl	80080f0 <__sfputs_r>
 80081ac:	3001      	adds	r0, #1
 80081ae:	f000 80a7 	beq.w	8008300 <_vfiprintf_r+0x1ec>
 80081b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081b4:	445a      	add	r2, fp
 80081b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80081b8:	f89a 3000 	ldrb.w	r3, [sl]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 809f 	beq.w	8008300 <_vfiprintf_r+0x1ec>
 80081c2:	2300      	movs	r3, #0
 80081c4:	f04f 32ff 	mov.w	r2, #4294967295
 80081c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081cc:	f10a 0a01 	add.w	sl, sl, #1
 80081d0:	9304      	str	r3, [sp, #16]
 80081d2:	9307      	str	r3, [sp, #28]
 80081d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80081da:	4654      	mov	r4, sl
 80081dc:	2205      	movs	r2, #5
 80081de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e2:	4853      	ldr	r0, [pc, #332]	@ (8008330 <_vfiprintf_r+0x21c>)
 80081e4:	f7f7 fffc 	bl	80001e0 <memchr>
 80081e8:	9a04      	ldr	r2, [sp, #16]
 80081ea:	b9d8      	cbnz	r0, 8008224 <_vfiprintf_r+0x110>
 80081ec:	06d1      	lsls	r1, r2, #27
 80081ee:	bf44      	itt	mi
 80081f0:	2320      	movmi	r3, #32
 80081f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081f6:	0713      	lsls	r3, r2, #28
 80081f8:	bf44      	itt	mi
 80081fa:	232b      	movmi	r3, #43	@ 0x2b
 80081fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008200:	f89a 3000 	ldrb.w	r3, [sl]
 8008204:	2b2a      	cmp	r3, #42	@ 0x2a
 8008206:	d015      	beq.n	8008234 <_vfiprintf_r+0x120>
 8008208:	9a07      	ldr	r2, [sp, #28]
 800820a:	4654      	mov	r4, sl
 800820c:	2000      	movs	r0, #0
 800820e:	f04f 0c0a 	mov.w	ip, #10
 8008212:	4621      	mov	r1, r4
 8008214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008218:	3b30      	subs	r3, #48	@ 0x30
 800821a:	2b09      	cmp	r3, #9
 800821c:	d94b      	bls.n	80082b6 <_vfiprintf_r+0x1a2>
 800821e:	b1b0      	cbz	r0, 800824e <_vfiprintf_r+0x13a>
 8008220:	9207      	str	r2, [sp, #28]
 8008222:	e014      	b.n	800824e <_vfiprintf_r+0x13a>
 8008224:	eba0 0308 	sub.w	r3, r0, r8
 8008228:	fa09 f303 	lsl.w	r3, r9, r3
 800822c:	4313      	orrs	r3, r2
 800822e:	9304      	str	r3, [sp, #16]
 8008230:	46a2      	mov	sl, r4
 8008232:	e7d2      	b.n	80081da <_vfiprintf_r+0xc6>
 8008234:	9b03      	ldr	r3, [sp, #12]
 8008236:	1d19      	adds	r1, r3, #4
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	9103      	str	r1, [sp, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	bfbb      	ittet	lt
 8008240:	425b      	neglt	r3, r3
 8008242:	f042 0202 	orrlt.w	r2, r2, #2
 8008246:	9307      	strge	r3, [sp, #28]
 8008248:	9307      	strlt	r3, [sp, #28]
 800824a:	bfb8      	it	lt
 800824c:	9204      	strlt	r2, [sp, #16]
 800824e:	7823      	ldrb	r3, [r4, #0]
 8008250:	2b2e      	cmp	r3, #46	@ 0x2e
 8008252:	d10a      	bne.n	800826a <_vfiprintf_r+0x156>
 8008254:	7863      	ldrb	r3, [r4, #1]
 8008256:	2b2a      	cmp	r3, #42	@ 0x2a
 8008258:	d132      	bne.n	80082c0 <_vfiprintf_r+0x1ac>
 800825a:	9b03      	ldr	r3, [sp, #12]
 800825c:	1d1a      	adds	r2, r3, #4
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	9203      	str	r2, [sp, #12]
 8008262:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008266:	3402      	adds	r4, #2
 8008268:	9305      	str	r3, [sp, #20]
 800826a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008340 <_vfiprintf_r+0x22c>
 800826e:	7821      	ldrb	r1, [r4, #0]
 8008270:	2203      	movs	r2, #3
 8008272:	4650      	mov	r0, sl
 8008274:	f7f7 ffb4 	bl	80001e0 <memchr>
 8008278:	b138      	cbz	r0, 800828a <_vfiprintf_r+0x176>
 800827a:	9b04      	ldr	r3, [sp, #16]
 800827c:	eba0 000a 	sub.w	r0, r0, sl
 8008280:	2240      	movs	r2, #64	@ 0x40
 8008282:	4082      	lsls	r2, r0
 8008284:	4313      	orrs	r3, r2
 8008286:	3401      	adds	r4, #1
 8008288:	9304      	str	r3, [sp, #16]
 800828a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828e:	4829      	ldr	r0, [pc, #164]	@ (8008334 <_vfiprintf_r+0x220>)
 8008290:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008294:	2206      	movs	r2, #6
 8008296:	f7f7 ffa3 	bl	80001e0 <memchr>
 800829a:	2800      	cmp	r0, #0
 800829c:	d03f      	beq.n	800831e <_vfiprintf_r+0x20a>
 800829e:	4b26      	ldr	r3, [pc, #152]	@ (8008338 <_vfiprintf_r+0x224>)
 80082a0:	bb1b      	cbnz	r3, 80082ea <_vfiprintf_r+0x1d6>
 80082a2:	9b03      	ldr	r3, [sp, #12]
 80082a4:	3307      	adds	r3, #7
 80082a6:	f023 0307 	bic.w	r3, r3, #7
 80082aa:	3308      	adds	r3, #8
 80082ac:	9303      	str	r3, [sp, #12]
 80082ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082b0:	443b      	add	r3, r7
 80082b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80082b4:	e76a      	b.n	800818c <_vfiprintf_r+0x78>
 80082b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80082ba:	460c      	mov	r4, r1
 80082bc:	2001      	movs	r0, #1
 80082be:	e7a8      	b.n	8008212 <_vfiprintf_r+0xfe>
 80082c0:	2300      	movs	r3, #0
 80082c2:	3401      	adds	r4, #1
 80082c4:	9305      	str	r3, [sp, #20]
 80082c6:	4619      	mov	r1, r3
 80082c8:	f04f 0c0a 	mov.w	ip, #10
 80082cc:	4620      	mov	r0, r4
 80082ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082d2:	3a30      	subs	r2, #48	@ 0x30
 80082d4:	2a09      	cmp	r2, #9
 80082d6:	d903      	bls.n	80082e0 <_vfiprintf_r+0x1cc>
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0c6      	beq.n	800826a <_vfiprintf_r+0x156>
 80082dc:	9105      	str	r1, [sp, #20]
 80082de:	e7c4      	b.n	800826a <_vfiprintf_r+0x156>
 80082e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80082e4:	4604      	mov	r4, r0
 80082e6:	2301      	movs	r3, #1
 80082e8:	e7f0      	b.n	80082cc <_vfiprintf_r+0x1b8>
 80082ea:	ab03      	add	r3, sp, #12
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	462a      	mov	r2, r5
 80082f0:	4b12      	ldr	r3, [pc, #72]	@ (800833c <_vfiprintf_r+0x228>)
 80082f2:	a904      	add	r1, sp, #16
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7fb feb9 	bl	800406c <_printf_float>
 80082fa:	4607      	mov	r7, r0
 80082fc:	1c78      	adds	r0, r7, #1
 80082fe:	d1d6      	bne.n	80082ae <_vfiprintf_r+0x19a>
 8008300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008302:	07d9      	lsls	r1, r3, #31
 8008304:	d405      	bmi.n	8008312 <_vfiprintf_r+0x1fe>
 8008306:	89ab      	ldrh	r3, [r5, #12]
 8008308:	059a      	lsls	r2, r3, #22
 800830a:	d402      	bmi.n	8008312 <_vfiprintf_r+0x1fe>
 800830c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800830e:	f7fc fe1d 	bl	8004f4c <__retarget_lock_release_recursive>
 8008312:	89ab      	ldrh	r3, [r5, #12]
 8008314:	065b      	lsls	r3, r3, #25
 8008316:	f53f af1f 	bmi.w	8008158 <_vfiprintf_r+0x44>
 800831a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800831c:	e71e      	b.n	800815c <_vfiprintf_r+0x48>
 800831e:	ab03      	add	r3, sp, #12
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	462a      	mov	r2, r5
 8008324:	4b05      	ldr	r3, [pc, #20]	@ (800833c <_vfiprintf_r+0x228>)
 8008326:	a904      	add	r1, sp, #16
 8008328:	4630      	mov	r0, r6
 800832a:	f7fc f937 	bl	800459c <_printf_i>
 800832e:	e7e4      	b.n	80082fa <_vfiprintf_r+0x1e6>
 8008330:	08008a29 	.word	0x08008a29
 8008334:	08008a33 	.word	0x08008a33
 8008338:	0800406d 	.word	0x0800406d
 800833c:	080080f1 	.word	0x080080f1
 8008340:	08008a2f 	.word	0x08008a2f

08008344 <__swbuf_r>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	460e      	mov	r6, r1
 8008348:	4614      	mov	r4, r2
 800834a:	4605      	mov	r5, r0
 800834c:	b118      	cbz	r0, 8008356 <__swbuf_r+0x12>
 800834e:	6a03      	ldr	r3, [r0, #32]
 8008350:	b90b      	cbnz	r3, 8008356 <__swbuf_r+0x12>
 8008352:	f7fc fce3 	bl	8004d1c <__sinit>
 8008356:	69a3      	ldr	r3, [r4, #24]
 8008358:	60a3      	str	r3, [r4, #8]
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	071a      	lsls	r2, r3, #28
 800835e:	d501      	bpl.n	8008364 <__swbuf_r+0x20>
 8008360:	6923      	ldr	r3, [r4, #16]
 8008362:	b943      	cbnz	r3, 8008376 <__swbuf_r+0x32>
 8008364:	4621      	mov	r1, r4
 8008366:	4628      	mov	r0, r5
 8008368:	f000 f82a 	bl	80083c0 <__swsetup_r>
 800836c:	b118      	cbz	r0, 8008376 <__swbuf_r+0x32>
 800836e:	f04f 37ff 	mov.w	r7, #4294967295
 8008372:	4638      	mov	r0, r7
 8008374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	6922      	ldr	r2, [r4, #16]
 800837a:	1a98      	subs	r0, r3, r2
 800837c:	6963      	ldr	r3, [r4, #20]
 800837e:	b2f6      	uxtb	r6, r6
 8008380:	4283      	cmp	r3, r0
 8008382:	4637      	mov	r7, r6
 8008384:	dc05      	bgt.n	8008392 <__swbuf_r+0x4e>
 8008386:	4621      	mov	r1, r4
 8008388:	4628      	mov	r0, r5
 800838a:	f7ff fa47 	bl	800781c <_fflush_r>
 800838e:	2800      	cmp	r0, #0
 8008390:	d1ed      	bne.n	800836e <__swbuf_r+0x2a>
 8008392:	68a3      	ldr	r3, [r4, #8]
 8008394:	3b01      	subs	r3, #1
 8008396:	60a3      	str	r3, [r4, #8]
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	1c5a      	adds	r2, r3, #1
 800839c:	6022      	str	r2, [r4, #0]
 800839e:	701e      	strb	r6, [r3, #0]
 80083a0:	6962      	ldr	r2, [r4, #20]
 80083a2:	1c43      	adds	r3, r0, #1
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d004      	beq.n	80083b2 <__swbuf_r+0x6e>
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	07db      	lsls	r3, r3, #31
 80083ac:	d5e1      	bpl.n	8008372 <__swbuf_r+0x2e>
 80083ae:	2e0a      	cmp	r6, #10
 80083b0:	d1df      	bne.n	8008372 <__swbuf_r+0x2e>
 80083b2:	4621      	mov	r1, r4
 80083b4:	4628      	mov	r0, r5
 80083b6:	f7ff fa31 	bl	800781c <_fflush_r>
 80083ba:	2800      	cmp	r0, #0
 80083bc:	d0d9      	beq.n	8008372 <__swbuf_r+0x2e>
 80083be:	e7d6      	b.n	800836e <__swbuf_r+0x2a>

080083c0 <__swsetup_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	4b29      	ldr	r3, [pc, #164]	@ (8008468 <__swsetup_r+0xa8>)
 80083c4:	4605      	mov	r5, r0
 80083c6:	6818      	ldr	r0, [r3, #0]
 80083c8:	460c      	mov	r4, r1
 80083ca:	b118      	cbz	r0, 80083d4 <__swsetup_r+0x14>
 80083cc:	6a03      	ldr	r3, [r0, #32]
 80083ce:	b90b      	cbnz	r3, 80083d4 <__swsetup_r+0x14>
 80083d0:	f7fc fca4 	bl	8004d1c <__sinit>
 80083d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d8:	0719      	lsls	r1, r3, #28
 80083da:	d422      	bmi.n	8008422 <__swsetup_r+0x62>
 80083dc:	06da      	lsls	r2, r3, #27
 80083de:	d407      	bmi.n	80083f0 <__swsetup_r+0x30>
 80083e0:	2209      	movs	r2, #9
 80083e2:	602a      	str	r2, [r5, #0]
 80083e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083e8:	81a3      	strh	r3, [r4, #12]
 80083ea:	f04f 30ff 	mov.w	r0, #4294967295
 80083ee:	e033      	b.n	8008458 <__swsetup_r+0x98>
 80083f0:	0758      	lsls	r0, r3, #29
 80083f2:	d512      	bpl.n	800841a <__swsetup_r+0x5a>
 80083f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083f6:	b141      	cbz	r1, 800840a <__swsetup_r+0x4a>
 80083f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083fc:	4299      	cmp	r1, r3
 80083fe:	d002      	beq.n	8008406 <__swsetup_r+0x46>
 8008400:	4628      	mov	r0, r5
 8008402:	f7fd fbf9 	bl	8005bf8 <_free_r>
 8008406:	2300      	movs	r3, #0
 8008408:	6363      	str	r3, [r4, #52]	@ 0x34
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008410:	81a3      	strh	r3, [r4, #12]
 8008412:	2300      	movs	r3, #0
 8008414:	6063      	str	r3, [r4, #4]
 8008416:	6923      	ldr	r3, [r4, #16]
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	f043 0308 	orr.w	r3, r3, #8
 8008420:	81a3      	strh	r3, [r4, #12]
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	b94b      	cbnz	r3, 800843a <__swsetup_r+0x7a>
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800842c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008430:	d003      	beq.n	800843a <__swsetup_r+0x7a>
 8008432:	4621      	mov	r1, r4
 8008434:	4628      	mov	r0, r5
 8008436:	f000 f883 	bl	8008540 <__smakebuf_r>
 800843a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800843e:	f013 0201 	ands.w	r2, r3, #1
 8008442:	d00a      	beq.n	800845a <__swsetup_r+0x9a>
 8008444:	2200      	movs	r2, #0
 8008446:	60a2      	str	r2, [r4, #8]
 8008448:	6962      	ldr	r2, [r4, #20]
 800844a:	4252      	negs	r2, r2
 800844c:	61a2      	str	r2, [r4, #24]
 800844e:	6922      	ldr	r2, [r4, #16]
 8008450:	b942      	cbnz	r2, 8008464 <__swsetup_r+0xa4>
 8008452:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008456:	d1c5      	bne.n	80083e4 <__swsetup_r+0x24>
 8008458:	bd38      	pop	{r3, r4, r5, pc}
 800845a:	0799      	lsls	r1, r3, #30
 800845c:	bf58      	it	pl
 800845e:	6962      	ldrpl	r2, [r4, #20]
 8008460:	60a2      	str	r2, [r4, #8]
 8008462:	e7f4      	b.n	800844e <__swsetup_r+0x8e>
 8008464:	2000      	movs	r0, #0
 8008466:	e7f7      	b.n	8008458 <__swsetup_r+0x98>
 8008468:	2000001c 	.word	0x2000001c

0800846c <_raise_r>:
 800846c:	291f      	cmp	r1, #31
 800846e:	b538      	push	{r3, r4, r5, lr}
 8008470:	4605      	mov	r5, r0
 8008472:	460c      	mov	r4, r1
 8008474:	d904      	bls.n	8008480 <_raise_r+0x14>
 8008476:	2316      	movs	r3, #22
 8008478:	6003      	str	r3, [r0, #0]
 800847a:	f04f 30ff 	mov.w	r0, #4294967295
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008482:	b112      	cbz	r2, 800848a <_raise_r+0x1e>
 8008484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008488:	b94b      	cbnz	r3, 800849e <_raise_r+0x32>
 800848a:	4628      	mov	r0, r5
 800848c:	f000 f830 	bl	80084f0 <_getpid_r>
 8008490:	4622      	mov	r2, r4
 8008492:	4601      	mov	r1, r0
 8008494:	4628      	mov	r0, r5
 8008496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800849a:	f000 b817 	b.w	80084cc <_kill_r>
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d00a      	beq.n	80084b8 <_raise_r+0x4c>
 80084a2:	1c59      	adds	r1, r3, #1
 80084a4:	d103      	bne.n	80084ae <_raise_r+0x42>
 80084a6:	2316      	movs	r3, #22
 80084a8:	6003      	str	r3, [r0, #0]
 80084aa:	2001      	movs	r0, #1
 80084ac:	e7e7      	b.n	800847e <_raise_r+0x12>
 80084ae:	2100      	movs	r1, #0
 80084b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80084b4:	4620      	mov	r0, r4
 80084b6:	4798      	blx	r3
 80084b8:	2000      	movs	r0, #0
 80084ba:	e7e0      	b.n	800847e <_raise_r+0x12>

080084bc <raise>:
 80084bc:	4b02      	ldr	r3, [pc, #8]	@ (80084c8 <raise+0xc>)
 80084be:	4601      	mov	r1, r0
 80084c0:	6818      	ldr	r0, [r3, #0]
 80084c2:	f7ff bfd3 	b.w	800846c <_raise_r>
 80084c6:	bf00      	nop
 80084c8:	2000001c 	.word	0x2000001c

080084cc <_kill_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4d07      	ldr	r5, [pc, #28]	@ (80084ec <_kill_r+0x20>)
 80084d0:	2300      	movs	r3, #0
 80084d2:	4604      	mov	r4, r0
 80084d4:	4608      	mov	r0, r1
 80084d6:	4611      	mov	r1, r2
 80084d8:	602b      	str	r3, [r5, #0]
 80084da:	f7f9 fdff 	bl	80020dc <_kill>
 80084de:	1c43      	adds	r3, r0, #1
 80084e0:	d102      	bne.n	80084e8 <_kill_r+0x1c>
 80084e2:	682b      	ldr	r3, [r5, #0]
 80084e4:	b103      	cbz	r3, 80084e8 <_kill_r+0x1c>
 80084e6:	6023      	str	r3, [r4, #0]
 80084e8:	bd38      	pop	{r3, r4, r5, pc}
 80084ea:	bf00      	nop
 80084ec:	20000498 	.word	0x20000498

080084f0 <_getpid_r>:
 80084f0:	f7f9 bdec 	b.w	80020cc <_getpid>

080084f4 <__swhatbuf_r>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	460c      	mov	r4, r1
 80084f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fc:	2900      	cmp	r1, #0
 80084fe:	b096      	sub	sp, #88	@ 0x58
 8008500:	4615      	mov	r5, r2
 8008502:	461e      	mov	r6, r3
 8008504:	da0d      	bge.n	8008522 <__swhatbuf_r+0x2e>
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800850c:	f04f 0100 	mov.w	r1, #0
 8008510:	bf14      	ite	ne
 8008512:	2340      	movne	r3, #64	@ 0x40
 8008514:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008518:	2000      	movs	r0, #0
 800851a:	6031      	str	r1, [r6, #0]
 800851c:	602b      	str	r3, [r5, #0]
 800851e:	b016      	add	sp, #88	@ 0x58
 8008520:	bd70      	pop	{r4, r5, r6, pc}
 8008522:	466a      	mov	r2, sp
 8008524:	f000 f848 	bl	80085b8 <_fstat_r>
 8008528:	2800      	cmp	r0, #0
 800852a:	dbec      	blt.n	8008506 <__swhatbuf_r+0x12>
 800852c:	9901      	ldr	r1, [sp, #4]
 800852e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008532:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008536:	4259      	negs	r1, r3
 8008538:	4159      	adcs	r1, r3
 800853a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800853e:	e7eb      	b.n	8008518 <__swhatbuf_r+0x24>

08008540 <__smakebuf_r>:
 8008540:	898b      	ldrh	r3, [r1, #12]
 8008542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008544:	079d      	lsls	r5, r3, #30
 8008546:	4606      	mov	r6, r0
 8008548:	460c      	mov	r4, r1
 800854a:	d507      	bpl.n	800855c <__smakebuf_r+0x1c>
 800854c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	6123      	str	r3, [r4, #16]
 8008554:	2301      	movs	r3, #1
 8008556:	6163      	str	r3, [r4, #20]
 8008558:	b003      	add	sp, #12
 800855a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800855c:	ab01      	add	r3, sp, #4
 800855e:	466a      	mov	r2, sp
 8008560:	f7ff ffc8 	bl	80084f4 <__swhatbuf_r>
 8008564:	9f00      	ldr	r7, [sp, #0]
 8008566:	4605      	mov	r5, r0
 8008568:	4639      	mov	r1, r7
 800856a:	4630      	mov	r0, r6
 800856c:	f7fd fbb8 	bl	8005ce0 <_malloc_r>
 8008570:	b948      	cbnz	r0, 8008586 <__smakebuf_r+0x46>
 8008572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008576:	059a      	lsls	r2, r3, #22
 8008578:	d4ee      	bmi.n	8008558 <__smakebuf_r+0x18>
 800857a:	f023 0303 	bic.w	r3, r3, #3
 800857e:	f043 0302 	orr.w	r3, r3, #2
 8008582:	81a3      	strh	r3, [r4, #12]
 8008584:	e7e2      	b.n	800854c <__smakebuf_r+0xc>
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	6020      	str	r0, [r4, #0]
 800858a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800858e:	81a3      	strh	r3, [r4, #12]
 8008590:	9b01      	ldr	r3, [sp, #4]
 8008592:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008596:	b15b      	cbz	r3, 80085b0 <__smakebuf_r+0x70>
 8008598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800859c:	4630      	mov	r0, r6
 800859e:	f000 f81d 	bl	80085dc <_isatty_r>
 80085a2:	b128      	cbz	r0, 80085b0 <__smakebuf_r+0x70>
 80085a4:	89a3      	ldrh	r3, [r4, #12]
 80085a6:	f023 0303 	bic.w	r3, r3, #3
 80085aa:	f043 0301 	orr.w	r3, r3, #1
 80085ae:	81a3      	strh	r3, [r4, #12]
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	431d      	orrs	r5, r3
 80085b4:	81a5      	strh	r5, [r4, #12]
 80085b6:	e7cf      	b.n	8008558 <__smakebuf_r+0x18>

080085b8 <_fstat_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4d07      	ldr	r5, [pc, #28]	@ (80085d8 <_fstat_r+0x20>)
 80085bc:	2300      	movs	r3, #0
 80085be:	4604      	mov	r4, r0
 80085c0:	4608      	mov	r0, r1
 80085c2:	4611      	mov	r1, r2
 80085c4:	602b      	str	r3, [r5, #0]
 80085c6:	f7f9 fde9 	bl	800219c <_fstat>
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	d102      	bne.n	80085d4 <_fstat_r+0x1c>
 80085ce:	682b      	ldr	r3, [r5, #0]
 80085d0:	b103      	cbz	r3, 80085d4 <_fstat_r+0x1c>
 80085d2:	6023      	str	r3, [r4, #0]
 80085d4:	bd38      	pop	{r3, r4, r5, pc}
 80085d6:	bf00      	nop
 80085d8:	20000498 	.word	0x20000498

080085dc <_isatty_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	4d06      	ldr	r5, [pc, #24]	@ (80085f8 <_isatty_r+0x1c>)
 80085e0:	2300      	movs	r3, #0
 80085e2:	4604      	mov	r4, r0
 80085e4:	4608      	mov	r0, r1
 80085e6:	602b      	str	r3, [r5, #0]
 80085e8:	f7f9 fde8 	bl	80021bc <_isatty>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	d102      	bne.n	80085f6 <_isatty_r+0x1a>
 80085f0:	682b      	ldr	r3, [r5, #0]
 80085f2:	b103      	cbz	r3, 80085f6 <_isatty_r+0x1a>
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	bd38      	pop	{r3, r4, r5, pc}
 80085f8:	20000498 	.word	0x20000498

080085fc <round>:
 80085fc:	ec51 0b10 	vmov	r0, r1, d0
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8008606:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800860a:	2a13      	cmp	r2, #19
 800860c:	460b      	mov	r3, r1
 800860e:	4605      	mov	r5, r0
 8008610:	dc1b      	bgt.n	800864a <round+0x4e>
 8008612:	2a00      	cmp	r2, #0
 8008614:	da0b      	bge.n	800862e <round+0x32>
 8008616:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800861a:	3201      	adds	r2, #1
 800861c:	bf04      	itt	eq
 800861e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8008622:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8008626:	2200      	movs	r2, #0
 8008628:	4619      	mov	r1, r3
 800862a:	4610      	mov	r0, r2
 800862c:	e015      	b.n	800865a <round+0x5e>
 800862e:	4c15      	ldr	r4, [pc, #84]	@ (8008684 <round+0x88>)
 8008630:	4114      	asrs	r4, r2
 8008632:	ea04 0601 	and.w	r6, r4, r1
 8008636:	4306      	orrs	r6, r0
 8008638:	d00f      	beq.n	800865a <round+0x5e>
 800863a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800863e:	fa41 f202 	asr.w	r2, r1, r2
 8008642:	4413      	add	r3, r2
 8008644:	ea23 0304 	bic.w	r3, r3, r4
 8008648:	e7ed      	b.n	8008626 <round+0x2a>
 800864a:	2a33      	cmp	r2, #51	@ 0x33
 800864c:	dd08      	ble.n	8008660 <round+0x64>
 800864e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8008652:	d102      	bne.n	800865a <round+0x5e>
 8008654:	4602      	mov	r2, r0
 8008656:	f7f7 fe21 	bl	800029c <__adddf3>
 800865a:	ec41 0b10 	vmov	d0, r0, r1
 800865e:	bd70      	pop	{r4, r5, r6, pc}
 8008660:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8008664:	f04f 34ff 	mov.w	r4, #4294967295
 8008668:	40f4      	lsrs	r4, r6
 800866a:	4204      	tst	r4, r0
 800866c:	d0f5      	beq.n	800865a <round+0x5e>
 800866e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8008672:	2201      	movs	r2, #1
 8008674:	408a      	lsls	r2, r1
 8008676:	1952      	adds	r2, r2, r5
 8008678:	bf28      	it	cs
 800867a:	3301      	addcs	r3, #1
 800867c:	ea22 0204 	bic.w	r2, r2, r4
 8008680:	e7d2      	b.n	8008628 <round+0x2c>
 8008682:	bf00      	nop
 8008684:	000fffff 	.word	0x000fffff

08008688 <_init>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	bf00      	nop
 800868c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868e:	bc08      	pop	{r3}
 8008690:	469e      	mov	lr, r3
 8008692:	4770      	bx	lr

08008694 <_fini>:
 8008694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008696:	bf00      	nop
 8008698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869a:	bc08      	pop	{r3}
 800869c:	469e      	mov	lr, r3
 800869e:	4770      	bx	lr
